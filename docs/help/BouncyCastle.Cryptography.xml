<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>BouncyCastle.Cryptography</name>
  </assembly>
  <members>
    <member name="T:Org.BouncyCastle.Asn1.Asn1BitStringParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1BitStringParser.GetBitStream">
      <summary>Return a <see cref="T:System.IO.Stream" /> representing the contents of the BIT STRING. The final byte, if any,
            may include pad bits. See <see cref="P:Org.BouncyCastle.Asn1.Asn1BitStringParser.PadBits" />.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> with its source as the BIT STRING content.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1BitStringParser.GetOctetStream">
      <summary>Return a <see cref="T:System.IO.Stream" /> representing the contents of the BIT STRING, where the content is
            expected to be octet-aligned (this will be automatically checked during parsing).</summary>
      <returns>A <see cref="T:System.IO.Stream" /> with its source as the BIT STRING content.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1BitStringParser.PadBits">
      <summary>Return the number of pad bits, if any, in the final byte, if any, read from
            <see cref="M:Org.BouncyCastle.Asn1.Asn1BitStringParser.GetBitStream" />.</summary>
      <returns>The number of pad bits. In the range zero to seven.</returns>
      <remarks>
            This number is in the range zero to seven. That number of the least significant bits of the final byte, if
            any, are not part of the contents and should be ignored. NOTE: Must be called AFTER the stream has been
            fully processed. (Does not need to be called if <see cref="M:Org.BouncyCastle.Asn1.Asn1BitStringParser.GetOctetStream" /> was used instead of
            <see cref="M:Org.BouncyCastle.Asn1.Asn1BitStringParser.GetBitStream" />.
            </remarks>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Encodable"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Encodable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Encodable.Ber"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Encodable.Der"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Encodable.DL"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.EncodeTo(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.EncodeTo(System.IO.Stream,System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.GetDerEncoded"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.GetEncoded(System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Encodable.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1EncodableVector"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1EncodableVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1EncodableVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1EncodableVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1EncodableVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1EncodableVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.Add(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.Add(Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.Add(Org.BouncyCastle.Asn1.Asn1Encodable[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.AddAll(Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.AddOptional(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.AddOptional(Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.AddOptional(Org.BouncyCastle.Asn1.Asn1Encodable[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.AddOptionalTagged(System.Boolean,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.AddOptionalTagged(System.Boolean,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1EncodableVector.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.FromEnumerable(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Asn1Encodable})"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1EncodableVector.GetEnumerator"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1EncodableVector.Item(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Exception"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Exception.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Exception</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Exception</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Exception.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Exception</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Exception.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Exception</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1GeneralizedTime">
      <summary>GeneralizedTime ASN.1 type</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.#ctor(System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1GeneralizedTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1GeneralizedTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.TimeString"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1GeneralizedTime.ToDateTime"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Generator"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Generator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Generator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Generator.AddObject(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Generator.AddObject(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Generator.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Asn1.Asn1Generator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Generator.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Asn1.Asn1Generator</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Asn1.Asn1Generator</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Generator.Finish"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Generator.GetRawOutputStream"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1Generator.OutStream"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1InputStream"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1InputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Asn1.Asn1InputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Asn1.Asn1InputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1InputStream.ReadObject"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Null"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Null.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Null.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Null.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Object</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.EncodeTo(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.EncodeTo(System.IO.Stream,System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.FromByteArray(System.Byte[])">
      <summary>Create a base ASN.1 object from a byte array.</summary>
      <param name="data">The byte array to parse.</param>
      <returns>The base ASN.1 object represented by the byte array.</returns>
      <exception cref="T:System.IO.IOException">
            If there is a problem parsing the data, or parsing an object did not exhaust the available data.
            </exception>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.FromStream(System.IO.Stream)">
      <summary>Read a base ASN.1 object from a stream.</summary>
      <param name="inStr">The stream to parse.</param>
      <returns>The base ASN.1 object represented by the byte array.</returns>
      <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Object.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1ObjectDescriptor"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1ObjectDescriptor.#ctor(Org.BouncyCastle.Asn1.DerGraphicString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1ObjectDescriptor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1ObjectDescriptor.BaseGraphicString"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1ObjectDescriptor.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1ObjectDescriptor.GetInstance(System.Object)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1OctetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.GetOctetsLength"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.GetOctetStream"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1OctetString.Parser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetString.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1OctetStringParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OctetStringParser.GetOctetStream">
      <summary>Return the content of the OCTET STRING as a <see cref="T:System.IO.Stream" />.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> represnting the OCTET STRING's content.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1OutputStream"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OutputStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1OutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OutputStream.Create(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OutputStream.Create(System.IO.Stream,System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OutputStream.Create(System.IO.Stream,System.String,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OutputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Asn1.Asn1OutputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Asn1.Asn1OutputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OutputStream.WriteObject(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1OutputStream.WriteObject(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1ParsingException"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1ParsingException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1ParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1ParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1ParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1ParsingException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1ParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1ParsingException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1ParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1RelativeOid"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1RelativeOid</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.Branch(System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.FromContents(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1RelativeOid.Id"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1RelativeOid.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Sequence"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Sequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.Asn1GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1Sequence.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.GetEnumerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1Sequence.Item(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.MapElements``1(System.Func{Org.BouncyCastle.Asn1.Asn1Encodable,``0})"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1Sequence.Parser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.ToArray"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Sequence.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1SequenceParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1SequenceParser.ReadObject"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Set"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Set</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Set</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[],System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Set</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Set</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.#ctor(System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Set</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.Asn1GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1Set.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.GetEnumerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1Set.Item(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.MapElements``1(System.Func{Org.BouncyCastle.Asn1.Asn1Encodable,``0})"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1Set.Parser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.ToArray"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Set.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1SetParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1SetParser.ReadObject"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1StreamParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1StreamParser.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1StreamParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1StreamParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1StreamParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1StreamParser.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1StreamParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1StreamParser.ReadObject"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1TaggedObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.#ctor(System.Boolean,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1TaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.#ctor(System.Boolean,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1TaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetBaseObject">
      <summary>Needed for open types, until we have better type-guided parsing support.</summary>
      <remarks>
            Use sparingly for other purposes, and prefer <see cref="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetExplicitBaseTagged" />,
            <see cref="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetImplicitBaseTagged(System.Int32,System.Int32)" /> or <see cref="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetBaseUniversal(System.Boolean,System.Int32)" /> where possible.
            Before using, check for matching tag <see cref="P:Org.BouncyCastle.Asn1.Asn1TaggedObject.TagClass">class</see> and <see cref="P:Org.BouncyCastle.Asn1.Asn1TaggedObject.TagNo">number</see>.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetBaseUniversal(System.Boolean,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetExplicitBaseObject">
      <summary>Needed for open types, until we have better type-guided parsing support.</summary>
      <remarks>
            Use sparingly for other purposes, and prefer <see cref="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetExplicitBaseTagged" /> or
            <see cref="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetBaseUniversal(System.Boolean,System.Int32)" /> where possible. Before using, check for matching tag
            <see cref="P:Org.BouncyCastle.Asn1.Asn1TaggedObject.TagClass">class</see> and <see cref="P:Org.BouncyCastle.Asn1.Asn1TaggedObject.TagNo">number</see>.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetExplicitBaseTagged"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetImplicitBaseTagged(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetInstance(System.Object,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetInstance(System.Object,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.GetObject">
      <summary>Return whatever was following the tag.</summary>
      <remarks>
            Tagged objects are generally context dependent. If you're trying to extract a tagged object you should be
            going via the appropriate GetInstance method.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.HasContextTag"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.HasContextTag(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.HasTag(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.HasTagClass(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.IsExplicit"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.ParseBaseUniversal(System.Boolean,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.ParseExplicitBaseObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.ParseExplicitBaseTagged"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.ParseImplicitBaseTagged(System.Int32,System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1TaggedObject.TagClass"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1TaggedObject.TagNo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObject.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.HasContextTag(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.HasTag(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.ParseBaseUniversal(System.Boolean,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.ParseExplicitBaseObject">
      <summary>Needed for open types, until we have better type-guided parsing support.</summary>
      <remarks>
            Use sparingly for other purposes, and prefer <see cref="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.ParseExplicitBaseTagged" /> or
            <see cref="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.ParseBaseUniversal(System.Boolean,System.Int32)" /> where possible. Before using, check for matching tag
            <see cref="P:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.TagClass">class</see> and <see cref="P:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.TagNo">number</see>.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.ParseExplicitBaseTagged">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.ParseImplicitBaseTagged(System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.TagClass"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1TaggedObjectParser.TagNo"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Tags"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Tags.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Tags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Application"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.BitString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.BmpString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Boolean"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Constructed"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.ContextSpecific"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Date"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.DateTime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Duration"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.EmbeddedPdv"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Enumerated"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.External"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Flags"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.GeneralizedTime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.GeneralString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.GraphicString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.IA5String"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Integer"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Null"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.NumericString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.ObjectDescriptor"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.ObjectIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.ObjectIdentifierIri"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.OctetString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.PrintableString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Private"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Real"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.RelativeOid"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.RelativeOidIri"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Sequence"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.SequenceOf"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Set"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.SetOf"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.T61String"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Time"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.TimeOfDay"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Universal"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.UniversalString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.UnrestrictedString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.UtcTime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.Utf8String"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.VideotexString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Asn1Tags.VisibleString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1UtcTime">
      <summary>UTCTime ASN.1 type</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.#ctor(System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1UtcTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.#ctor(System.DateTime,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1UtcTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1UtcTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1UtcTime.TimeString"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.ToAdjustedDateTime">
      <summary>Return an adjusted date in the range of 1950 - 2049.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.ToDateTime"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.ToDateTime(System.Globalization.Calendar)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.ToDateTime(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1UtcTime.ToString"></member>
    <member name="P:Org.BouncyCastle.Asn1.Asn1UtcTime.TwoDigitYearMax"></member>
    <member name="T:Org.BouncyCastle.Asn1.Asn1Utilities"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Asn1Utilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Boolean,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetContextBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Boolean,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetExplicitBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetExplicitContextBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetImplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetImplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetTagClassText(Org.BouncyCastle.Asn1.Asn1TaggedObject)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetTagClassText(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetTagClassText(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetTagText(Org.BouncyCastle.Asn1.Asn1TaggedObject)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetTagText(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.GetTagText(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Boolean,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseContextBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Boolean,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseExplicitBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseExplicitContextBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseImplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.ParseImplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Boolean,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Boolean,System.Int32,Org.BouncyCastle.Asn1.Asn1Object@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetContextBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Boolean,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetContextBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Boolean,System.Int32,Org.BouncyCastle.Asn1.Asn1Object@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObject@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObject@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitContextBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitContextBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,Org.BouncyCastle.Asn1.Asn1TaggedObject@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObject@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetImplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetImplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObject@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetImplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryGetImplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObject@)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Boolean,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Boolean,System.Int32,Org.BouncyCastle.Asn1.IAsn1Convertible@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseContextBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Boolean,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseContextBaseUniversal(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Boolean,System.Int32,Org.BouncyCastle.Asn1.IAsn1Convertible@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,Org.BouncyCastle.Asn1.IAsn1Convertible@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObjectParser@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObjectParser@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitContextBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitContextBaseObject(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,Org.BouncyCastle.Asn1.IAsn1Convertible@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,Org.BouncyCastle.Asn1.Asn1TaggedObjectParser@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseExplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObjectParser@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseImplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseImplicitBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObjectParser@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseImplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Asn1Utilities.TryParseImplicitContextBaseTagged(Org.BouncyCastle.Asn1.Asn1TaggedObjectParser,System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1TaggedObjectParser@)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Asn1.BerBitString"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(Org.BouncyCastle.Asn1.DerBitString[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(Org.BouncyCastle.Asn1.DerBitString[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(System.Byte,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.#ctor(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerBitString.FromSequence(Org.BouncyCastle.Asn1.Asn1Sequence)"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.AddObject(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.AddObject(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.Finish"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.GetRawOutputStream"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.WriteBerBody(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.WriteBerEnd"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerGenerator.WriteBerHeader(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerOctetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetString.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerOctetString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetString.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerOctetString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerOctetString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetString.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerOctetString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetString.FromSequence(Org.BouncyCastle.Asn1.Asn1Sequence)"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerOctetStringGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetStringGenerator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerOctetStringGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetStringGenerator.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerOctetStringGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetStringGenerator.GetOctetOutputStream">
      <remarks>The caller is responsible for disposing the returned <see cref="T:System.IO.Stream" /> before disposing
            this generator.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetStringGenerator.GetOctetOutputStream(System.Byte[])">
      <remarks>The caller is responsible for disposing the returned <see cref="T:System.IO.Stream" /> before disposing
            this generator.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetStringGenerator.GetOctetOutputStream(System.Int32)">
      <remarks>The caller is responsible for disposing the returned <see cref="T:System.IO.Stream" /> before disposing
            this generator.</remarks>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.BerOctetStringParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetStringParser.GetOctetStream"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerOctetStringParser.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerSequence"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequence.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.BerSequence.Empty"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequence.FromVector(Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerSequenceGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequenceGenerator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSequenceGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequenceGenerator.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSequenceGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.BerSequenceParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequenceParser.ReadObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSequenceParser.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerSet"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSet.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSet.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSet.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSet.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.BerSet.Empty"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSet.FromVector(Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerSetGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSetGenerator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSetGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerSetGenerator.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerSetGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.BerSetParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSetParser.ReadObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerSetParser.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.BerTaggedObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Boolean,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Boolean,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DerBitString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.#ctor(System.Byte,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.#ctor(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.GetBitStream"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.GetBytes"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.GetOctetStream"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBitString.GetString"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerBitString.IntValue"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerBitString.PadBits"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerBitString.Parser"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerBmpString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBmpString.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBmpString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBmpString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBmpString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBmpString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBmpString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBmpString.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerBoolean"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerBoolean</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.Asn1GetHashCode"></member>
    <member name="F:Org.BouncyCastle.Asn1.DerBoolean.False"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.GetInstance(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.GetInstance(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerBoolean.IsTrue"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerBoolean.ToString"></member>
    <member name="F:Org.BouncyCastle.Asn1.DerBoolean.True"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerEnumerated"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerEnumerated</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerEnumerated</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerEnumerated</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.#ctor(System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerEnumerated</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.HasValue(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerEnumerated.HasValue(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerEnumerated.IntValueExact"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerEnumerated.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerExternal"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1ObjectDescriptor,Org.BouncyCastle.Asn1.Asn1TaggedObject)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1ObjectDescriptor,Org.BouncyCastle.Asn1.DerTaggedObject)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1ObjectDescriptor,System.Int32,Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.Asn1GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerExternal.DataValueDescriptor"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerExternal.DirectReference"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerExternal.Encoding"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerExternal.ExternalContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternal.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerExternal.IndirectReference"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerExternalParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternalParser.ReadObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerExternalParser.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerGeneralizedTime"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralizedTime.#ctor(System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerGeneralizedTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralizedTime.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerGeneralizedTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DerGeneralString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerGeneralString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerGeneralString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGeneralString.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGenerator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerGenerator.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DerGraphicString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGraphicString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerGraphicString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerGraphicString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGraphicString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGraphicString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGraphicString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGraphicString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerGraphicString.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerIA5String"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerIA5String</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerIA5String</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.#ctor(System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerIA5String</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.GetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerIA5String.IsIA5String(System.String)"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerInteger"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.#ctor(System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.DerInteger.AllowUnsafeProperty"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.HasValue(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.HasValue(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.HasValue(System.Int64)"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerInteger.IntPositiveValueExact"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerInteger.IntValueExact"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerInteger.LongValueExact"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerInteger.PositiveValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerInteger.ToString"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerInteger.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerNull"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNull.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerNull</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerNull.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNull.Asn1GetHashCode"></member>
    <member name="F:Org.BouncyCastle.Asn1.DerNull.Instance"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerNumericString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerNumericString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerNumericString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.#ctor(System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerNumericString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.GetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerNumericString.IsNumericString(System.String)"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerObjectIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerObjectIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.Branch(System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.FromContents(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.DerObjectIdentifier.Id"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.On(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerObjectIdentifier.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerOctetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerOctetString.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerOctetString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerOctetString.#ctor(Org.BouncyCastle.Asn1.IAsn1Convertible)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerOctetString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerOctetString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerOctetString</parameter>
          </include>
        </markup>
      </summary>
      <param name="contents">The octets making up the octet string.</param>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DerOctetStringParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerOctetStringParser.GetOctetStream"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerOctetStringParser.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerPrintableString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerPrintableString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerPrintableString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.#ctor(System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerPrintableString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.GetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerPrintableString.IsPrintableString(System.String)"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerSequence"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequence.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequence.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.DerSequence.Empty"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequence.FromVector(Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerSequenceGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceGenerator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSequenceGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceGenerator.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSequenceGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceGenerator.AddObject(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceGenerator.AddObject(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceGenerator.Finish"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceGenerator.GetRawOutputStream"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerSequenceParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceParser.ReadObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSequenceParser.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerSet"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSet.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSet.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSet.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSet.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.DerSet.Empty"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSet.FromVector(Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerSetGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetGenerator.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSetGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetGenerator.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerSetGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetGenerator.AddObject(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetGenerator.AddObject(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetGenerator.Finish"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetGenerator.GetRawOutputStream"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerSetParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetParser.ReadObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerSetParser.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerStringBase"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerStringBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerStringBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerStringBase.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerStringBase.GetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerStringBase.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerT61String"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerT61String</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerT61String</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerT61String.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerTaggedObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Boolean,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Boolean,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DerUniversalString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUniversalString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerUniversalString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerUniversalString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUniversalString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUniversalString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUniversalString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUniversalString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUniversalString.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerUtcTime"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtcTime.#ctor(System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerUtcTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtcTime.#ctor(System.DateTime,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerUtcTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtcTime.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerUtcTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DerUtf8String"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtf8String.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerUtf8String</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtf8String.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerUtf8String</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtf8String.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtf8String.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtf8String.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtf8String.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerUtf8String.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerVideotexString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVideotexString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerVideotexString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerVideotexString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVideotexString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVideotexString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVideotexString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVideotexString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVideotexString.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DerVisibleString"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerVisibleString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DerVisibleString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.GetOctets"></member>
    <member name="M:Org.BouncyCastle.Asn1.DerVisibleString.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.DLBitString">
      <summary>A Definite length BIT STRING</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLBitString.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLBitString.#ctor(System.Byte,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLBitString.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLBitString.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLBitString.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLBitString.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLBitString.#ctor(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLBitString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DLExternal"></member>
    <member name="M:Org.BouncyCastle.Asn1.DLExternal.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLExternal.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLExternal.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1ObjectDescriptor,Org.BouncyCastle.Asn1.Asn1TaggedObject)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLExternal.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1ObjectDescriptor,System.Int32,Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.DLSequence"></member>
    <member name="M:Org.BouncyCastle.Asn1.DLSequence.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLSequence.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLSequence.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.DLSequence.Empty"></member>
    <member name="M:Org.BouncyCastle.Asn1.DLSequence.FromVector(Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="T:Org.BouncyCastle.Asn1.DLSet"></member>
    <member name="M:Org.BouncyCastle.Asn1.DLSet.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLSet.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLSet.#ctor(Org.BouncyCastle.Asn1.Asn1Encodable[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLSet.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.DLSet.Empty"></member>
    <member name="M:Org.BouncyCastle.Asn1.DLSet.FromVector(Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="T:Org.BouncyCastle.Asn1.DLTaggedObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.DLTaggedObject.#ctor(System.Boolean,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLTaggedObject.#ctor(System.Boolean,System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLTaggedObject.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.DLTaggedObject.#ctor(System.Int32,System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.DLTaggedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.IAsn1Choice"></member>
    <member name="T:Org.BouncyCastle.Asn1.IAsn1Convertible"></member>
    <member name="M:Org.BouncyCastle.Asn1.IAsn1Convertible.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.IAsn1String"></member>
    <member name="M:Org.BouncyCastle.Asn1.IAsn1String.GetString"></member>
    <member name="T:Org.BouncyCastle.Asn1.LazyAsn1InputStream">
      <remarks>No longer provides any laziness.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.LazyAsn1InputStream.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.LazyAsn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.LazyAsn1InputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.LazyAsn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.LazyAsn1InputStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.LazyAsn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.LazyAsn1InputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.LazyAsn1InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.OidTokenizer"></member>
    <member name="M:Org.BouncyCastle.Asn1.OidTokenizer.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.OidTokenizer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.OidTokenizer.HasMoreTokens"></member>
    <member name="M:Org.BouncyCastle.Asn1.OidTokenizer.NextToken"></member>
    <member name="T:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves">
      <summary>Elliptic curve registry for ANSSI.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Anssi.AnssiObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.Anssi.AnssiObjectIdentifiers.FRP256v1"></member>
    <member name="T:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_exch"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_ext"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_kem"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes128_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes192_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes256_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs5"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha224"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes128_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes192_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes256_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs5"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha384"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bc_sig"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bike128"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bike192"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.bike256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.dilithium"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.dilithium2"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.dilithium2_aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.dilithium3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.dilithium3_aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.dilithium5"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.dilithium5_aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.external_value"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.falcon"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.falcon_1024"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.falcon_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.firesaberkem128r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.firesaberkem192r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.firesaberkem256r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.firesaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.frodokem1344aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.frodokem1344shake"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.frodokem640aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.frodokem640shake"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.frodokem976aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.frodokem976shake"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.hqc128"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.hqc192"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.hqc256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.kyber1024"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.kyber1024_aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.kyber512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.kyber512_aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.kyber768"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.kyber768_aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.lightsaberkem128r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.lightsaberkem192r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.lightsaberkem256r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.lightsaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.linkedCertificate"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece348864_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece348864f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece460896_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece460896f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece6688128_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece6688128f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece6960119_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece6960119f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece8192128_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.mceliece8192128f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.newHope"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntruhps2048509"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntruhps2048677"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntruhps4096821"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntruhrss701"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntrulpr1013"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntrulpr1277"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntrulpr653"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntrulpr761"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntrulpr857"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ntrulpr953"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic_signature"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic_with_sha3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic_with_sha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic_with_shake256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic3l1"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic3l3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnic3l5"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl1fs"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl1full"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl1ur"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl3fs"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl3full"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl3ur"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl5fs"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl5full"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.picnicl5ur"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_bike"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_frodo"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_hqc"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_kyber"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_mceliece"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_ntru"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_ntrulprime"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_ntruprime"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_saber"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_sike"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.pqc_kem_sntruprime"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA_p_I"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA_p_III"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA_Rnd1_I"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA_Rnd1_III_size"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA_Rnd1_III_speed"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA_Rnd1_p_I"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.qTESLA_Rnd1_p_III"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.rainbow"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.rainbow_III_circumzenithal"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.rainbow_III_classic"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.rainbow_III_compressed"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.rainbow_V_circumzenithal"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.rainbow_V_classic"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.rainbow_V_compressed"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.saberkem128r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.saberkem192r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.saberkem256r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.saberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep434"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep434_compressed"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep503"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep503_compressed"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep610"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep610_compressed"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep751"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sikep751_compressed"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sntrup1013"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sntrup1277"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sntrup653"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sntrup761"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sntrup857"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sntrup953"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincs256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincs256_with_BLAKE512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincs256_with_SHA3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincs256_with_SHA512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_128f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_128f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_128s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_128s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_192f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_192f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_192s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_192s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_256f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_256f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_256s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_haraka_256s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_interop"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_128f"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_128f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_128f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_128s"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_128s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_128s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_192f"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_192f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_192f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_192s"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_192s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_192s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_256f"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_256f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_256f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_256s"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_256s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_sha2_256s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_128f"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_128f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_128f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_128s"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_128s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_128s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_192f"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_192f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_192f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_192s"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_192s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_192s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_256f"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_256f_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_256f_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_256s"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_256s_r3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.sphincsPlus_shake_256s_r3_simple"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ufiresaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ufiresaberkemr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ulightsaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.ulightsaberkemr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.usaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.usaberkemr3"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHA256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHA256ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHA512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHA512ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHAKE128"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHAKE128ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHAKE256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_SHAKE256ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_with_SHA256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_with_SHA512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_with_SHAKE128"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_mt_with_SHAKE256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHA256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHA256ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHA512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHA512ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHAKE128"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHAKE128ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHAKE256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_SHAKE256ph"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_with_SHA256"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_with_SHA512"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_with_SHAKE128"></member>
    <member name="F:Org.BouncyCastle.Asn1.BC.BCObjectIdentifiers.xmss_with_SHAKE256"></member>
    <member name="T:Org.BouncyCastle.Asn1.BC.LinkedCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.BC.LinkedCertificate.#ctor(Org.BouncyCastle.Asn1.X509.DigestInfo,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BC.LinkedCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.BC.LinkedCertificate.#ctor(Org.BouncyCastle.Asn1.X509.DigestInfo,Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Asn1.X509.GeneralNames)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.BC.LinkedCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.BC.LinkedCertificate.CACerts"></member>
    <member name="P:Org.BouncyCastle.Asn1.BC.LinkedCertificate.CertIssuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.BC.LinkedCertificate.CertLocation"></member>
    <member name="P:Org.BouncyCastle.Asn1.BC.LinkedCertificate.Digest"></member>
    <member name="M:Org.BouncyCastle.Asn1.BC.LinkedCertificate.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.BC.LinkedCertificate.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers">
      <remarks>See https://www.bsi.bund.de/cae/servlet/contentblob/471398/publicationFile/30615/BSI-TR-03111_pdf.pdf</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.algorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.bsi_de"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_RIPEMD160"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA3_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA3_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA3_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_SHA512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecdsa_plain_signatures"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_SessionKDF"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_SessionKDF_3DES"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_SessionKDF_AES128"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_SessionKDF_AES192"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_SessionKDF_AES256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_RIPEMD160"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.ecka_eg_X963kdf_SHA512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers.id_ecc"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.NewWithNew"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.NewWithOld"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.OldWithNew"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertAnnContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertAnnContent.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertAnnContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertAnnContent.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertAnnContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertAnnContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertAnnContent.GetInstance(System.Object)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertConfirmContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertConfirmContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertConfirmContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertConfirmContent.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertConfirmContent.ToCertStatusArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.#ctor(Org.BouncyCastle.Asn1.Cmp.CertOrEncCert)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.#ctor(Org.BouncyCastle.Asn1.Cmp.CertOrEncCert,Org.BouncyCastle.Asn1.Crmf.EncryptedKey,Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.#ctor(Org.BouncyCastle.Asn1.Cmp.CertOrEncCert,Org.BouncyCastle.Asn1.Crmf.EncryptedValue,Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.CertOrEncCert"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.PrivateKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.PublicationInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.#ctor(Org.BouncyCastle.Asn1.Cmp.CmpCertificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertOrEncCert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.#ctor(Org.BouncyCastle.Asn1.Crmf.EncryptedKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertOrEncCert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.#ctor(Org.BouncyCastle.Asn1.Crmf.EncryptedValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertOrEncCert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.Certificate"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.EncryptedCert"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.HasEncryptedCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertRepMessage"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertRepMessage.#ctor(Org.BouncyCastle.Asn1.Cmp.CmpCertificate[],Org.BouncyCastle.Asn1.Cmp.CertResponse[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertRepMessage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertRepMessage.GetCAPubs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertRepMessage.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertRepMessage.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertRepMessage.GetResponse"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertRepMessage.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent.#ctor(Org.BouncyCastle.Asn1.Crmf.CertTemplate,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent.CertTemplate"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent.KeySpec"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertReqTemplateContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertResponse"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertResponse.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertResponse.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo,Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertResponse.CertifiedKeyPair"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertResponse.CertReqID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertResponse.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertResponse.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertResponse.RspInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertResponse.Status"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertResponse.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CertStatus"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.#ctor(System.Byte[],Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.#ctor(System.Byte[],Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.#ctor(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.#ctor(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertStatus.CertHash"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertStatus.CertReqID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertStatus.HashAlg"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CertStatus.StatusInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.Challenge"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.Challenge</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.Challenge</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.Challenge.ChallengeValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.Challenge.Owf"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.Challenge.Witness"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.Challenge.Rand</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.Challenge.Rand</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand.IntVal"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand.Sender"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.Rand.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CmpCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CmpCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CmpCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.IsX509v3PKCert"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.OtherCert"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.OtherCertTag"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.X509v3PKCert"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.ct_encKeyWithID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.dhBasedMac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it_caCerts"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it_certProfile"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it_certReqTemplate"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it_crls"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it_crlStatusList"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it_rootCaCert"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_it_rootCaKeyUpdate"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_pkip"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_regCtrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_regCtrl_algId"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_regCtrl_rsaKeyLen"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.id_regInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_caKeyUpdateInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_caProtEncCert"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_confirmWaitTime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_currentCRL"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_encKeyPairTypes"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_implicitConfirm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_keyPairParamRep"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_keyPairParamReq"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_origPKIMessage"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_preferredSymAlg"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_revPassphrase"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_signKeyPairTypes"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_suppLangTags"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.it_unsupportedOIDs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.passwordBasedMac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regCtrl_altCertTemplate"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regCtrl_authenticator"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regCtrl_oldCertID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regCtrl_pkiArchiveOptions"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regCtrl_pkiPublicationInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regCtrl_protocolEncrKey"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regCtrl_regToken"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regInfo_certReq"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.CmpObjectIdentifiers.regInfo_utf8Pairs"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CrlAnnContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlAnnContent.#ctor(Org.BouncyCastle.Asn1.X509.CertificateList)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CrlAnnContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlAnnContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlAnnContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlAnnContent.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlAnnContent.ToCertificateListArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CrlSource"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlSource.#ctor(Org.BouncyCastle.Asn1.X509.DistributionPointName,Org.BouncyCastle.Asn1.X509.GeneralNames)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CrlSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CrlSource.Dpn"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlSource.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlSource.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CrlSource.Issuer"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlSource.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.CrlStatus"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlStatus.#ctor(Org.BouncyCastle.Asn1.Cmp.CrlSource,Org.BouncyCastle.Asn1.X509.Time)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.CrlStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlStatus.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlStatus.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CrlStatus.Source"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.CrlStatus.ThisUpdate"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlStatus.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.DhbmParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.DhbmParameter.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.DhbmParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.DhbmParameter.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.DhbmParameter.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.DhbmParameter.Mac"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.DhbmParameter.Owf"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.DhbmParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Cmp.PkiFreeText)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.ErrorCode"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.ErrorDetails"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.PkiStatusInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.GenMsgContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenMsgContent.#ctor(Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.GenMsgContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenMsgContent.#ctor(Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.GenMsgContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenMsgContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenMsgContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenMsgContent.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenMsgContent.ToInfoTypeAndValueArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.GenRepContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenRepContent.#ctor(Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.GenRepContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenRepContent.#ctor(Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.GenRepContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenRepContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenRepContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenRepContent.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenRepContent.ToInfoTypeAndValueArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.InfoType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.InfoValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.KemBMParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.KemBMParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Int64,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.KemBMParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.Kdf"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.Len"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.Mac"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemBMParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo.Ct"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo.Kem"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemCiphertextInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.KemOtherInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1OctetString,System.Int64,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.KemOtherInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.Ct"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.Len"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.Mac"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.RecipNonce"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.SenderNonce"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KemOtherInfo.TransactionID"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.GetCACerts"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.GetKeyPairHist"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.NewSigCert"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.Status"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.NestedMessageContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.NestedMessageContent.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.NestedMessageContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.NestedMessageContent.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiMessage)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.NestedMessageContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.NestedMessageContent.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiMessage[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.NestedMessageContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.NestedMessageContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.NestedMessageContent.GetInstance(System.Object)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.OobCert"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCert.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.OobCert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCert.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.OobCert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCert.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCert.GetInstance(System.Object)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.OobCertHash"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.OobCertHash.CertID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCertHash.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCertHash.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.OobCertHash.HashAlg"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.OobCertHash.HashVal"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCertHash.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PbmParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PbmParameter.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PbmParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PbmParameter.#ctor(System.Byte[],Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Int32,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PbmParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PbmParameter.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PbmParameter.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PbmParameter.IterationCount"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PbmParameter.Mac"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PbmParameter.Owf"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PbmParameter.Salt"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PbmParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiBody"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiBody.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiBody</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiBody.Content"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiBody.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiBody.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiBody.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiBody.Type"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CA_KEY_UPDATE_ANN"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CERT_ANN"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CERT_CONFIRM"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CERT_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CERT_REQ"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CONFIRM"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CRL_ANN"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CROSS_CERT_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_CROSS_CERT_REQ"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_ERROR"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_GEN_MSG"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_GEN_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_INIT_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_INIT_REQ"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_KEY_RECOVERY_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_KEY_RECOVERY_REQ"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_KEY_UPDATE_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_KEY_UPDATE_REQ"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_NESTED"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_P10_CERT_REQ"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_POLL_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_POLL_REQ"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_POPO_CHALL"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_POPO_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_REVOCATION_ANN"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_REVOCATION_REP"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiBody.TYPE_REVOCATION_REQ"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiConfirmContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiConfirmContent.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiConfirmContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiConfirmContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiConfirmContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiConfirmContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.#ctor(Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.AddInfoNotAvailable"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadAlg"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadCertId"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadCertTemplate"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadDataFormat"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadMessageCheck"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadPop"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadRecipientNonce"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadRequest"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadSenderNonce"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.BadTime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.CertConfirmed"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.CertRevoked"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.DuplicateCertReq"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.IncorrectData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.MissingTimeStamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.NotAuthorized"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.SignerNotTrusted"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.SystemFailure"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.SystemUnavail"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.TimeNotAvailable"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.ToString"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.TransactionIdInUse"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.UnacceptedExtension"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.UnacceptedPolicy"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.UnsupportedVersion"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.WrongAuthority"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.WrongIntegrity"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiFreeText"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.#ctor(Org.BouncyCastle.Asn1.DerUtf8String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiFreeText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.#ctor(Org.BouncyCastle.Asn1.DerUtf8String[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiFreeText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiFreeText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.#ctor(System.String[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiFreeText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.Item(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFreeText.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiHeader"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeader.#ctor(System.Int32,Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiHeader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiHeader.CMP_1999"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiHeader.CMP_2000"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.FreeText"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeader.GetGeneralInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeader.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeader.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.MessageTime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiHeader.NULL_NAME"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.ProtectionAlg"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.Pvno"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.Recipient"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.RecipKID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.RecipNonce"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.Sender"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.SenderKID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.SenderNonce"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeader.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiHeader.TransactionID"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.#ctor(System.Int32,Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.Build"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetFreeText(Org.BouncyCastle.Asn1.Cmp.PkiFreeText)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetGeneralInfo(Org.BouncyCastle.Asn1.Asn1Sequence)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetGeneralInfo(Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetGeneralInfo(Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetMessageTime(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetProtectionAlg(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetRecipKID(Org.BouncyCastle.Asn1.Asn1OctetString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetRecipKID(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetRecipNonce(Org.BouncyCastle.Asn1.Asn1OctetString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetRecipNonce(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetSenderKID(Org.BouncyCastle.Asn1.Asn1OctetString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetSenderKID(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetSenderNonce(Org.BouncyCastle.Asn1.Asn1OctetString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetSenderNonce(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetTransactionID(Org.BouncyCastle.Asn1.Asn1OctetString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.SetTransactionID(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiMessage"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiHeader,Org.BouncyCastle.Asn1.Cmp.PkiBody)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiMessage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiHeader,Org.BouncyCastle.Asn1.Cmp.PkiBody,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiMessage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiHeader,Org.BouncyCastle.Asn1.Cmp.PkiBody,Org.BouncyCastle.Asn1.DerBitString,Org.BouncyCastle.Asn1.Cmp.CmpCertificate[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiMessage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiMessage.Body"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.GetExtraCerts"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiMessage.Header"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiMessage.Protection"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiMessages"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessages.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiMessage[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiMessages</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessages.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessages.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessages.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessages.ToPkiMessageArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiStatus"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.granted"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.grantedWithMods"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.keyUpdateWaiting"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.rejection"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.revocationNotification"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.revocationWarning"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.Value"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable.waiting"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32,Org.BouncyCastle.Asn1.Cmp.PkiFreeText)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32,Org.BouncyCastle.Asn1.Cmp.PkiFreeText,Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.FailInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.Status"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.StatusString"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PollRepContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PollRepContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Cmp.PkiFreeText)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PollRepContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.PollRepContent.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.GetCertReqID(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.GetCheckAfter(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.GetReason(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PollReqContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.#ctor(Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PollReqContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.#ctor(Org.BouncyCastle.Asn1.DerInteger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PollReqContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PollReqContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.#ctor(Org.BouncyCastle.Math.BigInteger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.PollReqContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.GetCertReqIDs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.GetCertReqIDValues"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent.ToChallengeArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent.ToIntegerArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.ProtectedPart"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ProtectedPart.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiHeader,Org.BouncyCastle.Asn1.Cmp.PkiBody)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.ProtectedPart</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.ProtectedPart.Body"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ProtectedPart.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ProtectedPart.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.ProtectedPart.Header"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ProtectedPart.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.RevAnnContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable,Org.BouncyCastle.Asn1.Crmf.CertId,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Asn1GeneralizedTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RevAnnContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiStatusEncodable,Org.BouncyCastle.Asn1.Crmf.CertId,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RevAnnContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.BadSinceDate"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.CertID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.CrlDetails"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.Status"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.WillBeRevokedAt"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.RevDetails"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevDetails.#ctor(Org.BouncyCastle.Asn1.Crmf.CertTemplate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RevDetails</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevDetails.#ctor(Org.BouncyCastle.Asn1.Crmf.CertTemplate,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RevDetails</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RevDetails.CertDetails"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RevDetails.CrlEntryDetails"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevDetails.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevDetails.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevDetails.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.RevRepContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContent.GetCrls"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContent.GetRevCerts"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContent.GetStatus"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.RevRepContentBuilder"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContentBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RevRepContentBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContentBuilder.Add(Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContentBuilder.Add(Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo,Org.BouncyCastle.Asn1.Crmf.CertId)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContentBuilder.AddCrl(Org.BouncyCastle.Asn1.X509.CertificateList)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContentBuilder.Build"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.RevReqContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevReqContent.#ctor(Org.BouncyCastle.Asn1.Cmp.RevDetails)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RevReqContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevReqContent.#ctor(Org.BouncyCastle.Asn1.Cmp.RevDetails[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RevReqContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevReqContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevReqContent.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevReqContent.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevReqContent.ToRevDetailsArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent.#ctor(Org.BouncyCastle.Asn1.Cmp.CmpCertificate,Org.BouncyCastle.Asn1.Cmp.CmpCertificate,Org.BouncyCastle.Asn1.Cmp.CmpCertificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent.NewWithNew"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent.NewWithOld"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent.OldWithNew"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RootCaKeyUpdateContent.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.Attribute"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attribute.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Attribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attribute.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Attribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.Attribute.AttrType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.Attribute.AttrValues"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attribute.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attribute.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attribute.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.Attributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attributes.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Attributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attributes.GetAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attributes.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attributes.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attributes.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.AttributeTable"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AttributeTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.#ctor(Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AttributeTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.#ctor(Org.BouncyCastle.Asn1.Cms.Attributes)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AttributeTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.#ctor(System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Object})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AttributeTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.Add(Org.BouncyCastle.Asn1.Cms.Attribute[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.Add(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AttributeTable.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.GetAll(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AttributeTable.Item(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Return the first attribute matching the given OBJECT IDENTIFIER</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.Remove(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.ToAsn1EncodableVector"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.ToAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AttributeTable.ToDictionary"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.AuthenticatedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Cms.ContentInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AuthenticatedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.AuthAttrs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.CalculateVersion(Org.BouncyCastle.Asn1.Cms.OriginatorInfo)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.DigestAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.EncapsulatedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.Mac"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.MacAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.OriginatorInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.RecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.UnauthAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.#ctor(Org.BouncyCastle.Asn1.Asn1SequenceParser)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetAuthAttrs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetDigestAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetEnapsulatedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetMac"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetMacAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetOriginatorInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetRecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.GetUnauthAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthenticatedDataParser.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.AuthAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.AuthEncryptedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.Mac"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.OriginatorInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.RecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.UnauthAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.#ctor(Org.BouncyCastle.Asn1.Asn1SequenceParser)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.GetAuthAttrs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.GetAuthEncryptedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.GetMac"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.GetOriginatorInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.GetRecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.GetUnauthAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.CcmParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CcmParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.CcmParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CcmParameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CcmParameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CcmParameters.GetNonce"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CcmParameters.IcvLen"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CcmParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Int32,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.DigestAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.Mac"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.MacAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.Signature"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.SignatureAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CmsAlgorithmProtection.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.CmsAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CmsAttributes.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.CmsAttributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAttributes.CmsAlgorithmProtect"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAttributes.ContentHint"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAttributes.ContentType"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAttributes.CounterSignature"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAttributes.MessageDigest"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsAttributes.SigningTime"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.AuthenticatedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.AuthEnvelopedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.CompressedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.Data"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.DigestedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.EncryptedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.EnvelopedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_alg"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ecdsa_with_shake128"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ecdsa_with_shake256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ori"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ori_kem"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ri"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ri_ocsp_response"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ri_scvp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_RSASSA_PSS_SHAKE128"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_RSASSA_PSS_SHAKE256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.SignedAndEnvelopedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.SignedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.TimestampedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.ZlibCompress"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.CompressedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedData.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.CompressedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedData.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.CompressedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CompressedData.CompressionAlgorithmIdentifier"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CompressedData.EncapContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedData.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CompressedData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.CompressedDataParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedDataParser.#ctor(Org.BouncyCastle.Asn1.Asn1SequenceParser)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.CompressedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CompressedDataParser.CompressionAlgorithmIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedDataParser.GetEncapContentInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.CompressedDataParser.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.ContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ContentInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.ContentInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.ContentInfo.Content"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.ContentInfo.ContentType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ContentInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ContentInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ContentInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.ContentInfoParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ContentInfoParser.#ctor(Org.BouncyCastle.Asn1.Asn1SequenceParser)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.ContentInfoParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.ContentInfoParser.ContentType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ContentInfoParser.GetContent(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.ContentEncryptionAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.ContentType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.EncryptedContent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser.#ctor(Org.BouncyCastle.Asn1.Asn1SequenceParser)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser.ContentEncryptionAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser.ContentType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser.GetEncryptedContent(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.EncryptedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedData.#ctor(Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EncryptedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedData.#ctor(Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EncryptedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedData.EncryptedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedData.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedData.UnprotectedAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EncryptedData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.EnvelopedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EnvelopedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo,Org.BouncyCastle.Asn1.Cms.Attributes)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EnvelopedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.CalculateVersion(Org.BouncyCastle.Asn1.Cms.OriginatorInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1Set)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EnvelopedData.EncryptedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EnvelopedData.OriginatorInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EnvelopedData.RecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EnvelopedData.UnprotectedAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EnvelopedData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser.#ctor(Org.BouncyCastle.Asn1.Asn1SequenceParser)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser.GetEncryptedContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser.GetOriginatorInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser.GetRecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser.GetUnprotectedAttrs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.EnvelopedDataParser.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.Evidence"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Evidence.#ctor(Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Evidence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Evidence.#ctor(Org.BouncyCastle.Asn1.Tsp.EvidenceRecord)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Evidence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.Evidence.ErsEvidence"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Evidence.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Evidence.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Evidence.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.Evidence.TstEvidence"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.GcmParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.GcmParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.GcmParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.GcmParameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.GcmParameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.GcmParameters.GetNonce"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.GcmParameters.IcvLen"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.GcmParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.Name"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.SerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.KekIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KekIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekIdentifier.#ctor(System.Byte[],Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KekIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KekIdentifier.Date"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KekIdentifier.KeyIdentifier"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KekIdentifier.Other"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KekRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.KekIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KekRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.EncryptedKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.KekID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.KeyEncryptionAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.#ctor(Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.#ctor(Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.IssuerAndSerialNumber"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.RKeyID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.KeyEncryptionAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.Originator"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.RecipientEncryptedKeys"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.UserKeyingMaterial"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.RecipientIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.EncryptedKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.KeyEncryptionAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.RecipientIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.MetaData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.MetaData.#ctor(Org.BouncyCastle.Asn1.DerBoolean,Org.BouncyCastle.Asn1.DerUtf8String,Org.BouncyCastle.Asn1.DerIA5String,Org.BouncyCastle.Asn1.Cms.Attributes)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.MetaData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.MetaData.FileName"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.MetaData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.MetaData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.MetaData.IsHashProtected"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.MetaData.MediaType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.MetaData.OtherMetaData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.MetaData.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.#ctor(Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.#ctor(Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.ID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.IssuerAndSerialNumber"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.OriginatorPublicKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.SubjectKeyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.OriginatorInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OriginatorInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OriginatorInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.Certificates"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.Crls"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.PublicKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.KeyAttr"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.KeyAttrId"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.OriType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.OriValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.Info"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.InfoFormat"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.EncryptedKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.KeyDerivationAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.KeyEncryptionAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.#ctor(Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.EncryptedKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.Identifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.#ctor(Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.ID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.IsTagged"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.RecipientInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.KekRecipientInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.#ctor(Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientInfo.Info"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientInfo.IsTagged"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.#ctor(System.Byte[],Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.Date"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.OtherKeyAttribute"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.SubjectKeyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.ScvpReqRes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ScvpReqRes.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.ScvpReqRes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ScvpReqRes.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo,Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.ScvpReqRes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ScvpReqRes.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ScvpReqRes.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.ScvpReqRes.Request"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.ScvpReqRes.Response"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ScvpReqRes.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.SignedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedData.#ctor(Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Cms.ContentInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.SignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignedData.Certificates"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignedData.CRLs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignedData.DigestAlgorithms"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignedData.EncapContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignedData.SignerInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignedData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.SignedDataParser"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedDataParser.#ctor(Org.BouncyCastle.Asn1.Asn1SequenceParser)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.SignedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedDataParser.GetCertificates"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedDataParser.GetCrls"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedDataParser.GetDigestAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedDataParser.GetEncapContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedDataParser.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedDataParser.GetSignerInfos"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignedDataParser.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.SignerIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.SignerIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.SignerIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.#ctor(Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.SignerIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.ID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.IsTagged"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.SignerInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerInfo.#ctor(Org.BouncyCastle.Asn1.Cms.SignerIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.SignerInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerInfo.#ctor(Org.BouncyCastle.Asn1.Cms.SignerIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Cms.Attributes,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Cms.Attributes)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.SignerInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerInfo.AuthenticatedAttributes"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerInfo.DigestAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerInfo.DigestEncryptionAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerInfo.EncryptedDigest"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerInfo.SignerID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerInfo.UnauthenticatedAttributes"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.SignerInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.Time"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.#ctor(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.#ctor(Org.BouncyCastle.Asn1.Asn1UtcTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.#ctor(System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.Time.Date"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.ToDateTime"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl.Crl"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl.TimeStampToken"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.TimeStampedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampedData.#ctor(Org.BouncyCastle.Asn1.DerIA5String,Org.BouncyCastle.Asn1.Cms.MetaData,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Cms.Evidence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.TimeStampedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampedData.Content"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampedData.DataUri"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampedData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampedData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampedData.MetaData"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampedData.TemporalEvidence"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampedData.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.TimeStampedDataParser"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampedDataParser.Content"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampedDataParser.DataUri"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampedDataParser.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampedDataParser.GetTemporalEvidence"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.TimeStampedDataParser.MetaData"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.#ctor(Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.#ctor(Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.ToTimeStampAndCrlArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.AddedUkm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.EphemeralPublicKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.#ctor(System.String,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.Type"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.CertId"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertId.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertId.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertId.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertId.SerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertId.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.CertReqMessages"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMessages.#ctor(Org.BouncyCastle.Asn1.Crmf.CertReqMsg[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.CertReqMessages</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMessages.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMessages.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMessages.ToCertReqMsgArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.CertReqMsg"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.#ctor(Org.BouncyCastle.Asn1.Crmf.CertRequest,Org.BouncyCastle.Asn1.Crmf.ProofOfPossession,Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.CertReqMsg</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.CertReq"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.GetRegInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.Pop"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.Popo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.CertRequest"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertRequest.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Crmf.CertTemplate,Org.BouncyCastle.Asn1.Crmf.Controls)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.CertRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertRequest.#ctor(System.Int32,Org.BouncyCastle.Asn1.Crmf.CertTemplate,Org.BouncyCastle.Asn1.Crmf.Controls)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.CertRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertRequest.CertReqID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertRequest.CertTemplate"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertRequest.Controls"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertRequest.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertRequest.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.CertTemplate"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.Extensions"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplate.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.IssuerUID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.PublicKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.SigningAlg"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.Subject"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.SubjectUID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplate.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.Validity"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.CertTemplate.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.Build"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetIssuer(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetIssuerUID(Org.BouncyCastle.Asn1.DerBitString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetPublicKey(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetSerialNumber(Org.BouncyCastle.Asn1.DerInteger)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetSigningAlg(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetSubject(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetSubjectUID(Org.BouncyCastle.Asn1.DerBitString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetValidity(Org.BouncyCastle.Asn1.Crmf.OptionalValidity)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetVersion(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.Controls"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.Controls.#ctor(Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.Controls</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.Controls.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.Controls.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.Controls.ToAttributeTypeAndValueArray"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_ct_encKeyWithID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_pkip"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_pkix"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_regCtrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_regCtrl_authenticator"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_regCtrl_pkiArchiveOptions"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_regCtrl_pkiPublicationInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.CrmfObjectIdentifiers.id_regCtrl_regToken"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.#ctor(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.EncKeyWithID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.#ctor(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo,Org.BouncyCastle.Asn1.DerUtf8String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.EncKeyWithID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.#ctor(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.EncKeyWithID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.HasIdentifier"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.Identifier"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.IsIdentifierUtf8String"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.PrivateKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.EncryptedKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedKey.#ctor(Org.BouncyCastle.Asn1.Cms.EnvelopedData)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.EncryptedKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedKey.#ctor(Org.BouncyCastle.Asn1.Crmf.EncryptedValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.EncryptedKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedKey.IsEncryptedValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedKey.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedKey.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.EncryptedValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.EncryptedValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.EncSymmKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.EncValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.IntendedAlg"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.KeyAlg"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.SymmAlg"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.ValueHint"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.OptionalValidity"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.OptionalValidity.#ctor(Org.BouncyCastle.Asn1.X509.Time,Org.BouncyCastle.Asn1.X509.Time)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.OptionalValidity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.OptionalValidity.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.OptionalValidity.NotAfter"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.OptionalValidity.NotBefore"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.OptionalValidity.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.#ctor(Org.BouncyCastle.Asn1.Crmf.EncryptedKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.#ctor(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.archiveRemGenPrivKey"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.encryptedPrivKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.keyGenParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.Type"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.#ctor(Org.BouncyCastle.Asn1.Crmf.SinglePubInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.#ctor(Org.BouncyCastle.Asn1.Crmf.SinglePubInfo[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.#ctor(Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.Action"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.DontPublish"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.GetPubInfos"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.PleasePublish"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.PKMacValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PKMacValue.#ctor(Org.BouncyCastle.Asn1.Cmp.PbmParameter,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PKMacValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PKMacValue.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PKMacValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PKMacValue.AlgID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PKMacValue.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PKMacValue.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PKMacValue.MacValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PKMacValue.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.#ctor(Org.BouncyCastle.Asn1.Crmf.PKMacValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PopoPrivKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.#ctor(Org.BouncyCastle.Asn1.Crmf.SubsequentMessage)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PopoPrivKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.agreeMAC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.dhMAC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.encryptedKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.subsequentMessage"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.thisMessage"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.Type"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.#ctor(Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PopoSigningKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.AlgorithmIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.PoposkInput"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.Signature"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.#ctor(Org.BouncyCastle.Asn1.Crmf.PKMacValue,Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.PublicKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.PublicKeyMac"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.Sender"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.ProofOfPossession</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(Org.BouncyCastle.Asn1.Crmf.PopoSigningKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.ProofOfPossession</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(System.Int32,Org.BouncyCastle.Asn1.Crmf.PopoPrivKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Crmf.ProofOfPossession</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.Type"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.TYPE_KEY_AGREEMENT"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.TYPE_KEY_ENCIPHERMENT"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.TYPE_RA_VERIFIED"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.TYPE_SIGNING_KEY"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.SinglePubInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.SinglePubInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.SinglePubInfo.PubLocation"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.SinglePubInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Crmf.SubsequentMessage"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.SubsequentMessage.challengeResp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Crmf.SubsequentMessage.encrCert"></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.SubsequentMessage.ValueOf(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GOST_id"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostElSgDH3410Default"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostElSgDH3410x1"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostID"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR28147Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR28147Gcfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001CryptoProA"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001CryptoProB"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001CryptoProC"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001CryptoProESDH"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001CryptoProXchA"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001CryptoProXchB"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x2001DH"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94CryptoProA"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94CryptoProB"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94CryptoProC"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94CryptoProD"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94CryptoProXchA"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94CryptoProXchB"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3410x94CryptoProXchC"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3411"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3411Hmac"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3411x94CryptoProParamSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3411x94WithGostR3410x2001"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.GostR3411x94WithGostR3410x94"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.ID_Gost28147_89_CryptoPro_A_ParamSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.ID_Gost28147_89_CryptoPro_B_ParamSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.ID_Gost28147_89_CryptoPro_C_ParamSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.ID_Gost28147_89_CryptoPro_D_ParamSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.id_Gost28147_89_CryptoPro_KeyWrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.ID_Gost28147_89_CryptoPro_TestParamSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers.id_Gost28147_89_None_KeyWrap"></member>
    <member name="T:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves">
      <summary>Elliptic curve registry for GOST 3410-2001 / 2012.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.A"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.P"></member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.Q"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.ECGost3410ParamSetParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.CryptoPro.Gost28147Parameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost28147Parameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost28147Parameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost28147Parameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters">
      <summary>Registry of available named parameters for GOST 3410-94.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters" /> for the parameter set with the given name.
            </summary>
      <param name="name">The name of the parameter set.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters" /> for the parameter set with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the parameter set.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the parameter set with the given name.
            </summary>
      <param name="name">The name of the parameter set.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.Names">
      <summary>Enumerate the available parameter set names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.#ctor(System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.A"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.KeySize"></member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.P"></member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.Q"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.DigestParamSet"></member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.EncryptionParamSet"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.PublicKeyParamSet"></member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.bsi_de"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_CA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_CA_DH"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_CA_DH_3DES_CBC_CBC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_CA_ECDH"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_CA_ECDH_3DES_CBC_CBC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_PK"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_PK_DH"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_PK_ECDH"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_ECDSA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_ECDSA_SHA_1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_ECDSA_SHA_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_ECDSA_SHA_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_ECDSA_SHA_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_ECDSA_SHA_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_RSA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_RSA_PSS_SHA_1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_RSA_PSS_SHA_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_RSA_v1_5_SHA_1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Eac.EacObjectIdentifiers.id_TA_RSA_v1_5_SHA_256"></member>
    <member name="T:Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers.id_Ed25519"></member>
    <member name="F:Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers.id_Ed448"></member>
    <member name="F:Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers.id_edwards_curve_algs"></member>
    <member name="F:Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers.id_X25519"></member>
    <member name="F:Org.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers.id_X448"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CertificateValues">
      <remarks>
            RFC 3126: 4.3.1 Certificate Values Attribute Definition
            <code>
            CertificateValues ::= SEQUENCE OF Certificate
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CertificateValues.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CertificateValues</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CertificateValues.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.X509.X509CertificateStructure})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CertificateValues</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CertificateValues.GetCertificates"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CertificateValues.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CertificateValues.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CertificateValues.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier.ProofOfApproval"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier.ProofOfCreation"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier.ProofOfDelivery"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier.ProofOfOrigin"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier.ProofOfReceipt"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIdentifier.ProofOfSender"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.CommitmentTypeID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.CommitmentTypeQualifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.CommitmentTypeIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.Qualifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs">
      <remarks>
            RFC 3126: 4.2.1 Complete Certificate Refs Attribute Definition
            <code>
            CompleteCertificateRefs ::= SEQUENCE OF OtherCertID
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs.#ctor(Org.BouncyCastle.Asn1.Esf.OtherCertID[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Esf.OtherCertID})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs.GetOtherCertIDs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteCertificateRefs.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CompleteRevocationRefs ::= SEQUENCE OF CrlOcspRef
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs.#ctor(Org.BouncyCastle.Asn1.Esf.CrlOcspRef[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Esf.CrlOcspRef})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs.GetCrlOcspRefs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CompleteRevocationRefs.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CrlIdentifier">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlIdentifier ::= SEQUENCE 
            {
            	crlissuer		Name,
            	crlIssuedTime	UTCTime,
            	crlNumber		INTEGER OPTIONAL
            }
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Asn1.Asn1UtcTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Asn1.Asn1UtcTime,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,System.DateTime,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.CrlIssuedTime"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.CrlIssuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.CrlNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CrlListID">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CRLListID ::= SEQUENCE 
            {
            	crls	SEQUENCE OF CrlValidatedID
            }
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlListID.#ctor(Org.BouncyCastle.Asn1.Esf.CrlValidatedID[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlListID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlListID.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Esf.CrlValidatedID})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlListID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlListID.GetCrls"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlListID.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlListID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CrlOcspRef">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlOcspRef ::= SEQUENCE {
            	crlids		[0] CRLListID		OPTIONAL,
            	ocspids		[1] OcspListID		OPTIONAL,
            	otherRev	[2] OtherRevRefs	OPTIONAL
            }
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlOcspRef.#ctor(Org.BouncyCastle.Asn1.Esf.CrlListID,Org.BouncyCastle.Asn1.Esf.OcspListID,Org.BouncyCastle.Asn1.Esf.OtherRevRefs)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlOcspRef</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlOcspRef.CrlIDs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlOcspRef.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlOcspRef.OcspIDs"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlOcspRef.OtherRev"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlOcspRef.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.CrlValidatedID">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlValidatedID ::= SEQUENCE {
            	crlHash			OtherHash,
            	crlIdentifier	CrlIdentifier OPTIONAL}
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlValidatedID.#ctor(Org.BouncyCastle.Asn1.Esf.OtherHash)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlValidatedID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlValidatedID.#ctor(Org.BouncyCastle.Asn1.Esf.OtherHash,Org.BouncyCastle.Asn1.Esf.CrlIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.CrlValidatedID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlValidatedID.CrlHash"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.CrlValidatedID.CrlIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlValidatedID.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CrlValidatedID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.EsfAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.EsfAttributes.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.EsfAttributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.ArchiveTimestamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.ArchiveTimestampV2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.CertCrlTimestamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.CertificateRefs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.CertValues"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.CommitmentType"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.ContentTimestamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.EscTimeStamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.OtherSigCert"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.RevocationRefs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.RevocationValues"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.SignerAttr"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.SignerLocation"></member>
    <member name="F:Org.BouncyCastle.Asn1.Esf.EsfAttributes.SigPolicyId"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OcspIdentifier">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspIdentifier ::= SEQUENCE {
            	ocspResponderID		ResponderID,
            		-- As in OCSP response data
            	producedAt			GeneralizedTime
            		-- As in OCSP response data
            }
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspIdentifier.#ctor(Org.BouncyCastle.Asn1.Ocsp.ResponderID,Org.BouncyCastle.Asn1.Asn1GeneralizedTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OcspIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspIdentifier.#ctor(Org.BouncyCastle.Asn1.Ocsp.ResponderID,System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OcspIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OcspIdentifier.OcspResponderID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OcspIdentifier.ProducedAt"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OcspListID">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspListID ::=  SEQUENCE {
            	ocspResponses	SEQUENCE OF OcspResponsesID
            }
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspListID.#ctor(Org.BouncyCastle.Asn1.Esf.OcspResponsesID[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OcspListID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspListID.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Esf.OcspResponsesID})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OcspListID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspListID.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspListID.GetOcspResponses"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspListID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OcspResponsesID">
      <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspResponsesID ::= SEQUENCE {
            	ocspIdentifier	OcspIdentifier,
            	ocspRepHash		OtherHash OPTIONAL
            }
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspResponsesID.#ctor(Org.BouncyCastle.Asn1.Esf.OcspIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OcspResponsesID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspResponsesID.#ctor(Org.BouncyCastle.Asn1.Esf.OcspIdentifier,Org.BouncyCastle.Asn1.Esf.OtherHash)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OcspResponsesID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspResponsesID.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OcspResponsesID.OcspIdentifier"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OcspResponsesID.OcspRepHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OcspResponsesID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OtherCertID">
      <remarks>
        <code>
            OtherCertID ::= SEQUENCE {
            	otherCertHash	OtherHash,
            	issuerSerial	IssuerSerial OPTIONAL
            }
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherCertID.#ctor(Org.BouncyCastle.Asn1.Esf.OtherHash)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherCertID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherCertID.#ctor(Org.BouncyCastle.Asn1.Esf.OtherHash,Org.BouncyCastle.Asn1.X509.IssuerSerial)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherCertID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherCertID.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherCertID.IssuerSerial"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherCertID.OtherCertHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherCertID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OtherHash">
      <remarks>
        <code>
            OtherHash ::= CHOICE {
            	sha1Hash	OtherHashValue, -- This contains a SHA-1 hash
            	otherHash	OtherHashAlgAndValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHash.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHash.#ctor(Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHash.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHash.GetHashValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHash.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherHash.HashAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHash.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue">
      <summary>
            Summary description for OtherHashAlgAndValue.
            </summary>
      <remarks>
        <code>
            OtherHashAlgAndValue ::= SEQUENCE {
            	hashAlgorithm	AlgorithmIdentifier,
            	hashValue		OtherHashValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue.GetHashValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue.HashAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OtherRevRefs">
      <remarks>
             RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
             <code>
             OtherRevRefs ::= SEQUENCE 
             {
            		otherRevRefType      OtherRevRefType,
            		otherRevRefs         ANY DEFINED BY otherRevRefType
             }
            
             OtherRevRefType ::= OBJECT IDENTIFIER
             </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherRevRefs.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherRevRefs</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherRevRefs.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherRevRefs.OtherRevRefsObject"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherRevRefs.OtherRevRefType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherRevRefs.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OtherRevVals">
      <remarks>
             RFC 3126: 4.3.2 Revocation Values Attribute Definition
             <code>
             OtherRevVals ::= SEQUENCE 
             {
            		otherRevValType      OtherRevValType,
            		otherRevVals         ANY DEFINED BY otherRevValType
             }
            
             OtherRevValType ::= OBJECT IDENTIFIER
             </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherRevVals.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherRevVals</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherRevVals.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherRevVals.OtherRevValsObject"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.OtherRevVals.OtherRevValType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherRevVals.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate">
      <remarks>
        <code>
            OtherSigningCertificate ::= SEQUENCE {
            	certs		SEQUENCE OF OtherCertID,
            	policies	SEQUENCE OF PolicyInformation OPTIONAL
            }
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.#ctor(Org.BouncyCastle.Asn1.Esf.OtherCertID[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.#ctor(Org.BouncyCastle.Asn1.Esf.OtherCertID[],Org.BouncyCastle.Asn1.X509.PolicyInformation[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Esf.OtherCertID})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Esf.OtherCertID},System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.X509.PolicyInformation})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.GetCerts"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.GetPolicies"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.OtherSigningCertificate.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.RevocationValues">
      <remarks>
            RFC 5126: 6.3.4.  revocation-values Attribute Definition
            <code>
            RevocationValues ::=  SEQUENCE {
            	crlVals			[0] SEQUENCE OF CertificateList     OPTIONAL,
            	ocspVals		[1] SEQUENCE OF BasicOCSPResponse   OPTIONAL,
            	otherRevVals	[2] OtherRevVals OPTIONAL
            }
            </code></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.RevocationValues.#ctor(Org.BouncyCastle.Asn1.X509.CertificateList[],Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse[],Org.BouncyCastle.Asn1.Esf.OtherRevVals)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.RevocationValues</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.RevocationValues.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.X509.CertificateList},System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse},Org.BouncyCastle.Asn1.Esf.OtherRevVals)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.RevocationValues</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.RevocationValues.GetCrlVals"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.RevocationValues.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.RevocationValues.GetOcspVals"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.RevocationValues.OtherRevVals"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.RevocationValues.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId">
      <remarks>
        <code>
            SignaturePolicyId ::= SEQUENCE {
            	sigPolicyIdentifier		SigPolicyId,
            	sigPolicyHash			SigPolicyHash,
            	sigPolicyQualifiers		SEQUENCE SIZE (1..MAX) OF SigPolicyQualifierInfo OPTIONAL
            }
            
            SigPolicyId ::= OBJECT IDENTIFIER
            
            SigPolicyHash ::= OtherHashAlgAndValue
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignaturePolicyId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue,Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignaturePolicyId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue,System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignaturePolicyId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.GetSigPolicyQualifiers"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.SigPolicyHash"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.SigPolicyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyId.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier">
      <remarks>
        <code>
            SignaturePolicyIdentifier ::= CHOICE {
            	SignaturePolicyId		SignaturePolicyId,
            	SignaturePolicyImplied	SignaturePolicyImplied
            }
            
            SignaturePolicyImplied ::= NULL
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier.#ctor(Org.BouncyCastle.Asn1.Esf.SignaturePolicyId)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier.SignaturePolicyId"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.SignerAttribute"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerAttribute.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignerAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerAttribute.#ctor(Org.BouncyCastle.Asn1.X509.AttributeCertificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignerAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignerAttribute.CertifiedAttributes"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignerAttribute.ClaimedAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerAttribute.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerAttribute.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.SignerLocation"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerLocation.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignerLocation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerLocation.#ctor(Org.BouncyCastle.Asn1.DerUtf8String,Org.BouncyCastle.Asn1.DerUtf8String,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignerLocation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerLocation.#ctor(Org.BouncyCastle.Asn1.X500.DirectoryString,Org.BouncyCastle.Asn1.X500.DirectoryString,Org.BouncyCastle.Asn1.X500.DirectoryString[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SignerLocation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignerLocation.Country"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerLocation.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerLocation.GetPostal"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignerLocation.Locality"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SignerLocation.PostalAddress"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerLocation.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo">
      <remarks>
        <code>
            SigPolicyQualifierInfo ::= SEQUENCE {
            	sigPolicyQualifierId  SigPolicyQualifierId,
            	sigQualifier          ANY DEFINED BY sigPolicyQualifierId
            }
            
            SigPolicyQualifierId ::= OBJECT IDENTIFIER
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo.SigPolicyQualifierId"></member>
    <member name="P:Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo.SigQualifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ess.ContentHints"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentHints.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.ContentHints</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentHints.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerUtf8String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.ContentHints</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Ess.ContentHints.ContentDescription"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ess.ContentHints.ContentType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentHints.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentHints.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ess.ContentIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.ContentIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentIdentifier.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.ContentIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentIdentifier.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentIdentifier.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ess.ContentIdentifier.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ess.EssCertID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertID.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.EssCertID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertID.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.EssCertID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertID.#ctor(System.Byte[],Org.BouncyCastle.Asn1.X509.IssuerSerial)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.EssCertID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertID.GetCertHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertID.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ess.EssCertID.IssuerSerial"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ess.EssCertIDv2"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.EssCertIDv2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[],Org.BouncyCastle.Asn1.X509.IssuerSerial)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.EssCertIDv2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.EssCertIDv2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.#ctor(System.Byte[],Org.BouncyCastle.Asn1.X509.IssuerSerial)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.EssCertIDv2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.GetCertHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.IssuerSerial"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ess.SigningCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificate.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.SigningCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificate.#ctor(Org.BouncyCastle.Asn1.Ess.EssCertID)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.SigningCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificate.GetCerts"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificate.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificate.GetPolicies"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificate.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.#ctor(Org.BouncyCastle.Asn1.Ess.EssCertIDv2)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.SigningCertificateV2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.#ctor(Org.BouncyCastle.Asn1.Ess.EssCertIDv2[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.SigningCertificateV2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.#ctor(Org.BouncyCastle.Asn1.Ess.EssCertIDv2[],Org.BouncyCastle.Asn1.X509.PolicyInformation[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ess.SigningCertificateV2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.GetCerts"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.GetPolicies"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.GM.GMNamedCurves">
      <summary>Elliptic curve registry for GM.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.GM.GMNamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.GM.GMNamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.GM.GMNamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.GM.GMNamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.GM.GMNamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.GM.GMNamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.GM.GMNamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.hmac_sm3"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.id_sm9PublicKey"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm1_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm1_cfb1"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm1_cfb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm1_cfb8"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm1_ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm1_ofb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_recommendedParameters"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_specifiedParameters"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_blake2b512"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_blake2s256"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_md5"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_rmd160"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_sha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_sha224"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_sha256"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_sha384"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_sha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_sm3"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2encrypt_with_whirlpool"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2exchange"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2p256v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_blake2b512"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_blake2s256"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_rmd160"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_sha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_sha224"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_sha256"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_sha384"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_sha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_sm3"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm2sign_with_whirlpool"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm3"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm5"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm6_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm6_cfb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm6_ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm6_ofb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm9encrypt"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm9keyagreement"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sm9sign"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_ccm"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_cfb1"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_cfb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_cfb8"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_ctr"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_gcm"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_ocb"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_ofb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_wrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_wrap_pad"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.sms4_xts"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.ssf33_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.ssf33_cfb1"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.ssf33_cfb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.ssf33_cfb8"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.ssf33_ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.ssf33_ofb128"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.wapi192v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.wapi192v1_parameters"></member>
    <member name="F:Org.BouncyCastle.Asn1.GM.GMObjectIdentifiers.wapip192v1"></member>
    <member name="T:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Crc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Crc32"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.DigestAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Ed25519"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.EllipticCurve"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.EncryptionAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Gnu"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.GnuPG"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.GnuRadar"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Notation"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.PkaAddress"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent128Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent128Cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent128Ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent128Ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent192Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent192Cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent192Ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent192Ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent256Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent256Cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent256Ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Serpent256Ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Gnu.GnuObjectIdentifiers.Tiger192"></member>
    <member name="T:Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers.HmacMD5"></member>
    <member name="F:Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers.HmacRipeMD160"></member>
    <member name="F:Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers.HmacSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers.HmacTiger"></member>
    <member name="F:Org.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers.IsakmpOakley"></member>
    <member name="T:Org.BouncyCastle.Asn1.Icao.CscaMasterList"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.CscaMasterList.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Icao.CscaMasterList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.CscaMasterList.GetCertStructs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.CscaMasterList.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.CscaMasterList.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Icao.CscaMasterList.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Icao.DataGroupHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.DataGroupHash.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Icao.DataGroupHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Icao.DataGroupHash.DataGroupHashValue"></member>
    <member name="P:Org.BouncyCastle.Asn1.Icao.DataGroupHash.DataGroupNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.DataGroupHash.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.DataGroupHash.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcao"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoAAProtocolObject"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoCscaMasterList"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoCscaMasterListSigningKey"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoDocumentTypeList"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoExtensions"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoExtensionsNamechangekeyrollover"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoLdsSecurityObject"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoMrtd"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.IcaoObjectIdentifiers.IdIcaoMrtdSecurity"></member>
    <member name="T:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Icao.DataGroupHash[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Icao.LdsSecurityObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Icao.DataGroupHash[],Org.BouncyCastle.Asn1.Icao.LdsVersionInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Icao.LdsSecurityObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.DigestAlgorithmIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.GetDatagroupHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.ToAsn1Object"></member>
    <member name="F:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.UBDataGroups"></member>
    <member name="P:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.Version"></member>
    <member name="P:Org.BouncyCastle.Asn1.Icao.LdsSecurityObject.VersionInfo"></member>
    <member name="T:Org.BouncyCastle.Asn1.Icao.LdsVersionInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsVersionInfo.#ctor(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Icao.LdsVersionInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsVersionInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsVersionInfo.GetLdsVersion"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsVersionInfo.GetUnicodeVersion"></member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsVersionInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Isara.IsaraObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.Isara.IsaraObjectIdentifiers.id_alg_xmss"></member>
    <member name="F:Org.BouncyCastle.Asn1.Isara.IsaraObjectIdentifiers.id_alg_xmssmt"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMtt"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttAT"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdditionalInformation"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdmission"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertHash"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertInDirSince"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDateOfCertGen"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDeclarationOfMajority"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATIccsn"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATLiabilityLimitationFlag"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATMonetaryLimit"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNameAtBirth"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNamingAuthorities"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATPKReference"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATProcuration"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRequestedCertificate"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRestriction"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRetrieveIfAllowed"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttCP"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttCPAccredited"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.CertificateHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.HashAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.#ctor(Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.Choice,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.GetCertificateBytes"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.Type"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.Choice"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.Information"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority,Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions.AdmissionAuthority"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions.GetProfessionInfos"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions.NamingAuthority"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.AdmissionAuthority"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.GetContentsOfAdmissions"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.#ctor(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.#ctor(System.Boolean,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.DateOfBirth"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.FullAgeAtCountry"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.NotYoungerThan"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.Type"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.Choice"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.Amount"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.Currency"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.Exponent"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.String,Org.BouncyCastle.Asn1.X500.DirectoryString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.IdIsisMttATNamingAuthoritiesRechtWirtschaftSteuern"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityID"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityText"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityUrl"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,Org.BouncyCastle.Asn1.X500.DirectoryString,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,Org.BouncyCastle.Asn1.X500.DirectoryString,Org.BouncyCastle.Asn1.X509.IssuerSerial)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.CertRef"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.Country"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.ThirdPerson"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.TypeOfSubstitution"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority,Org.BouncyCastle.Asn1.X500.DirectoryString[],Org.BouncyCastle.Asn1.DerObjectIdentifier[],System.String,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.AddProfessionInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionItems"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionOids"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.NamingAuthority"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notar"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalter"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalterin"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarin"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreter"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreterin"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwalt"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwltin"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwalt"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwltin"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsbeistand"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.RegistrationNumber"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberater"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberaterin"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigte"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigter"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.ToAsn1Object"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigteBuchprferin"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigterBuchprfer"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprfer"></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprferin"></member>
    <member name="T:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction.RestrictionString"></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Kisa.KisaObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Kisa.KisaObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Kisa.KisaObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Kisa.KisaObjectIdentifiers.IdNpkiAppCmsSeedWrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Kisa.KisaObjectIdentifiers.IdSeedCbc"></member>
    <member name="T:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.Microsoft"></member>
    <member name="F:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.MicrosoftAppPolicies"></member>
    <member name="F:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.MicrosoftCAVersion"></member>
    <member name="F:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.MicrosoftCertTemplateV1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.MicrosoftCertTemplateV2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.MicrosoftCrlNextPublish"></member>
    <member name="F:Org.BouncyCastle.Asn1.Microsoft.MicrosoftObjectIdentifiers.MicrosoftPrevCACertHash"></member>
    <member name="T:Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters.GetIV"></member>
    <member name="P:Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters.KeyLength"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Misc.IdeaCbcPar"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.IdeaCbcPar.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Misc.IdeaCbcPar</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.IdeaCbcPar.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.IdeaCbcPar.GetIV"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.IdeaCbcPar.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.as_sys_sec_alg_ideaCBC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.blake2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.blake3"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.blake3_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.cast5CBC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.cryptlib"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.cryptlib_algorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.cryptlib_algorithm_blowfish_CBC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.cryptlib_algorithm_blowfish_CFB"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.cryptlib_algorithm_blowfish_ECB"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.cryptlib_algorithm_blowfish_OFB"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.Entrust"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.EntrustVersionExtension"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.HMAC_SHA1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_alg_composite"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2b160"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2b256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2b384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2b512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2s128"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2s160"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2s224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_blake2s256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_composite_key"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_oracle_pkcs12_trusted_key_usage"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.id_scrypt"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.Netscape"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeBaseUrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeCAPolicyUrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeCARevocationUrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeCertComment"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeCertType"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeRenewalUrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeRevocationUrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NetscapeSslServerName"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.Novell"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.NovellSecurityAttribs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.Verisign"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.VerisignBitString_6_13"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.VerisignCzagExtension"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.VerisignDnbDunsNumber"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.VerisignIssStrongCrypto"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.VerisignOnSiteJurisdictionHash"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers.VerisignPrivate_6_9"></member>
    <member name="T:Org.BouncyCastle.Asn1.Misc.NetscapeCertType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.#ctor(Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Misc.NetscapeCertType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Misc.NetscapeCertType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.ObjectSigning"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.ObjectSigningCA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.Reserved"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.Smime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.SmimeCA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.SslCA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.SslClient"></member>
    <member name="F:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.SslServer"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.NetscapeCertType.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Misc.NetscapeRevocationUrl"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.NetscapeRevocationUrl.#ctor(Org.BouncyCastle.Asn1.DerIA5String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Misc.NetscapeRevocationUrl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.NetscapeRevocationUrl.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Misc.VerisignCzagExtension"></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.VerisignCzagExtension.#ctor(Org.BouncyCastle.Asn1.DerIA5String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Misc.VerisignCzagExtension</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.VerisignCzagExtension.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge"></member>
    <member name="M:Org.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge.Challenge"></member>
    <member name="M:Org.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge.SubjectPublicKeyInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params">
      <summary>
            KMACwithSHAKE128-params ::= SEQUENCE {
                kMACOutputLength     INTEGER DEFAULT 256, -- Output length in bits
                customizationString  OCTET STRING DEFAULT ''H
            } 
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params.CustomizationString"></member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params.OutputLength"></member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake128Params.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params">
      <summary>
            KMACwithSHAKE256-params ::= SEQUENCE {
                kMACOutputLength     INTEGER DEFAULT 512, -- Output length in bits
                customizationString  OCTET STRING DEFAULT ''H
            } 
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params.CustomizationString"></member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params.OutputLength"></member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.KMacWithShake256Params.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Nist.NistNamedCurves">
      <summary>Elliptic curve registry for NIST curves.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.NistNamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.NistNamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of
            the full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.NistNamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.NistNamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of
            the full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.NistNamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Nist.NistNamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Nist.NistNamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.Aes"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.DsaWithSha224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.DsaWithSha256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.DsaWithSha384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.DsaWithSha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.HashAlgs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128Ccm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128Cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128Ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128Gcm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128GMac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128Ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128Wrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes128WrapPad"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192Ccm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192Cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192Ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192Gcm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192GMac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192Ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192Wrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes192WrapPad"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256Ccm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256Cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256Ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256Gcm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256GMac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256Ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256Wrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdAes256WrapPad"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdDsaWithSha3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdEcdsaWithSha3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdHMacWithSha3_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdHMacWithSha3_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdHMacWithSha3_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdHMacWithSha3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdKmacWithShake128"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdKmacWithShake256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdRsassaPkcs1V15WithSha3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha3_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha3_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha3_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha3_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha512_224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdSha512_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdShake128"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdShake128Len"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdShake256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.IdShake256Len"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.NistAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nist.NistObjectIdentifiers.SigAlgs"></member>
    <member name="T:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_algorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_ccm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_cmac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_ctr"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_gcm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_kw"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_kwp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_ocb2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria128_ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_ccm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_cmac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_ctr"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_gcm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_kw"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_kwp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_ocb2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria192_ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_ccm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_cfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_cmac"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_ctr"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_ecb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_gcm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_kw"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_kwp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_ocb2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_aria256_ofb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_pad"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_pad_1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_pad_null"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.id_sea"></member>
    <member name="F:Org.BouncyCastle.Asn1.Nsri.NsriObjectIdentifiers.nsri"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers">
      <summary>From RFC 3657</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers.IdCamellia128Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers.IdCamellia128Wrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers.IdCamellia192Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers.IdCamellia192Wrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers.IdCamellia256Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers.IdCamellia256Wrap"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.#ctor(Org.BouncyCastle.Asn1.Ocsp.ResponseData,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.Certs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.GetSignatureOctets"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.Signature"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.SignatureAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.TbsResponseData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.CertID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertID.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.CertID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertID.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertID.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CertID.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CertID.IssuerKeyHash"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CertID.IssuerNameHash"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CertID.SerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.CertStatus"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.#ctor(Org.BouncyCastle.Asn1.Asn1TaggedObject)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.#ctor(Org.BouncyCastle.Asn1.Ocsp.RevokedInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CertStatus.Status"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CertStatus.TagNo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.CrlID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CrlID.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.CrlID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CrlID.CrlNum"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CrlID.CrlTime"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.CrlID.CrlUrl"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CrlID.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CrlID.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CrlID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcsp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcspArchiveCutoff"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcspBasic"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcspCrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcspNocheck"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcspNonce"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcspResponse"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers.PkixOcspServiceLocator"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.OcspRequest"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspRequest.#ctor(Org.BouncyCastle.Asn1.Ocsp.TbsRequest,Org.BouncyCastle.Asn1.Ocsp.Signature)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.OcspRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspRequest.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspRequest.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.OcspRequest.OptionalSignature"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.OcspRequest.TbsRequest"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspRequest.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.OcspResponse"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponse.#ctor(Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus,Org.BouncyCastle.Asn1.Ocsp.ResponseBytes)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.OcspResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponse.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponse.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.OcspResponse.ResponseBytes"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.OcspResponse.ResponseStatus"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponse.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.#ctor(Org.BouncyCastle.Asn1.DerEnumerated)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.InternalError"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.MalformedRequest"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.SignatureRequired"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.Successful"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.TryLater"></member>
    <member name="F:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.Unauthorized"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.Request"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Request.#ctor(Org.BouncyCastle.Asn1.Ocsp.CertID,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.Request</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Request.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Request.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.Request.ReqCert"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.Request.SingleRequestExtensions"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Request.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.ResponderID"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponderID.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.ResponderID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponderID.#ctor(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.ResponderID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponderID.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponderID.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponderID.GetKeyHash"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponderID.Name"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponderID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.ResponseBytes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes.Response"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes.ResponseType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.ResponseData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseData.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Ocsp.ResponderID,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Asn1Sequence,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.ResponseData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseData.#ctor(Org.BouncyCastle.Asn1.Ocsp.ResponderID,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Asn1Sequence,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.ResponseData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseData.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponseData.ProducedAt"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponseData.ResponderID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponseData.ResponseExtensions"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponseData.Responses"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ResponseData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.#ctor(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.RevokedInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.#ctor(Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.X509.CrlReason)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.RevokedInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.RevocationReason"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.RevocationTime"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.#ctor(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.ServiceLocator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.ServiceLocator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.Locator"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.Signature"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Signature.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.Signature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Signature.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.Signature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.Signature.Certs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Signature.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Signature.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Signature.GetSignatureOctets"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.Signature.SignatureAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.Signature.SignatureValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Signature.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.SingleResponse"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.SingleResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.#ctor(Org.BouncyCastle.Asn1.Ocsp.CertID,Org.BouncyCastle.Asn1.Ocsp.CertStatus,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.SingleResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.CertId"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.CertStatus"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.NextUpdate"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.SingleExtensions"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.ThisUpdate"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Ocsp.TbsRequest"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.Asn1Sequence,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Ocsp.TbsRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.RequestExtensions"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.RequestList"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.RequestorName"></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Oiw.ElGamalParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.Oiw.ElGamalParameter.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Oiw.ElGamalParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Oiw.ElGamalParameter.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Oiw.ElGamalParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Oiw.ElGamalParameter.G"></member>
    <member name="P:Org.BouncyCastle.Asn1.Oiw.ElGamalParameter.P"></member>
    <member name="M:Org.BouncyCastle.Asn1.Oiw.ElGamalParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.DesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.DesCfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.DesEcb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.DesEde"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.DesOfb"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.DsaWithSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.ElGamalAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.IdSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.MD4WithRsa"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.MD4WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.MD5WithRsa"></member>
    <member name="F:Org.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers.Sha1WithRsa"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.AttributePkcs</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs.AttrType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs.AttrValues"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.AuthenticatedSafe"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AuthenticatedSafe.#ctor(Org.BouncyCastle.Asn1.Pkcs.ContentInfo[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.AuthenticatedSafe</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AuthenticatedSafe.GetContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AuthenticatedSafe.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AuthenticatedSafe.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.CertBag"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertBag.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.CertBag</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertBag.CertID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertBag.CertValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertBag.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertBag.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.CertificationRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.#ctor(Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.CertificationRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.GetCertificationRequestInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.GetSignatureOctets"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.reqInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.sigAlgId"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.sigBits"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.Signature"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.SignatureAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequest.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo.Attributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo.Subject"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo.SubjectPublicKeyInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.ContentInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.ContentInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.ContentInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.ContentInfo.Content"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.ContentInfo.ContentType"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.ContentInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.ContentInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.CrlBag"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CrlBag.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.CrlBag</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CrlBag.CrlID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.CrlBag.CrlValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CrlBag.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.CrlBag.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.DHParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.DHParameter.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.DHParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.DHParameter.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.DHParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.DHParameter.G"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.DHParameter.L"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.DHParameter.P"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.DHParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.EncryptedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptedData.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.EncryptedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.EncryptedData.Content"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.EncryptedData.ContentType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.EncryptedData.EncryptionAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptedData.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptedData.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.EncryptionAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.GetEncryptedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme.Asn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber.CertificateSerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber.Name"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.KeyDerivationFunc"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.KeyDerivationFunc.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.KeyDerivationFunc</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.MacData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.MacData.#ctor(Org.BouncyCastle.Asn1.X509.DigestInfo,System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.MacData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.MacData.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.MacData.GetSalt"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.MacData.IterationCount"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.MacData.Mac"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.MacData.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.PbeParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PbeParameter.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.PbeParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PbeParameter.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PbeParameter.GetSalt"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PbeParameter.IterationCount"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PbeParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.PbeS2Parameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PbeS2Parameters.#ctor(Org.BouncyCastle.Asn1.Pkcs.KeyDerivationFunc,Org.BouncyCastle.Asn1.Pkcs.EncryptionScheme)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.PbeS2Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PbeS2Parameters.EncryptionScheme"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PbeS2Parameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PbeS2Parameters.KeyDerivationFunc"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PbeS2Parameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.#ctor(System.Byte[],System.Int32,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.#ctor(System.Byte[],System.Int32,System.Int32,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.GetSalt"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.IsDefaultPrf"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.IterationCount"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.KeyLength"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.Prf"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pbkdf2Params.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.Pfx"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pfx.#ctor(Org.BouncyCastle.Asn1.Pkcs.ContentInfo,Org.BouncyCastle.Asn1.Pkcs.MacData)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.Pfx</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.Pfx.AuthSafe"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pfx.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.Pfx.MacData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pfx.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams.GetIV"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams.Iterations"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.BagTypes"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.CannotDecryptAny"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.CertBag"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.CertTypes"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.CrlBag"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.CrlTypes"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Data"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.DesEde3Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.DhKeyAgreement"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.DigestAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.DigestedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.EncryptedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.EncryptionAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.EnvelopedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.id_aa_cmsAlgorithmProtect"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAAsymmDecryptKeyID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAACommunityIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAContentHint"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAContentIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAContentReference"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAADecryptKeyID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEncrypKeyPref"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsArchiveTimestamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsCertCrlTimestamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsCertificateRefs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsCertValues"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsCommitmentType"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsContentTimestamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsEscTimeStamp"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsOtherSigCert"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsRevocationRefs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsRevocationValues"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsSignerAttr"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsSignerLocation"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAEtsSigPolicyID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAImplCompressAlgs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAImplCryptoAlgs"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAMsgSigDigest"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAOid"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAReceiptRequest"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAASignatureTimeStampToken"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAASigningCertificate"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAASigningCertificateV2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlg"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgAeadChaCha20Poly1305"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgCms3DesWrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgCmsRC2Wrap"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgEsdh"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgHssLmsHashsig"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgPwriKek"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgSsdh"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAlgZlibCompress"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCT"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCTAuthData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCTAuthEnvelopedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCTCompressedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCti"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCtiEtsProofOfApproval"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCtiEtsProofOfCreation"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCtiEtsProofOfDelivery"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCtiEtsProofOfOrigin"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCtiEtsProofOfReceipt"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCtiEtsProofOfSender"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCTTimestampedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdCTTstInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdHmacWithSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdHmacWithSha224"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdHmacWithSha256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdHmacWithSha384"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdHmacWithSha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdMgf1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdPbeS2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdPbkdf2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdPSpecified"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdRsaesOaep"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdRsaKem"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdRsassaPss"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdSmime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdSpq"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdSpqEtsUNotice"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdSpqEtsUri"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.KeyBag"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.MD2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.MD2WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.MD4"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.MD4WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.MD5"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.MD5WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithMD2AndDesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithMD2AndRC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithMD5AndDesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithMD5AndRC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithSha1AndDesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithSha1AndRC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithShaAnd128BitRC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithShaAnd128BitRC4"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithShaAnd2KeyTripleDesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithShaAnd3KeyTripleDesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbewithShaAnd40BitRC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PbeWithShaAnd40BitRC4"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs12"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs12PbeIds"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs3"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs5"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs7"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs8ShroudedKeyBag"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtChallengePassword"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtContentType"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtCounterSignature"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtEmailAddress"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtExtendedCertificateAttributes"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtExtensionRequest"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtFriendlyName"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtLocalKeyID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtMessageDigest"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtSigningDescription"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtSigningTime"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtSmimeCapabilities"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtUnstructuredAddress"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Pkcs9AtUnstructuredName"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.PreferSignedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.RC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.rc4"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.RsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.SafeContentsBag"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.SdsiCertificate"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.SecretBag"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Sha1WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Sha224WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Sha256WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Sha384WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Sha512_224WithRSAEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Sha512_256WithRSAEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.Sha512WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.SignedAndEnvelopedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.SignedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.SmimeCapabilitiesVersions"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.SrsaOaepEncryptionSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.X509Certificate"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.X509Crl"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Asn1.Asn1Set,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.Attributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.HasPublicKey">
      <summary>Return true if a public key is present, false otherwise.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.ParsePrivateKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.ParsePublicKey">
      <summary>For when the public key is an ASN.1 encoding.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.PrivateKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.PrivateKeyAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.PrivateKeyData"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.PrivateKeyLength"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.PublicKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.PublicKeyData">
      <summary>Return the public key as a raw bit string.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter.GetIV"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter.RC2ParameterVersion"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RC2CbcParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.DefaultHashAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.DefaultMaskGenFunction"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.DefaultPSourceAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.MaskGenAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.PSourceAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.Coefficient"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.Exponent1"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.Exponent2"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.Modulus"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.Prime1"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.Prime2"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.PrivateExponent"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.PublicExponent"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.DefaultHashAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.DefaultMaskGenFunction"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.DefaultSaltLength"></member>
    <member name="F:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.DefaultTrailerField"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.MaskGenAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.SaltLength"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.TrailerField"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.SafeBag"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SafeBag.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.SafeBag</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SafeBag.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Object,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.SafeBag</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SafeBag.BagAttributes"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SafeBag.BagID"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SafeBag.BagValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SafeBag.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SafeBag.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.SignedData"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignedData.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Pkcs.ContentInfo,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.SignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignedData.Certificates"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignedData.ContentInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignedData.Crls"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignedData.DigestAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignedData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignedData.SignerInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignedData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignedData.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Pkcs.SignerInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.SignerInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Pkcs.SignerInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.AuthenticatedAttributes"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.DigestAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.DigestEncryptionAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.EncryptedDigest"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.IssuerAndSerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.UnauthenticatedAttributes"></member>
    <member name="P:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_agreement"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_agreement_gost_3410_12_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_agreement_gost_3410_12_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_28147_param_Z"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256_paramSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256_paramSetA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512_paramSet"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512_paramSetA"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512_paramSetB"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512_paramSetC"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3411_12_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_gost_3411_12_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_hmac_gost_3411_12_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_hmac_gost_3411_12_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_signwithdigest_gost_3410_12_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.id_tc26_signwithdigest_gost_3410_12_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers.rosstandart"></member>
    <member name="T:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure"></member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.#ctor(System.Int32,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.#ctor(System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.#ctor(System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.DerBitString,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.GetKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.GetParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Sec.SecNamedCurves">
      <summary>Elliptic curve registry for the SEC standard.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Sec.SecNamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_cofactorDH_sha224kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_cofactorDH_sha256kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_cofactorDH_sha384kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_cofactorDH_sha512kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_stdDH_sha224kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_stdDH_sha256kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_stdDH_sha384kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.dhSinglePass_stdDH_sha512kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.EllipticCurve"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvFull_sha224kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvFull_sha256kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvFull_sha384kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvFull_sha512kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvSinglePass_sha224kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvSinglePass_sha256kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvSinglePass_sha384kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.mqvSinglePass_sha512kdf_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.secg_scheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP112r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP112r2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP128r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP128r2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP160k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP160r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP160r2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP192k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP192r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP224k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP224r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP256k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP256r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP384r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecP521r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT113r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT113r2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT131r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT131r2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT163k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT163r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT163r2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT193r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT193r2"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT233k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT233r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT239k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT283k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT283r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT409k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT409r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT571k1"></member>
    <member name="F:Org.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.SecT571r1"></member>
    <member name="T:Org.BouncyCastle.Asn1.Smime.SmimeAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeAttributes.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeAttributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeAttributes.EncrypKeyPref"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeAttributes.SmimeCapabilities"></member>
    <member name="T:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeCapabilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.Aes128Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.Aes192Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.Aes256Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.CannotDecryptAny"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.Cast5Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.DesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.DesEde3Cbc"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.GetCapabilitiesForOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.IdeaCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.PreferSignedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.RC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.SmimeCapabilitesVersions"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Smime.SmimeCapabilitiesAttribute"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilitiesAttribute.#ctor(Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeCapabilitiesAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.Smime.SmimeCapability"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapability.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeCapability</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapability.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeCapability</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.CannotDecryptAny"></member>
    <member name="P:Org.BouncyCastle.Asn1.Smime.SmimeCapability.CapabilityID"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.DesCbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.DesEde3Cbc"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapability.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Smime.SmimeCapability.Parameters"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.PreferSignedData"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.RC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.SmimeCapabilitiesVersions"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapability.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector.AddCapability(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector.AddCapability(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector.AddCapability(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilityVector.ToAsn1EncodableVector"></member>
    <member name="T:Org.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute"></member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute.#ctor(Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute.#ctor(Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves">
      <summary>Elliptic curve registry for curves defined in "ECC Brainpool Standard Curves and Curve Generation"
            http://www.ecc-brainpool.org/download/draft_pkix_additional_ecc_dp.txt .</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP160R1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP160T1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP192R1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP192T1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP224R1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP224T1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP256R1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP256T1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP320R1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP320T1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP384R1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP384T1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP512R1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.BrainpoolP512T1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.EccBrainpool"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.ECSign"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.ECSignWithRipeMD160"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.ECSignWithSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.EllipticCurve"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.RipeMD128"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.RipeMD160"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.RipeMD256"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.RsaSignatureWithRipeMD128"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.RsaSignatureWithRipeMD160"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.RsaSignatureWithRipeMD256"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.TeleTrusTAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.TeleTrusTRsaSignatureAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers.VersionOne"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.Accuracy"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.Accuracy.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.Accuracy</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.Accuracy.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.Accuracy.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.Tsp.Accuracy.MaxMicros"></member>
    <member name="F:Org.BouncyCastle.Asn1.Tsp.Accuracy.MaxMillis"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.Accuracy.Micros"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.Accuracy.Millis"></member>
    <member name="F:Org.BouncyCastle.Asn1.Tsp.Accuracy.MinMicros"></member>
    <member name="F:Org.BouncyCastle.Asn1.Tsp.Accuracy.MinMillis"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.Accuracy.Seconds"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.Accuracy.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Cms.Attributes,Org.BouncyCastle.Asn1.Tsp.PartialHashtree[],Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Tsp.PartialHashtree[],Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.DigestAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.GetDigestAlgorithmIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.GetHashTreeLeaf"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.GetReducedHashTree"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.GetTimeStampDigestValue"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.TimeStamp"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain.#ctor(Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain.#ctor(Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain.Append(Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain.GetArchiveTimestamps"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.#ctor(Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.#ctor(Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.Append(Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampChain)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.GetArchiveTimeStampChains"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.CryptoInfos"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.CryptoInfos.#ctor(Org.BouncyCastle.Asn1.Cms.Attribute[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.CryptoInfos</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.CryptoInfos.GetAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.CryptoInfos.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.CryptoInfos.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.CryptoInfos.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.EncryptionInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EncryptionInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.EncryptionInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.EncryptionInfo.EncryptionInfoType"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.EncryptionInfo.EncryptionInfoValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EncryptionInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EncryptionInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EncryptionInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.#ctor(Org.BouncyCastle.Asn1.Tsp.CryptoInfos,Org.BouncyCastle.Asn1.Tsp.EncryptionInfo,Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.EvidenceRecord</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier[],Org.BouncyCastle.Asn1.Tsp.CryptoInfos,Org.BouncyCastle.Asn1.Tsp.EncryptionInfo,Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStampSequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.EvidenceRecord</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.AddArchiveTimeStamp(Org.BouncyCastle.Asn1.Tsp.ArchiveTimeStamp,System.Boolean)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.ArchiveTimeStampSequence"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.GetDigestAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.EvidenceRecord.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.MessageImprint"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.MessageImprint.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.MessageImprint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.MessageImprint.GetHashedMessage"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.MessageImprint.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.MessageImprint.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.MessageImprint.HashAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.MessageImprint.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.PartialHashtree"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.PartialHashtree.#ctor(System.Byte[][])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.PartialHashtree</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.PartialHashtree.ContainsHash(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.PartialHashtree.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.PartialHashtree.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.PartialHashtree.GetValues"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.PartialHashtree.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.PartialHashtree.ValueCount"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.TimeStampReq"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.#ctor(Org.BouncyCastle.Asn1.Tsp.MessageImprint,Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerBoolean,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.TimeStampReq</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.CertReq"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.Extensions"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.MessageImprint"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.Nonce"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.ReqPolicy"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.TimeStampResp"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampResp.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo,Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.TimeStampResp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampResp.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampResp.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampResp.Status"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TimeStampResp.TimeStampToken"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampResp.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.Tsp.TstInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TstInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Tsp.MessageImprint,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Tsp.Accuracy,Org.BouncyCastle.Asn1.DerBoolean,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.Tsp.TstInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.Accuracy"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.Extensions"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.GenTime"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TstInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TstInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.MessageImprint"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.Nonce"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.Ordering"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.Policy"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.SerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TstInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.Tsa"></member>
    <member name="P:Org.BouncyCastle.Asn1.Tsp.TstInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu4145be"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu4145le"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7564digest_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7564digest_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7564digest_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7564mac_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7564mac_384"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7564mac_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624kw_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624kw_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624kw_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624xts_128"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624xts_256"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.dstu7624xts_512"></member>
    <member name="F:Org.BouncyCastle.Asn1.UA.UAObjectIdentifiers.UaOid"></member>
    <member name="T:Org.BouncyCastle.Asn1.Utilities.Asn1Dump"></member>
    <member name="M:Org.BouncyCastle.Asn1.Utilities.Asn1Dump.Dump(System.IO.Stream,System.IO.TextWriter)">
      <summary>Parse ASN.1 objects from input <see cref="T:System.IO.Stream" />, and write them to the output.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Utilities.Asn1Dump.DumpAsString(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.Utilities.Asn1Dump.DumpAsString(Org.BouncyCastle.Asn1.Asn1Encodable,System.Boolean)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue.Type"></member>
    <member name="P:Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.X500.DirectoryString"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.DirectoryString.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X500.DirectoryString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X500.DirectoryString.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.DirectoryString.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.DirectoryString.GetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.DirectoryString.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X500.Rdn"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Rdn.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X500.Rdn</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Rdn.#ctor(Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X500.Rdn</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Rdn.#ctor(Org.BouncyCastle.Asn1.X500.AttributeTypeAndValue[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X500.Rdn</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X500.Rdn.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Rdn.GetFirst"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Rdn.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Rdn.GetTypesAndValues"></member>
    <member name="P:Org.BouncyCastle.Asn1.X500.Rdn.IsMultiValued"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Rdn.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X500.Style.IetfUtilities"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Style.IetfUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X500.Style.IetfUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Style.IetfUtilities.Canonicalize(System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Style.IetfUtilities.CanonicalString(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Style.IetfUtilities.RdnAreEqual(Org.BouncyCastle.Asn1.X500.Rdn,Org.BouncyCastle.Asn1.X500.Rdn)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Style.IetfUtilities.StripInternalSpaces(System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X500.Style.IetfUtilities.ValueToString(Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AccessDescription"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AccessDescription.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AccessDescription</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AccessDescription.AccessLocation"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AccessDescription.AccessMethod"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AccessDescription.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.AccessDescription.IdADCAIssuers"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.AccessDescription.IdADOcsp"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AccessDescription.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AccessDescription.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier.Algorithm">
      <summary>
            Return the OID in the Algorithm entry of this identifier.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier.Parameters">
      <summary>
            Return the parameters structure in the Parameters entry of this identifier.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureAlgorithm.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AltSignatureValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureValue.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AltSignatureValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureValue.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AltSignatureValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureValue.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureValue.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureValue.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AltSignatureValue.Signature"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AltSignatureValue.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AttCertIssuer"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertIssuer.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames)">
      <summary>
            Don't use this one if you are trying to be RFC 3281 compliant.
            Use it for v1 attribute certificates only.
            </summary>
      <param name="names">Our GeneralNames structure</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertIssuer.#ctor(Org.BouncyCastle.Asn1.X509.V2Form)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AttCertIssuer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertIssuer.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertIssuer.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttCertIssuer.Issuer"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertIssuer.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod.#ctor(Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.Asn1GeneralizedTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod.NotAfterTime"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod.NotBeforeTime"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AttributeCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificate.#ctor(Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AttributeCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificate.ACInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificate.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificate.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificate.GetSignatureOctets"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificate.SignatureAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificate.SignatureValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificate.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.AttrCertValidityPeriod"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.Attributes"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.Extensions"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.Holder"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.IssuerUniqueID"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.Signature"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AttributeTable"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeTable.#ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AttributeTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeTable.#ctor(Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AttributeTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeTable.#ctor(System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.AttributeX509})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AttributeTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeTable.Get(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeTable.ToDictionary"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AttributeX509"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeX509.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AttributeX509</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeX509.AttrType"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AttributeX509.AttrValues"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeX509.GetAttributeValues"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeX509.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeX509.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.#ctor(Org.BouncyCastle.Asn1.X509.AccessDescription)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.#ctor(Org.BouncyCastle.Asn1.X509.AccessDescription[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.GetAccessDescriptions"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityInformationAccess.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo,Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[],Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.AuthorityCertIssuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.AuthorityCertSerialNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.GetKeyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.BasicConstraints"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.#ctor(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.BasicConstraints</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.BasicConstraints</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.IsCA"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.BasicConstraints.PathLenConstraint"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.BasicConstraints.PathLenConstraintInteger"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.BasicConstraints.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CertificateList"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificateList.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificateList.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificateList.GetRevokedCertificateEnumeration"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificateList.GetRevokedCertificates"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificateList.GetSignatureOctets"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificateList.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificateList.NextUpdate"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificateList.Signature"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificateList.SignatureAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificateList.TbsCertList"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificateList.ThisUpdate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificateList.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificateList.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CertificatePair"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePair.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure,Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CertificatePair</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificatePair.Forward"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePair.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificatePair.Reverse"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePair.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CertificatePolicies"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.#ctor(Org.BouncyCastle.Asn1.X509.PolicyInformation)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CertificatePolicies</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.#ctor(Org.BouncyCastle.Asn1.X509.PolicyInformation[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CertificatePolicies</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.GetPolicyInformation"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.GetPolicyInformation(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePolicies.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CertPolicyID"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertPolicyID.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CertPolicyID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CrlDistPoint"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.#ctor(Org.BouncyCastle.Asn1.X509.DistributionPoint[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CrlDistPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.GetDistributionPoints"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CrlEntry"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlEntry.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CrlEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CrlEntry.Extensions"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CrlEntry.RevocationDate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlEntry.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CrlEntry.UserCertificate"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CrlNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlNumber.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CrlNumber</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CrlNumber.Number"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlNumber.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.CrlReason"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlReason.#ctor(Org.BouncyCastle.Asn1.DerEnumerated)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CrlReason</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlReason.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.CrlReason</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.AACompromise"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.AffiliationChanged"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.CACompromise"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.CertificateHold"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.CessationOfOperation"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.KeyCompromise"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.PrivilegeWithdrawn"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.RemoveFromCrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.Superseded"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlReason.ToString"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.CrlReason.Unspecified"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.DigestInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DigestInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DigestInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DigestInfo.AlgorithmID"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DigestInfo.GetDigest"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DigestInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DigestInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DigestInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.DisplayText"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.#ctor(Org.BouncyCastle.Asn1.IAsn1String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DisplayText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.Int32,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DisplayText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DisplayText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeBmpString"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeIA5String"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeUtf8String"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeVisibleString"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.DisplayTextMaximumSize"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.GetString"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.DistributionPoint"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPoint.#ctor(Org.BouncyCastle.Asn1.X509.DistributionPointName,Org.BouncyCastle.Asn1.X509.ReasonFlags,Org.BouncyCastle.Asn1.X509.GeneralNames)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DistributionPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DistributionPoint.CrlIssuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DistributionPoint.DistributionPointName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPoint.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPoint.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DistributionPoint.Reasons"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPoint.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPoint.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.DistributionPointName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPointName.#ctor(Org.BouncyCastle.Asn1.Asn1TaggedObject)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DistributionPointName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPointName.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DistributionPointName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPointName.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DistributionPointName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DistributionPointName.FullName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPointName.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPointName.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DistributionPointName.Name"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DistributionPointName.NameRelativeToCrlIssuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DistributionPointName.PointType"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPointName.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DistributionPointName.ToString"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DistributionPointName.Type"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.DsaParameter"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DsaParameter.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.DsaParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DsaParameter.G"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DsaParameter.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DsaParameter.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DsaParameter.P"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.DsaParameter.Q"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DsaParameter.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.#ctor(Org.BouncyCastle.Asn1.X509.KeyPurposeID[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Asn1.DerObjectIdentifier})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.Count"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.GetAllUsages"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.HasKeyPurposeId(Org.BouncyCastle.Asn1.X509.KeyPurposeID)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.GeneralName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.#ctor(Org.BouncyCastle.Asn1.Asn1Object,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.GeneralName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.#ctor(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.GeneralName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.#ctor(System.Int32,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.GeneralName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.#ctor(System.Int32,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.GeneralName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.DirectoryName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.DnsName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.EdiPartyName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.IPAddress"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.GeneralName.Name"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.OtherName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.RegisteredID"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.Rfc822Name"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.GeneralName.TagNo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralName.ToString"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.UniformResourceIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.GeneralName.X400Address"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.GeneralNames"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>Construct a GeneralNames object containing one GeneralName.</summary>
      <param name="name">The name to be contained.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.GeneralNames</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions,Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.GetNames"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralNames.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.GeneralSubtree"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralSubtree.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.GeneralSubtree</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralSubtree.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.GeneralSubtree</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.GeneralSubtree.Base"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralSubtree.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralSubtree.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.GeneralSubtree.Maximum"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.GeneralSubtree.Minimum"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralSubtree.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Holder"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.Asn1TaggedObject)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Holder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Holder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Holder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.X509.IssuerSerial)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Holder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.X509.IssuerSerial,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Holder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.X509.ObjectDigestInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Holder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Holder.BaseCertificateID"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Holder.EntityName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Holder.ObjectDigestInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Holder.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.IetfAttrSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.GetValues"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.PolicyAuthority"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.ToAsn1Object"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.ValueOctets"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.ValueOid"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.ValueType"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.ValueUtf8"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.IssuerSerial"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuerSerial.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.IssuerSerial</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuerSerial.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuerSerial.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuerSerial.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuerSerial.IssuerUid"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuerSerial.Serial"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuerSerial.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.#ctor(Org.BouncyCastle.Asn1.X509.DistributionPointName,System.Boolean,System.Boolean,Org.BouncyCastle.Asn1.X509.ReasonFlags,System.Boolean,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.DistributionPoint"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.IsIndirectCrl"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.OnlyContainsAttributeCerts"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.OnlyContainsCACerts"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.OnlyContainsUserCerts"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.OnlySomeReasons"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.KeyPurposeID"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.AnyExtendedKeyUsage"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_capwapAC"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_capwapWTP"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_clientAuth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_cmcCA"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_cmcRA"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_cmKGA"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_codeSigning"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_dvcs"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_eapOverLAN"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_eapOverPPP"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_emailProtection"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_ipsecEndSystem"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_ipsecIKE"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_ipsecTunnel"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_ipsecUser"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_macAddress"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_msSGC">
      <summary>Microsoft Server Gated Crypto (msSGC).</summary>
      <remarks>see https://www.alvestrand.no/objectid/1.3.6.1.4.1.311.10.3.3.html</remarks>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_nsSGC">
      <summary>Netscape Server Gated Crypto (nsSGC).</summary>
      <remarks>see https://www.alvestrand.no/objectid/2.16.840.1.113730.4.1.html</remarks>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_OCSPSigning"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_sbgpCertAAServerAuth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_scvp_responder"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_scvpClient"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_scvpServer"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_serverAuth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_smartcardlogon"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_kp_timeStamping"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_pkinit_authData"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_pkinit_DHKeyData"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.id_pkinit_rkeyData"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPClientAuth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPCodeSigning"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPEmailProtection"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPIpsecEndSystem"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPIpsecTunnel"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPIpsecUser"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPMacAddress"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPOcspSigning"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPServerAuth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPSmartCardLogon"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.IdKPTimeStamping"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.keyPurposeClientAuth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.keyPurposeKdc"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyPurposeID.scSysNodeNumber"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.KeyUsage"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.KeyUsage.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.KeyUsage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.CrlSign"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.DataEncipherment"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.DecipherOnly"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.DigitalSignature"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.EncipherOnly"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.KeyUsage.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.KeyUsage.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.KeyAgreement"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.KeyCertSign"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.KeyEncipherment"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.KeyUsage.NonRepudiation"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.KeyUsage.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.NameConstraints"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NameConstraints.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.NameConstraints</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NameConstraints.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.GeneralSubtree},System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.GeneralSubtree})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.NameConstraints</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.NameConstraints.ExcludedSubtrees"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NameConstraints.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NameConstraints.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.NameConstraints.PermittedSubtrees"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NameConstraints.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.NoticeReference"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.#ctor(Org.BouncyCastle.Asn1.X509.DisplayText,Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.NoticeReference</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.String,Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.NoticeReference</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.String,System.Collections.Generic.IList{System.Object})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.NoticeReference</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.GetNoticeNumbers"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.NoticeReference.Organization"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.#ctor(System.Int32,System.String,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.ObjectDigestInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.DigestAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.DigestedObjectType"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.ObjectDigest"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.OtherObjectDigest"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.OtherObjectTypeID"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKey"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKeyCert"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.OtherName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.OtherName.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.OtherName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.OtherName.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.OtherName.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.OtherName.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.OtherName.TypeID"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.OtherName.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.PolicyInformation"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyInformation.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.PolicyInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyInformation.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.PolicyInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyInformation.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.PolicyInformation.PolicyIdentifier"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.PolicyInformation.PolicyQualifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyInformation.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.PolicyMappings"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyMappings.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.PolicyMappings</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyMappings.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.PolicyMappings</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyMappings.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.PolicyQualifierID"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.PolicyQualifierID.IdQtCps"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.PolicyQualifierID.IdQtUnotice"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.PolicyQualifierId"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.Qualifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod">
      <remarks>
        <pre>
            PrivateKeyUsagePeriod ::= SEQUENCE
            {
            notBefore       [0]     GeneralizedTime OPTIONAL,
            notAfter        [1]     GeneralizedTime OPTIONAL }
            </pre>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod.NotAfter"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod.NotBefore"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.ReasonFlags"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ReasonFlags.#ctor(Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.ReasonFlags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ReasonFlags.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.ReasonFlags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.AACompromise"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.AffiliationChanged"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.CACompromise"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.CertificateHold"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.CessationOfOperation"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.KeyCompromise"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.PrivilegeWithdrawn"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.Superseded"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ReasonFlags.Unused"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.RoleSyntax"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.RoleSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.RoleSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.RoleSyntax</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleAuthorityAsString"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleNameAsString"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.RoleSyntax.RoleAuthority"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.RoleSyntax.RoleName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.Modulus"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.PublicExponent"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.SubjectAltPublicKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectAltPublicKeyInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.AttributeX509})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.Attributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.CreateSha1KeyIdentifier(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.CreateTruncatedSha1KeyIdentifier(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.FromExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.GetKeyIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.Algorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.AlgorithmID"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.ParsePublicKey"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.PublicKey">
      <summary>Return the public key as a raw bit string.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.PublicKeyData">
      <summary>Return the public key as a raw bit string.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Target"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Target.#ctor(Org.BouncyCastle.Asn1.X509.Target.Choice,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Target</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Target.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Target.TargetGroup"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Target.TargetName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Target.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Target.Choice"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.TargetInformation"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.#ctor(Org.BouncyCastle.Asn1.X509.Target[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.TargetInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.#ctor(Org.BouncyCastle.Asn1.X509.Targets)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.TargetInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.GetTargetsObjects"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Targets"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.#ctor(Org.BouncyCastle.Asn1.X509.Target[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Targets</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.GetTargets"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.TbsCertificateList"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateList.Extensions"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateList.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateList.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateList.GetRevokedCertificateEnumeration"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateList.GetRevokedCertificates"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateList.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateList.NextUpdate"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateList.Signature"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateList.ThisUpdate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateList.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateList.Version"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateList.VersionNumber"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.EndDate"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.Extensions"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.IssuerUniqueID"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.Signature"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.StartDate"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.Subject"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.SubjectPublicKeyInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.SubjectUniqueID"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.Version"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.TbsCertificateStructure.VersionNumber"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Time"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.#ctor(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.#ctor(Org.BouncyCastle.Asn1.Asn1UtcTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.#ctor(System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Time</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.ToDateTime">
      <summary>
            Return our time as DateTime.
            </summary>
      <returns>A date time.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Time.ToString"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.UserNotice"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.UserNotice.#ctor(Org.BouncyCastle.Asn1.X509.NoticeReference,Org.BouncyCastle.Asn1.X509.DisplayText)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.UserNotice</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.UserNotice.#ctor(Org.BouncyCastle.Asn1.X509.NoticeReference,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.UserNotice</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.UserNotice.ExplicitText"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.UserNotice.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.UserNotice.NoticeRef"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.UserNotice.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.GenerateTbsCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetEndDate(Org.BouncyCastle.Asn1.Asn1UtcTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetEndDate(Org.BouncyCastle.Asn1.X509.Time)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetIssuer(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetSerialNumber(Org.BouncyCastle.Asn1.DerInteger)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetSignature(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetStartDate(Org.BouncyCastle.Asn1.Asn1UtcTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetStartDate(Org.BouncyCastle.Asn1.X509.Time)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetSubject(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator.SetSubjectPublicKeyInfo(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.AddAttribute(Org.BouncyCastle.Asn1.X509.AttributeX509)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.AddAttribute(System.String,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.GenerateAttributeCertificateInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetEndDate(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetHolder(Org.BouncyCastle.Asn1.X509.Holder)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetIssuer(Org.BouncyCastle.Asn1.X509.AttCertIssuer)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetIssuerUniqueID(Org.BouncyCastle.Asn1.DerBitString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetSerialNumber(Org.BouncyCastle.Asn1.DerInteger)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetSignature(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.SetStartDate(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.V2Form"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V2Form</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Asn1.X509.IssuerSerial)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V2Form</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Asn1.X509.IssuerSerial,Org.BouncyCastle.Asn1.X509.ObjectDigestInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V2Form</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.#ctor(Org.BouncyCastle.Asn1.X509.GeneralNames,Org.BouncyCastle.Asn1.X509.ObjectDigestInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V2Form</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.V2Form.BaseCertificateID"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.V2Form.IssuerName"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.V2Form.ObjectDigestInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.AddCrlEntry(Org.BouncyCastle.Asn1.Asn1Sequence)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.AddCrlEntry(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Asn1UtcTime,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.AddCrlEntry(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.Time,Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.AddCrlEntry(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.Time,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.AddCrlEntry(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X509.Time,System.Int32,Org.BouncyCastle.Asn1.Asn1GeneralizedTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.GeneratePreTbsCertList"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.GenerateTbsCertList"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.SetExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.SetIssuer(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.SetNextUpdate(Org.BouncyCastle.Asn1.Asn1UtcTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.SetNextUpdate(Org.BouncyCastle.Asn1.X509.Time)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.SetSignature(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.SetThisUpdate(Org.BouncyCastle.Asn1.Asn1UtcTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2TbsCertListGenerator.SetThisUpdate(Org.BouncyCastle.Asn1.X509.Time)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.GeneratePreTbsCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.GenerateTbsCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetEndDate(Org.BouncyCastle.Asn1.Asn1UtcTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetEndDate(Org.BouncyCastle.Asn1.X509.Time)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetIssuer(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetIssuerUniqueID(Org.BouncyCastle.Asn1.DerBitString)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetSerialNumber(Org.BouncyCastle.Asn1.DerInteger)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetSignature(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetStartDate(Org.BouncyCastle.Asn1.Asn1UtcTime)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetStartDate(Org.BouncyCastle.Asn1.X509.Time)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetSubject(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetSubjectPublicKeyInfo(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator.SetSubjectUniqueID(Org.BouncyCastle.Asn1.DerBitString)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509Attributes"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Attributes.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Attributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Attributes.RoleSyntax"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509CertificateStructure"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.#ctor(Org.BouncyCastle.Asn1.X509.TbsCertificateStructure,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerBitString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509CertificateStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.EndDate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.GetSignatureOctets"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.Issuer"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.Signature"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.SignatureAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.StartDate"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.Subject"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.SubjectPublicKeyInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.TbsCertificate"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509CertificateStructure.Version"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509DefaultEntryConverter"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509DefaultEntryConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509DefaultEntryConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509DefaultEntryConverter.GetConvertedValue(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.String)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509Extension"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extension.#ctor(Org.BouncyCastle.Asn1.DerBoolean,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Extension</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extension.#ctor(System.Boolean,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Extension</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extension.ConvertValueToObject(Org.BouncyCastle.Asn1.X509.X509Extension)">
      <param name="ext">The extension to parse.</param>
      <returns>The object the value string contains.</returns>
      <exception cref="T:System.ArgumentException">If conversion is not possible.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extension.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extension.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extension.GetParsedValue"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509Extension.IsCritical"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509Extension.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509Extensions"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.X509Extension})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Extensions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.DerObjectIdentifier},System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.X509Extension})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Extensions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.DerObjectIdentifier},System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.X509Extension})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Extensions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.AltSignatureAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.AltSignatureValue"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.AuditIdentity"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.AuthorityInfoAccess"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.AuthorityKeyIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.BasicConstraints"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.BiometricInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.CertificateIssuer"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.CertificatePolicies"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.CrlDistributionPoints"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.CrlNumber"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.DeltaCrlIndicator"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.Equivalent(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.ExpiredCertsOnCrl"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.ExtendedKeyUsage"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509Extensions.ExtensionOids"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.FreshestCrl"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetCriticalExtensionOids"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetExtension(Org.BouncyCastle.Asn1.X509.X509Extensions,Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetExtensionOids"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetExtensionParsedValue(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetExtensionParsedValue(Org.BouncyCastle.Asn1.X509.X509Extensions,Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.GetNonCriticalExtensionOids"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.InhibitAnyPolicy"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.InstructionCode"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.InvalidityDate"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.IssuerAlternativeName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.IssuingDistributionPoint"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.KeyUsage"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.LogoType"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.NameConstraints"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.NoRevAvail"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.PolicyConstraints"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.PolicyMappings"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.PrivateKeyUsagePeriod"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.QCStatements"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.ReasonCode"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.SubjectAlternativeName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.SubjectAltPublicKeyInfo"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.SubjectDirectoryAttributes"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.SubjectInfoAccess"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.SubjectKeyIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Extensions.TargetInformation"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Extensions.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator">
      <remarks>Generator for X.509 extensions</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
            Add an extension with the given oid and the passed in value to be included
            in the OCTET STRING associated with the extension.
            </summary>
      <param name="oid">OID for the extension.</param>
      <param name="critical">True if critical, false otherwise.</param>
      <param name="extValue">The ASN.1 object to be included in the extension.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
      <summary>
            Add an extension with the given oid and the passed in byte array to be wrapped
            in the OCTET STRING associated with the extension.
            </summary>
      <param name="oid">OID for the extension.</param>
      <param name="critical">True if critical, false otherwise.</param>
      <param name="extValue">The byte array to be wrapped.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.AddExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Generate">
      <summary>Generate an X509Extensions object based on the current state of the generator.</summary>
      <returns>An <c>X509Extensions</c> object</returns>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.IsEmpty">
      <summary>Return true if there are no extension present in this generator.</summary>
      <returns>True if empty, false otherwise</returns>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Reset">
      <summary>Reset the generator</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509Name"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.Generic.IDictionary{System.String,Org.BouncyCastle.Asn1.DerObjectIdentifier},System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.Generic.IDictionary{System.String,Org.BouncyCastle.Asn1.DerObjectIdentifier},System.String,Org.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.String,Org.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.DerObjectIdentifier},System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,System.String})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.DerObjectIdentifier},System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,System.String},Org.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.DerObjectIdentifier},System.Collections.Generic.IList{System.String})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.DerObjectIdentifier},System.Collections.Generic.IList{System.String},Org.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.#ctor(System.String,Org.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.BusinessCategory"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.C"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.CN"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.CountryOfCitizenship"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.CountryOfResidence"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.DateOfBirth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.DC"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.DefaultLookup"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509Name.DefaultReverse"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.DefaultSymbols"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.DmdName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.DnQualifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.E"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.EmailAddress"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.Equivalent(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.Equivalent(Org.BouncyCastle.Asn1.X509.X509Name,System.Boolean)">
      <param name="other">The X509Name object to test equivalency against.</param>
      <param name="inOrder">If true, the order of elements must be the same,
            as well as the values associated with each element.</param>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.Gender"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.Generation"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.GetOidList"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.GetValueList"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.GetValueList(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.GivenName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.Initials"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.L"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.Name"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.NameAtBirth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.O"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.OrganizationIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.OU"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.PlaceOfBirth"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.PostalAddress"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.PostalCode"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.Pseudonym"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.RFC1779Symbols"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.RFC2253Symbols"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.SerialNumber"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.ST"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.Street"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.Surname"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.T"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.TelephoneNumber"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.ToAsn1Object"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.ToString"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509Name.ToString(System.Boolean,System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,System.String})"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.UID"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.UniqueIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.UnstructuredAddress"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509Name.UnstructuredName"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509NameEntryConverter"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameEntryConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509NameEntryConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameEntryConverter.CanBePrintable(System.String)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameEntryConverter.ConvertHexEncoded(System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameEntryConverter.GetConvertedValue(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.String)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509NameTokenizer"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameTokenizer.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509NameTokenizer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameTokenizer.#ctor(System.String,System.Char)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509NameTokenizer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameTokenizer.HasMoreTokens"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509NameTokenizer.NextToken"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.CommonName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.CountryName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.CrlAccessMethod"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.id_at_name"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.id_at_organizationIdentifier"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.id_at_telephoneNumber"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.IdAD"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.IdADCAIssuers"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.IdADOcsp"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.IdEARsa"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.IdPE"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.IdPkix"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.IdSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.LocalityName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.OcspAccessMethod"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.Organization"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.OrganizationalUnitName"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.RipeMD160"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.RipeMD160WithRsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.X509ObjectIdentifiers.StateOrProvinceName"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.#ctor(Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.BiometricData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.#ctor(Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.DerIA5String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.BiometricData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.BiometricDataHash"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.SourceDataUri"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.BiometricData.TypeOfBiometricData"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers.IdEtsiQcs"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers.IdEtsiQcsLimitValue"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers.IdEtsiQcsQcCompliance"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers.IdEtsiQcsQcSscd"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers.IdEtsiQcsRetentionPeriod"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode.Alphabetic"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode.IsAlphabetic"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode.Numeric"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue.#ctor(Org.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue.Amount"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue.Currency"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue.Exponent"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.MonetaryValue.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.QCStatement"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.QCStatement.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.QCStatement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.QCStatement.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.QCStatement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.QCStatement.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.QCStatement.StatementId"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.QCStatement.StatementInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.QCStatement.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.Rfc3739QCObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.Rfc3739QCObjectIdentifiers.IdQcs"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.Rfc3739QCObjectIdentifiers.IdQcsPkixQCSyntaxV1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.Rfc3739QCObjectIdentifiers.IdQcsPkixQCSyntaxV2"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.GeneralName[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.GetNameRegistrationAuthorities"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.SemanticsIdentifier"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.BiometricDataOid"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.GetInstance(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.HandwrittenSignature"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.IsPredefined"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.Picture"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.PredefinedBiometricType"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(Org.BouncyCastle.Asn1.X500.DirectoryString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(Org.BouncyCastle.Asn1.X500.DirectoryString,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.GetGivenName"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.Pseudonym"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.Surname"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.SigI.PersonalData"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.#ctor(Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.Asn1GeneralizedTime,Org.BouncyCastle.Asn1.X500.DirectoryString,System.String,Org.BouncyCastle.Asn1.X500.DirectoryString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X509.SigI.PersonalData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.DateOfBirth"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.Gender"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.NameDistinguisher"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.NameOrPseudonym"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.PlaceOfBirth"></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.PostalAddress"></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigI"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICP"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICPSigConform"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKP"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKPDirectoryService"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigION"></member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIONPersonalData"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.DHDomainParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHDomainParameters.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.X9.DHValidationParms)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.DHDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHDomainParameters.G"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHDomainParameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHDomainParameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHDomainParameters.J"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHDomainParameters.P"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHDomainParameters.Q"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHDomainParameters.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHDomainParameters.ValidationParms"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.DHPublicKey"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHPublicKey.#ctor(Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.DHPublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHPublicKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHPublicKey.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHPublicKey.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHPublicKey.Y"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.DHValidationParms"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHValidationParms.#ctor(Org.BouncyCastle.Asn1.DerBitString,Org.BouncyCastle.Asn1.DerInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.DHValidationParms</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHValidationParms.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHValidationParms.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHValidationParms.PgenCounter"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.DHValidationParms.Seed"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.DHValidationParms.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable">
      <summary>A unified elliptic curve registry of the various standard-specific registries.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.ECNamedCurveTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of
            the full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of
            the full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X9.ECNamedCurveTable.Names">
      <summary>Enumerate the available curve names in all the registries.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.X9.KeySpecificInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.KeySpecificInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.KeySpecificInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.KeySpecificInfo.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.KeySpecificInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X9.KeySpecificInfo.Algorithm"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.KeySpecificInfo.Counter"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.KeySpecificInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.OtherInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.OtherInfo.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.OtherInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.OtherInfo.#ctor(Org.BouncyCastle.Asn1.X9.KeySpecificInfo,Org.BouncyCastle.Asn1.Asn1OctetString,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.OtherInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X9.OtherInfo.KeyInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.OtherInfo.PartyAInfo"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.OtherInfo.SuppPubInfo"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.OtherInfo.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X962NamedCurves">
      <summary>Elliptic curve registry for the curves defined in X.962 EC-DSA.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962NamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962NamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962NamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962NamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962NamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962NamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X962NamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X962Parameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962Parameters.#ctor(Org.BouncyCastle.Asn1.Asn1Null)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X962Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962Parameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X962Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962Parameters.#ctor(Org.BouncyCastle.Asn1.X9.X9ECParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X962Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962Parameters.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962Parameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X962Parameters.IsImplicitlyCA"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X962Parameters.IsNamedCurve"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X962Parameters.Parameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X962Parameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9Curve"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9Curve.#ctor(Org.BouncyCastle.Asn1.X9.X9FieldID,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9Curve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9Curve.#ctor(Org.BouncyCastle.Math.EC.ECCurve)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9Curve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9Curve.#ctor(Org.BouncyCastle.Math.EC.ECCurve,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9Curve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9Curve.Curve"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9Curve.GetSeed"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9Curve.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9ECParameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParameters.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParameters.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Asn1.X9.X9ECPoint,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParameters.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Asn1.X9.X9ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParameters.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Asn1.X9.X9ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParameters.BaseEntry"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParameters.Curve"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParameters.CurveEntry"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParameters.FieldIDEntry"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParameters.G"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParameters.GetSeed"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParameters.H"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParameters.N"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParameters.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECParametersHolder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder.CreateCurve"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder.CreateParameters"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder.Curve"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder.Parameters"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9ECPoint"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECPoint.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECPoint.#ctor(Org.BouncyCastle.Math.EC.ECCurve,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECPoint.#ctor(Org.BouncyCastle.Math.EC.ECPoint,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ECPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECPoint.GetPointEncoding"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECPoint.IsPointCompressed"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9ECPoint.Point"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ECPoint.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9FieldElement"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9FieldElement.#ctor(Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9FieldElement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9FieldElement.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9FieldElement.Value"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9FieldID"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9FieldID.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9FieldID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9FieldID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9FieldID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9FieldID.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9FieldID.Identifier"></member>
    <member name="P:Org.BouncyCastle.Asn1.X9.X9FieldID.Parameters"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9FieldID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9IntegerConverter"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9IntegerConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9IntegerConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9IntegerConverter.GetByteLength(Org.BouncyCastle.Math.EC.ECCurve)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9IntegerConverter.GetByteLength(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9IntegerConverter.IntegerToBytes(Org.BouncyCastle.Math.BigInteger,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers"></member>
    <member name="M:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ansi_x9_42"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ansi_X9_62"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Onb191v4"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Onb191v5"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Onb239v4"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Onb239v5"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb163v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb163v2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb163v3"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb176w1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb208w1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb272w1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb304w1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Pnb368w1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb191v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb191v2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb191v3"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb239v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb239v2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb239v3"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb359v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.C2Tnb431r1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.CharacteristicTwoField"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.CTwoCurve"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHEphem"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHHybrid1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHHybrid2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHHybridOneFlow"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHOneFlow"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHPublicNumber"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHSinglePassCofactorDHSha1KdfScheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHSinglePassStdDHSha1KdfScheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.DHStatic"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha224"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha256"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha384"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha512"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.EllipticCurve"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.GNBasis"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.id_ecSigType"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.id_publicKeyType"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.IdDsa"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.IdDsaWithSha1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.IdECPublicKey"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.IdFieldType"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Mqv1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Mqv2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.MqvSinglePassSha1KdfScheme"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.PPBasis"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Prime192v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Prime192v2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Prime192v3"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Prime239v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Prime239v2"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Prime239v3"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.Prime256v1"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.PrimeCurve"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.PrimeField"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.TPBasis"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.X9x42Schemes"></member>
    <member name="F:Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.X9x63Scheme"></member>
    <member name="T:Org.BouncyCastle.Bcpg.AeadAlgorithmTag"></member>
    <member name="T:Org.BouncyCastle.Bcpg.AeadEncDataPacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.AeadEncDataPacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.AeadEncDataPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.AeadEncDataPacket.#ctor(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.AeadAlgorithmTag,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.AeadEncDataPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.AeadEncDataPacket.AeadAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Bcpg.AeadEncDataPacket.Algorithm"></member>
    <member name="P:Org.BouncyCastle.Bcpg.AeadEncDataPacket.ChunkSize"></member>
    <member name="M:Org.BouncyCastle.Bcpg.AeadEncDataPacket.GetIV"></member>
    <member name="M:Org.BouncyCastle.Bcpg.AeadEncDataPacket.GetIVLength(Org.BouncyCastle.Bcpg.AeadAlgorithmTag)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.AeadEncDataPacket.Version"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ArmoredInputStream"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredInputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredInputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.GetArmorHeaderLine"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.GetArmorHeaders"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.IsClearText"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.IsEndOfStream"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.ReadByte"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.SetDetectMissingCrc(System.Boolean)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ArmoredOutputStream"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.#ctor(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.AddHeader(System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.BeginClearText(Org.BouncyCastle.Bcpg.HashAlgorithmTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredOutputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Bcpg.ArmoredOutputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.EndClearText"></member>
    <member name="F:Org.BouncyCastle.Bcpg.ArmoredOutputStream.HeaderVersion"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.ResetHeaders"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.SetHeader(System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.BcpgInputStream">
      <remarks>Reader for PGP objects.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Bcpg.BcpgInputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Bcpg.BcpgInputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.NextPacketTag">
      <summary>Returns the next packet tag in the stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.ReadAll"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.ReadByte"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.ReadFully(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.ReadFully(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.ReadFully(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.ReadPacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.SkipMarkerPackets"></member>
    <member name="T:Org.BouncyCastle.Bcpg.BcpgObject">
      <remarks>Base class for a PGP object.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgObject.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.BcpgObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgObject.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgObject.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Bcpg.BcpgOutputStream">
      <remarks>Basic output stream.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream)">
      <summary>Create a stream representing a general packet.</summary>
      <param name="outStr">Output stream to write to.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag)">
      <summary>Create a stream representing an old style partial object.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">The packet tag for the object.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag,System.Byte[])">
      <summary>Create a new style partial input stream buffered into chunks.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">Packet tag.</param>
      <param name="buffer">Buffer to use for collecting chunks.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag,System.Int64)">
      <summary>Create a new style partial input stream buffered into chunks.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">Packet tag.</param>
      <param name="length">Size of chunks making up the packet.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag,System.Int64,System.Boolean)">
      <summary>Create a stream representing a general packet.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">Packet tag.</param>
      <param name="length">Size of chunks making up the packet.</param>
      <param name="oldFormat">If true, the header is written out in old format.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Base constructor specifying whether or not to use packets in the new format wherever possible.
            </summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="newFormatOnly">
        <c>true</c> if use new format packets, <c>false</c> if backwards compatible
            preferred.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Bcpg.BcpgOutputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Bcpg.BcpgOutputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.Finish">
      <summary>Finish writing out the current packet without closing the underlying stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.Flush">
      <summary>Flush the underlying stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.WriteByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.WriteObject(Org.BouncyCastle.Bcpg.BcpgObject)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.WriteObjects(Org.BouncyCastle.Bcpg.BcpgObject[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.WritePacket(Org.BouncyCastle.Bcpg.ContainedPacket)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.CompressedDataPacket">
      <remarks>Generic compressed data object.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.CompressedDataPacket.Algorithm">
      <summary>The algorithm tag value.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.CompressionAlgorithmTag">
      <remarks>Basic tags for compression algorithms.</remarks>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.ContainedPacket">
      <remarks>Basic type for a PGP packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ContainedPacket.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ContainedPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ContainedPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ContainedPacket.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Crc24"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Crc24.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Crc24</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Crc24.Reset"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Crc24.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Crc24.Update3(System.Byte[],System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Crc24.Value"></member>
    <member name="T:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey">
      <remarks>Base class for a DSA public key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.DsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
      <param name="bcpgIn">The stream to read the packet from.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.DsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.G"></member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.P"></member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.Q"></member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.Y"></member>
    <member name="T:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey">
      <remarks>Base class for a DSA secret key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.DsaSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.DsaSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.X"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey">
      <remarks>Base class for an ECDH Public Key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
      <param name="bcpgIn">The stream to read the packet from.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey.Reserved"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ECDHPublicBcpgKey.SymmetricKeyAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ECDsaPublicBcpgKey">
      <remarks>Base class for an ECDSA Public Key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECDsaPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECDsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECDsaPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.EC.ECPoint)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECDsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECDsaPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECDsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
      <param name="bcpgIn">The stream to read the packet from.</param>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.ECPublicBcpgKey">
      <remarks>Base class for an EC Public Key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.EC.ECPoint)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
      <param name="bcpgIn">The stream to read the packet from.</param>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.CurveOid"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.EncodedPoint"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECPublicBcpgKey.ReadBytesOfEncodedLength(Org.BouncyCastle.Bcpg.BcpgInputStream)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ECSecretBcpgKey">
      <remarks>Base class for an EC Secret Key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECSecretBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECSecretBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ECSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECSecretBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ECSecretBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ECSecretBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.ECSecretBcpgKey.X"></member>
    <member name="T:Org.BouncyCastle.Bcpg.EdDsaPublicBcpgKey"></member>
    <member name="M:Org.BouncyCastle.Bcpg.EdDsaPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.EdDsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.EdDsaPublicBcpgKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.EC.ECPoint)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.EdDsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.EdSecretBcpgKey"></member>
    <member name="M:Org.BouncyCastle.Bcpg.EdSecretBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.EdSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.EdSecretBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.EdSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.EdSecretBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.EdSecretBcpgKey.Format"></member>
    <member name="M:Org.BouncyCastle.Bcpg.EdSecretBcpgKey.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Bcpg.EdSecretBcpgKey.X"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey">
      <remarks>Base class for an ElGamal public key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.G"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.P"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.Y"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey">
      <remarks>Base class for an ElGamal secret key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.X"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ExperimentalPacket">
      <remarks>Basic packet for an experimental packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ExperimentalPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ExperimentalPacket.GetContents"></member>
    <member name="P:Org.BouncyCastle.Bcpg.ExperimentalPacket.Tag"></member>
    <member name="T:Org.BouncyCastle.Bcpg.HashAlgorithmTag">
      <remarks>Basic tags for hash algorithms.</remarks>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.IBcpgKey">
      <remarks>Base interface for a PGP key.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.IBcpgKey.Format">
      <summary>
            The base format for this key - in the case of the symmetric keys it will generally
            be raw indicating that the key is just a straight byte representation, for an asymmetric
            key the format will be PGP, indicating the key is a string of MPIs encoded in PGP format.
            </summary>
      <returns>"RAW" or "PGP".</returns>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.InputStreamPacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.InputStreamPacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.InputStreamPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.InputStreamPacket.GetInputStream">
      <summary>Note: you can only read from this once...</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.IUserDataPacket"></member>
    <member name="T:Org.BouncyCastle.Bcpg.LiteralDataPacket">
      <remarks>Generic literal data packet.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.LiteralDataPacket.FileName"></member>
    <member name="P:Org.BouncyCastle.Bcpg.LiteralDataPacket.Format">
      <summary>The format tag value.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.LiteralDataPacket.GetRawFileName"></member>
    <member name="P:Org.BouncyCastle.Bcpg.LiteralDataPacket.ModificationTime">
      <summary>The modification time of the file in milli-seconds (since Jan 1, 1970 UTC)</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.MarkerPacket">
      <remarks>Basic type for a marker packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.MarkerPacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.MarkerPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.MarkerPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.ModDetectionCodePacket">
      <remarks>Basic packet for a modification detection code packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ModDetectionCodePacket.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.ModDetectionCodePacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ModDetectionCodePacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.ModDetectionCodePacket.GetDigest"></member>
    <member name="T:Org.BouncyCastle.Bcpg.MPInteger">
      <remarks>A multiple precision integer</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.MPInteger.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.MPInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.MPInteger.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.MPInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.MPInteger.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.MPInteger.Value"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OnePassSignaturePacket">
      <remarks>Generic signature object</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.#ctor(System.Int32,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.Int64,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OnePassSignaturePacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.HashAlgorithm">
      <summary>The hash algorithm tag.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.KeyAlgorithm">
      <summary>The encryption algorithm tag.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.KeyId"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.SignatureType"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Packet"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Packet.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Packet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.PacketTag">
      <remarks>Basic PGP packet tag types.</remarks>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag">
      <remarks>Public Key Algorithm tag numbers.</remarks>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket">
      <remarks>Basic packet for a PGP public key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket.#ctor(System.Int64,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.Byte[][])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket.GetEncSessionKey"></member>
    <member name="P:Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket.KeyId"></member>
    <member name="P:Org.BouncyCastle.Bcpg.PublicKeyEncSessionPacket.Version"></member>
    <member name="T:Org.BouncyCastle.Bcpg.PublicKeyPacket">
      <remarks>Basic packet for a PGP public key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Org.BouncyCastle.Bcpg.IBcpgKey)">
      <summary>Construct a version 4 public key packet.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.PublicKeyPacket.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyPacket.GetEncodedContents"></member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyPacket.GetTime"></member>
    <member name="P:Org.BouncyCastle.Bcpg.PublicKeyPacket.Key"></member>
    <member name="P:Org.BouncyCastle.Bcpg.PublicKeyPacket.ValidDays"></member>
    <member name="P:Org.BouncyCastle.Bcpg.PublicKeyPacket.Version"></member>
    <member name="T:Org.BouncyCastle.Bcpg.PublicSubkeyPacket">
      <remarks>Basic packet for a PGP public subkey</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicSubkeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Org.BouncyCastle.Bcpg.IBcpgKey)">
      <summary>Construct a version 4 public subkey packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicSubkeyPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.RevocationKey">
      <summary>
            Represents revocation key OpenPGP signature sub packet.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RevocationKey.#ctor(System.Boolean,Org.BouncyCastle.Bcpg.RevocationKeyTag,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.RevocationKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RevocationKey.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.RevocationKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.RevocationKey.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Bcpg.RevocationKey.GetFingerprint"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RevocationKey.SignatureClass"></member>
    <member name="T:Org.BouncyCastle.Bcpg.RevocationKeyTag"></member>
    <member name="T:Org.BouncyCastle.Bcpg.RevocationReason">
      <summary>
            Represents revocation reason OpenPGP signature sub packet.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RevocationReason.#ctor(System.Boolean,Org.BouncyCastle.Bcpg.RevocationReasonTag,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.RevocationReason</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RevocationReason.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.RevocationReason</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RevocationReason.GetRevocationDescription"></member>
    <member name="M:Org.BouncyCastle.Bcpg.RevocationReason.GetRevocationReason"></member>
    <member name="T:Org.BouncyCastle.Bcpg.RevocationReasonTag"></member>
    <member name="T:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey">
      <remarks>Base class for an RSA public key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>Construct an RSA public key from the passed in stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.RsaPublicBcpgKey</parameter>
          </include>
        </markup>
      </summary>
      <param name="n">The modulus.</param>
      <param name="e">The public exponent.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.Modulus"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.PublicExponent"></member>
    <member name="T:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey">
      <remarks>Base class for an RSA secret (or priate) key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.RsaSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.RsaSecretBcpgKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.CrtCoefficient"></member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.Modulus"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.PrimeExponentP"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.PrimeExponentQ"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.PrimeP"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.PrimeQ"></member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.PrivateExponent"></member>
    <member name="T:Org.BouncyCastle.Bcpg.S2k">
      <remarks>The string to key specifier class.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.S2k.#ctor(Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.S2k</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.S2k.#ctor(Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.S2k</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.S2k.#ctor(Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.S2k</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.S2k.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.S2k.GetIV">
      <summary>The IV for the key generation algorithm.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.S2k.GnuDummyS2K"></member>
    <member name="F:Org.BouncyCastle.Bcpg.S2k.GnuProtectionModeDivertToCard"></member>
    <member name="F:Org.BouncyCastle.Bcpg.S2k.GnuProtectionModeNoPrivateKey"></member>
    <member name="P:Org.BouncyCastle.Bcpg.S2k.HashAlgorithm">
      <summary>The hash algorithm.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.S2k.IterationCount">
      <summary>The iteration count</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.S2k.ProtectionMode">
      <summary>The protection mode - only if GnuDummyS2K</summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.S2k.Salted"></member>
    <member name="F:Org.BouncyCastle.Bcpg.S2k.SaltedAndIterated"></member>
    <member name="F:Org.BouncyCastle.Bcpg.S2k.Simple"></member>
    <member name="P:Org.BouncyCastle.Bcpg.S2k.Type"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SecretKeyPacket">
      <remarks>Basic packet for a PGP secret key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretKeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyPacket,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.S2k,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SecretKeyPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretKeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyPacket,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Int32,Org.BouncyCastle.Bcpg.S2k,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SecretKeyPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.SecretKeyPacket.EncAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretKeyPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretKeyPacket.GetEncodedContents"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretKeyPacket.GetIV"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretKeyPacket.GetSecretKeyData"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SecretKeyPacket.PublicKeyPacket"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SecretKeyPacket.S2k"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SecretKeyPacket.S2kUsage"></member>
    <member name="F:Org.BouncyCastle.Bcpg.SecretKeyPacket.UsageChecksum"></member>
    <member name="F:Org.BouncyCastle.Bcpg.SecretKeyPacket.UsageNone"></member>
    <member name="F:Org.BouncyCastle.Bcpg.SecretKeyPacket.UsageSha1"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SecretSubkeyPacket">
      <remarks>Basic packet for a PGP secret key.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretSubkeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyPacket,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.S2k,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SecretSubkeyPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretSubkeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyPacket,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Int32,Org.BouncyCastle.Bcpg.S2k,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SecretSubkeyPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SecretSubkeyPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SignaturePacket">
      <remarks>Generic signature packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int32,System.Int64,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.SignatureSubpacket[],Org.BouncyCastle.Bcpg.SignatureSubpacket[],System.Byte[],Org.BouncyCastle.Bcpg.MPInteger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SignaturePacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int32,System.Int64,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Int64,System.Byte[],Org.BouncyCastle.Bcpg.MPInteger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SignaturePacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int64,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.SignatureSubpacket[],Org.BouncyCastle.Bcpg.SignatureSubpacket[],System.Byte[],Org.BouncyCastle.Bcpg.MPInteger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SignaturePacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.CreationTime">
      <summary>Return the creation time in milliseconds since 1 Jan., 1970 UTC.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.FromByteArray(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetFingerprint"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetHashedSubPackets"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetSignature"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetSignatureBytes"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetSignatureTrailer"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetUnhashedSubPackets"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.KeyAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.KeyId"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.SignatureType"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.Version"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SignatureSubpacket">
      <remarks>Basic type for a PGP Signature sub-packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.#ctor(Org.BouncyCastle.Bcpg.SignatureSubpacketTag,System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SignatureSubpacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.GetData">
      <summary>Return the generic data making up the packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.IsCritical"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.IsLongLength"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SignatureSubpacket.SubpacketType"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SignatureSubpacketsParser"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacketsParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SignatureSubpacketsParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacketsParser.ReadPacket"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SignatureSubpacketTag"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SymmetricEncDataPacket">
      <remarks>Basic type for a symmetric key encrypted packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SymmetricEncDataPacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SymmetricEncDataPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.SymmetricEncIntegrityPacket"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag"></member>
    <member name="T:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.#ctor(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.S2k,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.EncAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.GetSecKeyData"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.S2k"></member>
    <member name="P:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.Version"></member>
    <member name="T:Org.BouncyCastle.Bcpg.TrustPacket">
      <summary>Basic type for a trust packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.TrustPacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.TrustPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.TrustPacket.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.TrustPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.TrustPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.TrustPacket.GetLevelAndTrustAmount"></member>
    <member name="T:Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UnsupportedPacketVersionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.UserAttributePacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributePacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserAttributePacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributePacket.#ctor(Org.BouncyCastle.Bcpg.UserAttributeSubpacket[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserAttributePacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributePacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributePacket.GetSubpackets"></member>
    <member name="T:Org.BouncyCastle.Bcpg.UserAttributeSubpacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.#ctor(Org.BouncyCastle.Bcpg.UserAttributeSubpacketTag,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserAttributeSubpacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.#ctor(Org.BouncyCastle.Bcpg.UserAttributeSubpacketTag,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserAttributeSubpacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.data"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.GetData"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.SubpacketType"></member>
    <member name="T:Org.BouncyCastle.Bcpg.UserAttributeSubpacketsParser"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacketsParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserAttributeSubpacketsParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacketsParser.ReadPacket"></member>
    <member name="T:Org.BouncyCastle.Bcpg.UserAttributeSubpacketTag"></member>
    <member name="T:Org.BouncyCastle.Bcpg.UserIdPacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserIdPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserIdPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.UserIdPacket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.Encode(Org.BouncyCastle.Bcpg.BcpgOutputStream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.GetId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.UserIdPacket.GetRawId"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Attr.ImageAttrib">
      <remarks>Basic type for a image attribute packet.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Attr.ImageAttrib.#ctor(Org.BouncyCastle.Bcpg.Attr.ImageAttrib.Format,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Attr.ImageAttrib</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Attr.ImageAttrib.#ctor(System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Attr.ImageAttrib</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Attr.ImageAttrib.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Attr.ImageAttrib</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.Attr.ImageAttrib.Encoding"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Attr.ImageAttrib.GetImageData"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Attr.ImageAttrib.Version"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Attr.ImageAttrib.Format"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.IStreamGenerator"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.IStreamGenerator.Close"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData">
      <remarks>Compressed data objects</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData.Algorithm">
      <summary>The algorithm used for compression</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData.GetDataStream">
      <summary>Return an uncompressed input stream which allows reading of the compressed data.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData.GetInputStream">
      <summary>Get the raw input stream contained in the object.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator">
      <remarks>Class for producing compressed data packets.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.#ctor(Org.BouncyCastle.Bcpg.CompressionAlgorithmTag)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.#ctor(Org.BouncyCastle.Bcpg.CompressionAlgorithmTag,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.Close"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.Open(System.IO.Stream)">
      <summary>
        <p>
            Return an output stream which will save the data being written to
            the compressed object.
            </p>
        <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
      </summary>
      <param name="outStr">Stream to be used for output.</param>
      <returns>A Stream for output of the compressed data.</returns>
      <exception cref="T:System.ArgumentNullException"></exception>
      <exception cref="T:System.InvalidOperationException"></exception>
      <exception cref="T:System.IO.IOException"></exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.Open(System.IO.Stream,System.Byte[])">
      <summary>
        <p>
            Return an output stream which will compress the data as it is written to it.
            The stream will be written out in chunks according to the size of the passed in buffer.
            </p>
        <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
        <p>
          <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.
            </p>
        <p>
          <b>Note</b>: using this may break compatibility with RFC 1991 compliant tools.
            Only recent OpenPGP implementations are capable of accepting these streams.
            </p>
      </summary>
      <param name="outStr">Stream to be used for output.</param>
      <param name="buffer">The buffer to use.</param>
      <returns>A Stream for output of the compressed data.</returns>
      <exception cref="T:System.ArgumentNullException"></exception>
      <exception cref="T:System.InvalidOperationException"></exception>
      <exception cref="T:System.IO.IOException"></exception>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException"></exception>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException">
      <summary>Thrown if the IV at the start of a data stream indicates the wrong key is being used.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedData"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedData.GetInputStream">
      <summary>Return the raw input stream for the data stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedData.IsIntegrityProtected">
      <summary>Return true if the message is integrity protected.</summary>
      <returns>True, if there is a modification detection code namespace associated
            with this stream.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedData.Verify">
      <summary>Note: This can only be called after the message has been read.</summary>
      <returns>True, if the message verifies, false otherwise</returns>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator">
      <remarks>Generator for encrypted objects.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Security.SecureRandom)">
      <summary>Existing SecureRandom constructor.</summary>
      <param name="encAlgorithm">The symmetric algorithm to use.</param>
      <param name="random">Source of randomness.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Security.SecureRandom,System.Boolean)">
      <summary>Base constructor.</summary>
      <param name="encAlgorithm">The symmetric algorithm to use.</param>
      <param name="random">Source of randomness.</param>
      <param name="oldFormat">PGP 2.6.x compatibility required.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,Org.BouncyCastle.Security.SecureRandom)">
      <summary>Creates a cipher stream which will have an integrity packet associated with it.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Add a public key encrypted session key to the encrypted object.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(System.Char[],Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>Add a PBE encryption method to the encrypted object.</summary>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethodRaw(System.Byte[],Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>Add a PBE encryption method to the encrypted object.</summary>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethodUtf8(System.Char[],Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>Add a PBE encryption method to the encrypted object.</summary>
      <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Close"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Byte[])">
      <summary>
        <p>
            Return an output stream which will encrypt the data as it is written to it.
            The stream will be written out in chunks according to the size of the passed in buffer.
            </p>
        <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
        <p>
          <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.
            </p>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Int64)">
      <summary>
        <p>
            Return an output stream which will encrypt the data as it is written to it.
            </p>
        <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList">
      <remarks>A holder for a list of PGP encryption method packets.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList.Count"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList.GetEncryptedDataObjects"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList.IsEmpty"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList.Item(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">
      <summary>Generic exception class for PGP encoding/decoding problems.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpExperimental"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpExperimental.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpExperimental</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags">
      <remarks>Key flag values for the KeyFlags subpacket.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags.CanCertify"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags.CanEncryptCommunications"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags.CanEncryptStorage"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags.CanSign"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags.MaybeShared"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags.MaybeSplit"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair">
      <remarks>
            General class to handle JCA key pairs and convert them into OpenPGP ones.
            <p>
            A word for the unwary, the KeyId for an OpenPGP public key is calculated from
            a hash that includes the time of creation, if you pass a different date to the
            constructor below with the same public private key pair the KeyIs will not be the
            same as for previous generations of the key, so ideally you only want to do
            this once.
            </p></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.#ctor(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
      <summary>Create a key pair from a PgpPrivateKey and a PgpPublicKey.</summary>
      <param name="pub">The public key.</param>
      <param name="priv">The private key.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair,System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.KeyId">
      <summary>The keyId associated with this key pair.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.PrivateKey"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.PublicKey"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRing"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator">
      <remarks>
            Generator for a PGP master and subkey ring.
            This class will generate both the secret and public key rings
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Create a new key ring generator.
            </summary>
      <param name="certificationLevel">The certification level for keys on this ring.</param>
      <param name="masterKey">The master key pair.</param>
      <param name="id">The id to be associated with the ring.</param>
      <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
      <param name="hashAlgorithm">The hash algorithm.</param>
      <param name="utf8PassPhrase">
            If true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </param>
      <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
      <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
      <param name="hashedPackets">Packets to be included in the certification hash.</param>
      <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
      <param name="rand">input secured random.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Byte[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Create a new key ring generator.
            </summary>
      <param name="certificationLevel">The certification level for keys on this ring.</param>
      <param name="masterKey">The master key pair.</param>
      <param name="id">The id to be associated with the ring.</param>
      <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
      <param name="hashAlgorithm">The hash algorithm.</param>
      <param name="rawPassPhrase">The passPhrase to be used to protect secret keys.</param>
      <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
      <param name="hashedPackets">Packets to be included in the certification hash.</param>
      <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
      <param name="rand">input secured random.</param>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Create a new key ring generator.
            </summary>
      <param name="certificationLevel">The certification level for keys on this ring.</param>
      <param name="masterKey">The master key pair.</param>
      <param name="id">The id to be associated with the ring.</param>
      <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
      <param name="hashAlgorithm">The hash algorithm.</param>
      <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
      <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
      <param name="hashedPackets">Packets to be included in the certification hash.</param>
      <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
      <param name="rand">input secured random.</param>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Create a new key ring generator.
            </summary>
      <param name="certificationLevel">The certification level for keys on this ring.</param>
      <param name="masterKey">The master key pair.</param>
      <param name="id">The id to be associated with the ring.</param>
      <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
      <param name="utf8PassPhrase">
            If true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </param>
      <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
      <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
      <param name="hashedPackets">Packets to be included in the certification hash.</param>
      <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
      <param name="rand">input secured random.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Byte[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Create a new key ring generator.
            </summary>
      <param name="certificationLevel">The certification level for keys on this ring.</param>
      <param name="masterKey">The master key pair.</param>
      <param name="id">The id to be associated with the ring.</param>
      <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
      <param name="rawPassPhrase">The passPhrase to be used to protect secret keys.</param>
      <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
      <param name="hashedPackets">Packets to be included in the certification hash.</param>
      <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
      <param name="rand">input secured random.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Create a new key ring generator.
            </summary>
      <param name="certificationLevel">The certification level for keys on this ring.</param>
      <param name="masterKey">The master key pair.</param>
      <param name="id">The id to be associated with the ring.</param>
      <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
      <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
      <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
      <param name="hashedPackets">Packets to be included in the certification hash.</param>
      <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
      <param name="rand">input secured random.</param>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair)">
      <summary>Add a subkey to the key ring to be generated with default certification.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>
            Add a subkey to the key ring to be generated with default certification.
            </summary>
      <param name="keyPair">The key pair.</param>
      <param name="hashAlgorithm">The hash algorithm.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>
            Add a signing subkey to the key ring to be generated with default certification and a primary key binding signature.
            </summary>
      <param name="keyPair">The key pair.</param>
      <param name="hashAlgorithm">The hash algorithm.</param>
      <param name="primaryKeyBindingHashAlgorithm">The primary-key binding hash algorithm.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector)">
      <summary>
            Add a subkey with specific hashed and unhashed packets associated with it and
            default certification using SHA-1.
            </summary>
      <param name="keyPair">Public/private key pair.</param>
      <param name="hashedPackets">Hashed packet values to be included in certification.</param>
      <param name="unhashedPackets">Unhashed packets values to be included in certification.</param>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException"></exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>
            Add a subkey with specific hashed and unhashed packets associated with it and
            default certification.
            </summary>
      <param name="keyPair">Public/private key pair.</param>
      <param name="hashedPackets">Hashed packet values to be included in certification.</param>
      <param name="unhashedPackets">Unhashed packets values to be included in certification.</param>
      <param name="hashAlgorithm">The hash algorithm.</param>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">exception adding subkey: </exception>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException"></exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>
            Add a signing subkey with specific hashed and unhashed packets associated with it and
            default certifications, including the primary-key binding signature.
            </summary>
      <param name="keyPair">Public/private key pair.</param>
      <param name="hashedPackets">Hashed packet values to be included in certification.</param>
      <param name="unhashedPackets">Unhashed packets values to be included in certification.</param>
      <param name="hashAlgorithm">The hash algorithm.</param>
      <param name="primaryKeyBindingHashAlgorithm">The primary-key binding hash algorithm.</param>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">exception adding subkey: </exception>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException"></exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.GeneratePublicKeyRing">
      <summary>Return the public key ring that corresponds to the secret key ring.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.GenerateSecretKeyRing">
      <summary>Return the secret key ring.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException">
      <summary>Thrown if the key checksum is invalid.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData">
      <summary>Class for processing literal data objects.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.Binary"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.Console">
      <summary>The special name indicating a "for your eyes only" packet.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.FileName">
      <summary>The file name that's associated with the data stream.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.Format">
      <summary>The format of the data stream - Binary or Text</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.GetDataStream">
      <summary>The input stream representing the data stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.GetInputStream">
      <summary>The raw input stream for the data stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.GetRawFileName"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.ModificationTime">
      <summary>The modification time for the file.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.Text"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.Utf8"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator">
      <remarks>Class for producing literal data packets.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.#ctor(System.Boolean)">
      <summary>
            Generates literal data objects in the old format.
            This is important if you need compatibility with PGP 2.6.x.
            </summary>
      <param name="oldFormat">If true, uses old format.</param>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Binary"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Close"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Console">
      <summary>The special name indicating a "for your eyes only" packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.IO.FileInfo)">
      <summary>
        <p>
            Open a literal data packet for the passed in <c>FileInfo</c> object, returning
            an output stream for saving the file contents.
            </p>
        <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
      </summary>
      <param name="outStr">The stream we want the packet in.</param>
      <param name="format">The format we are using.</param>
      <param name="file">The <c>FileInfo</c> object containg the packet details.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.DateTime,System.Byte[])">
      <summary>
        <p>
            Open a literal data packet, returning a stream to store the data inside the packet,
            as an indefinite length stream. The stream is written out as a series of partial
            packets with a chunk size determined by the size of the passed in buffer.
            </p>
        <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
        <p>
          <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.</p>
      </summary>
      <param name="outStr">The stream we want the packet in.</param>
      <param name="format">The format we are using.</param>
      <param name="name">The name of the 'file'.</param>
      <param name="modificationTime">The time of last modification we want stored.</param>
      <param name="buffer">The buffer to use for collecting data to put into chunks.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.Int64,System.DateTime)">
      <summary>
        <p>
            Open a literal data packet, returning a stream to store the data inside the packet.
            </p>
        <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
      </summary>
      <param name="outStr">The stream we want the packet in.</param>
      <param name="format">The format we are using.</param>
      <param name="name">The name of the 'file'.</param>
      <param name="length">The length of the data we will write.</param>
      <param name="modificationTime">The time of last modification we want stored.</param>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Text"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Utf8"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpMarker">
      <remarks>
            A PGP marker packet - in general these should be ignored other than where
            the idea is to preserve the original input stream.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpMarker.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpMarker</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpObject"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory">
      <remarks>
            General class for reading a PGP object stream.
            <p>
            Note: if this class finds a PgpPublicKey or a PgpSecretKey it
            will create a PgpPublicKeyRing, or a PgpSecretKeyRing for each
            key found. If all you are trying to do is read a key ring file use
            either PgpPublicKeyRingBundle or PgpSecretKeyRingBundle.</p></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory.AllPgpObjects">
      <summary>
            Return all available objects in a list.
            </summary>
      <returns>An <c>IList</c> containing all objects from this factory, in order.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory.FilterPgpObjects``1">
      <summary>
            Read all available objects, returning only those that are assignable to the specified type.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> containing the filtered objects from this factory, in order.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory.NextPgpObject">
      <summary>Return the next object in the stream, or null if the end is reached.</summary>
      <exception cref="T:System.IO.IOException">On a parse error</exception>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature">
      <remarks>A one pass signature object.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.HashAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.InitVerify(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Initialise the signature object for verification.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.KeyAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.KeyId"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.SignatureType"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.Update(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.Update(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.Update(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.Verify(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Verify the calculated signature against the passed in PgpSignature.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList">
      <remarks>Holder for a list of PgpOnePassSignature objects.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList.#ctor(Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList.#ctor(Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList.Count"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList.IsEmpty"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList.Item(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpPad">
      <remarks>Padding functions.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPad.PadSessionData(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPad.PadSessionData(System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPad.UnpadSessionData(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData">
      <remarks>A password based encryption object.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStream(System.Char[])">
      <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStreamRaw(System.Byte[])">
      <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStreamUtf8(System.Char[])">
      <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
      <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData.GetInputStream">
      <summary>Return the raw input stream for the data stream.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey">
      <remarks>General class to contain a private key for use with other OpenPGP objects.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey.#ctor(System.Int64,Org.BouncyCastle.Bcpg.PublicKeyPacket,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Create a PgpPrivateKey from a keyID, the associated public data packet, and a regular private key.
            </summary>
      <param name="keyID">ID of the corresponding public key.</param>
      <param name="publicKeyPacket">the public key data packet to be associated with this private key.</param>
      <param name="privateKey">the private key data packet to be associated with this private key.</param>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey.Key">
      <summary>The contained private key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey.KeyId">
      <summary>The keyId associated with the contained private key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey.PublicKeyPacket">
      <summary>The public key packet associated with this private key, if available.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey">
      <remarks>General class to handle a PGP public key object.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.DateTime)">
      <summary>
            Create a PgpPublicKey from the passed in lightweight one.
            </summary>
      <param name="algorithm">Asymmetric algorithm type representing the public key.</param>
      <param name="pubKey">Actual public key to associate.</param>
      <param name="time">Date of creation.</param>
      <remarks>
            Note: the time passed in affects the value of the key's keyId, so you probably only want
            to do this once for a lightweight key, or make sure you keep track of the time you used.
            </remarks>
      <exception cref="T:System.ArgumentException">If <c>pubKey</c> is not public.</exception>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">On key creation problem.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.#ctor(Org.BouncyCastle.Bcpg.PublicKeyPacket)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Add a revocation or some other key certification to a key.</summary>
      <param name="key">The key the revocation is to be added to.</param>
      <param name="certification">The key signature to be added.</param>
      <returns>The new changed public key object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Add a certification for the given UserAttributeSubpackets to the given public key.</summary>
      <param name="key">The key the certification is to be added to.</param>
      <param name="userAttributes">The attributes the certification is associated with.</param>
      <param name="certification">The new certification.</param>
      <returns>The re-certified key.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Add a certification for an id to the given public key.</summary>
      <param name="key">The key the certification is to be added to.</param>
      <param name="id">The ID the certification is associated with.</param>
      <param name="certification">The new certification.</param>
      <returns>The re-certified key.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.Algorithm">
      <summary>The algorithm code associated with the public key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.BitStrength">
      <summary>The strength of the key in bits.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.CalculateFingerprint(Org.BouncyCastle.Bcpg.PublicKeyPacket)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.CreationTime">
      <summary>The creation time of this key.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.Encode(System.IO.Stream,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetFingerprint">
      <summary>The fingerprint of the public key</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetKey">
      <summary>The public key contained in the object.</summary>
      <returns>A lightweight public key.</returns>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">If the key algorithm is not recognised.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetKeySignatures"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetRawUserIds">
      <summary>Return any userIDs associated with the key in raw byte form.</summary>
      <returns>An <c>IEnumerable</c> of <c>byte[]</c>.</returns>
      <remarks>No attempt is made to convert the IDs into strings.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignatures">
      <summary>Allows enumeration of all signatures/certifications associated with this key.</summary>
      <returns>An <c>IEnumerable</c> with all signatures/certifications.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForId(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForId(System.String)">
      <summary>Allows enumeration of any signatures associated with the passed in id.</summary>
      <param name="id">The ID to be matched.</param>
      <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForKeyID(System.Int64)">
      <summary>Return any signatures associated with the passed in key identifier keyID.</summary>
      <param name="keyID">the key id to be matched.</param>
      <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects issued by the key with keyID.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForUserAttribute(Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
      <summary>Allows enumeration of signatures associated with the passed in user attributes.</summary>
      <param name="userAttributes">The vector of user attributes to be matched.</param>
      <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesOfType(System.Int32)">
      <summary>Allows enumeration of signatures of the passed in type that are on this key.</summary>
      <param name="signatureType">The type of the signature to be returned.</param>
      <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetTrustData">
      <summary>Return the trust data associated with the public key, if present.</summary>
      <returns>A byte array with trust data, null otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetUserAttributes">
      <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
      <returns>An <c>IEnumerable</c> of <c>PgpUserAttributeSubpacketVector</c> objects.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetUserIds">
      <summary>Allows enumeration of any user IDs associated with the key.</summary>
      <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetValidSeconds">
      <summary>The number of valid seconds from creation time - zero means no expiry.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.IsEncryptionKey">
      <summary>
            Check if this key has an algorithm type that makes it suitable to use for encryption.
            </summary>
      <returns>
        <c>true</c> if this key algorithm is suitable for encryption.
            </returns>
      <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.IsMasterKey">
      <summary>True, if this could be a master key.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.IsRevoked">
      <summary>Check whether this (sub)key has a revocation signature on it.</summary>
      <returns>True, if this (sub)key has been revoked.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.Join(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.Boolean,System.Boolean)">
      <summary>
            Merge the given local public key with another, potentially fresher copy. The resulting public key
            contains the sum of both keys' user-ids and signatures.
            </summary>
      <param name="key">local public key.</param>
      <param name="copy">copy of the public key (e.g. from a key server).</param>
      <param name="joinTrustPackets">if true, trust packets from the copy are copied over into the resulting key.
            </param>
      <param name="allowSubkeySigsOnNonSubkey">if true, subkey signatures on the copy will be present in the
            merged key, even if key was not a subkey before.</param>
      <returns>joined key.</returns>
      <remarks>
            If joinTrustPackets is set to true and the copy carries a trust packet, the joined key will copy the
            trust-packet from the copy. Otherwise, it will carry the trust packet of the local key.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.KeyId">
      <summary>The key ID associated with the public key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.PublicKeyPacket"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Remove a certification from the key.</summary>
      <param name="key">The key the certifications are to be removed from.</param>
      <param name="certification">The certfication to be removed.</param>
      <returns>The modified key, null if the certification was not found.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
      <summary>
            Remove any certifications associated with a user attribute subpacket on a key.
            </summary>
      <param name="key">The key the certifications are to be removed from.</param>
      <param name="userAttributes">The attributes to be removed.</param>
      <returns>
            The re-certified key, or null if the user attribute subpacket was not found on the key.
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Remove a certification associated with a given user attributes on a key.</summary>
      <param name="key">The key the certifications are to be removed from.</param>
      <param name="userAttributes">The user attributes that the certfication is to be removed from.</param>
      <param name="certification">The certification to be removed.</param>
      <returns>The re-certified key, or null if the certification was not found.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.Byte[])">
      <summary>Remove any certifications associated with a given ID on a key.</summary>
      <param name="key">The key the certifications are to be removed from.</param>
      <param name="rawId">The ID that is to be removed in raw byte form.</param>
      <returns>The re-certified key, or null if the ID was not found on the key.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.Byte[],Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Remove a certification associated with a given ID on a key.</summary>
      <param name="key">The key the certifications are to be removed from.</param>
      <param name="id">The ID that the certfication is to be removed from (in its raw byte form).</param>
      <param name="certification">The certfication to be removed.</param>
      <returns>The re-certified key, or null if the certification was not found.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.String)">
      <summary>Remove any certifications associated with a given ID on a key.</summary>
      <param name="key">The key the certifications are to be removed from.</param>
      <param name="id">The ID that is to be removed.</param>
      <returns>The re-certified key, or null if the ID was not found on the key.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>Remove a certification associated with a given ID on a key.</summary>
      <param name="key">The key the certifications are to be removed from.</param>
      <param name="id">The ID that the certfication is to be removed from.</param>
      <param name="certification">The certfication to be removed.</param>
      <returns>The re-certified key, or null if the certification was not found.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.Version">
      <summary>The version of this key.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData">
      <remarks>A public key encrypted data object.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetDataStream(Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
      <summary>Return the decrypted data stream for the packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetSymmetricAlgorithm(Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
      <summary>
            Return the algorithm code for the symmetric algorithm used to encrypt the data.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.KeyId">
      <summary>The key ID for the key used to encrypt the data.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing">
      <remarks>
            Class to hold a single master public key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpPublicKeyRingBundle</c> class.
            </p></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey">
      <summary>Return the first public key in the ring.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey(System.Int64)">
      <summary>Return the public key referred to by the passed in key ID if it is present.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKeys">
      <summary>Allows enumeration of all the public keys.</summary>
      <returns>An <c>IEnumerable</c> of <c>PgpPublicKey</c> objects.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.InsertPublicKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>
            Returns a new key ring with the public key passed in either added or
            replacing an existing one.
            </summary>
      <param name="pubRing">The public key ring to be modified.</param>
      <param name="pubKey">The public key to be inserted.</param>
      <returns>A new <c>PgpPublicKeyRing</c></returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.Join(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.Join(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing,System.Boolean,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.RemovePublicKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Returns a new key ring with the public key passed in removed from the key ring.</summary>
      <param name="pubRing">The public key ring to be modified.</param>
      <param name="pubKey">The public key to be removed.</param>
      <returns>A new <c>PgpPublicKeyRing</c>, or null if pubKey is not found.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle">
      <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire public key file in one hit this is the class for you.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Bcpg.OpenPgp.PgpObject})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.#ctor(System.IO.Stream)">
      <summary>Build a PgpPublicKeyRingBundle from the passed in input stream.</summary>
      <param name="inputStream">Input stream containing data.</param>
      <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpPublicKeyRing.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.AddPublicKeyRing(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
      <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in public key ring.
            </summary>
      <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be added to.</param>
      <param name="publicKeyRing">The key ring to be added.</param>
      <returns>A new <c>PgpPublicKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
      <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Contains(System.Int64)">
      <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
      <param name="keyID">key ID to look for.</param>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Count">
      <summary>Return the number of key rings in this collection.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings">
      <summary>Allow enumeration of the public key rings making up this collection.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String)">
      <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
      <param name="userId">The user ID to be matched.</param>
      <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
      <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
      <param name="userId">The user ID to be matched.</param>
      <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
      <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
      <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
      <param name="userID">The user ID to be matched.</param>
      <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
      <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
      <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKey(System.Int64)">
      <summary>Return the PGP public key associated with the given key id.</summary>
      <param name="keyId">The ID of the public key to return.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKeyRing(System.Int64)">
      <summary>Return the public key ring which contains the key referred to by keyId</summary>
      <param name="keyId">key ID to match against</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.RemovePublicKeyRing(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
      <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in public key ring removed.
            </summary>
      <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be removed from.</param>
      <param name="publicKeyRing">The key ring to be removed.</param>
      <returns>A new <c>PgpPublicKeyRingBundle</c> not containing the passed in key ring.</returns>
      <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey">
      <remarks>General class to handle a PGP secret key object.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
      <remarks>
            If utf8PassPhrase is true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Byte[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
      <remarks>
            If utf8PassPhrase is true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Byte[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.DateTime,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.DateTime,System.String,Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPassword(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey,System.Char[],System.Char[],Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
      <param name="key">The PgpSecretKey to be copied.</param>
      <param name="oldPassPhrase">The current password for the key.</param>
      <param name="newPassPhrase">The new password for the key.</param>
      <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
      <param name="rand">Source of randomness.</param>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPasswordRaw(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey,System.Byte[],System.Byte[],Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
      <param name="key">The PgpSecretKey to be copied.</param>
      <param name="rawOldPassPhrase">The current password for the key.</param>
      <param name="rawNewPassPhrase">The new password for the key.</param>
      <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
      <param name="rand">Source of randomness.</param>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPasswordUtf8(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey,System.Char[],System.Char[],Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
      <param name="key">The PgpSecretKey to be copied.</param>
      <param name="oldPassPhrase">The current password for the key.</param>
      <param name="newPassPhrase">The new password for the key.</param>
      <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
      <param name="rand">Source of randomness.</param>
      <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKey(System.Char[])">
      <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKeyRaw(System.Byte[])">
      <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKeyUtf8(System.Char[])">
      <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
      <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.GetFingerprint">
      <summary>The fingerprint of the public key associated with this key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.IsMasterKey">
      <summary>True, if this is a master key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.IsPrivateKeyEmpty">
      <summary>Detect if the Secret Key's Private Key is empty or not</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.IsSigningKey">
      <summary>
            Check if this key has an algorithm type that makes it suitable to use for signing.
            </summary>
      <returns>
        <c>true</c> if this key algorithm is suitable for use with signing.
            </returns>
      <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.KeyEncryptionAlgorithm">
      <summary>The algorithm the key is encrypted with.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.KeyId">
      <summary>The key ID of the public key associated with this key.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExpr(System.IO.Stream,System.Char[])">
      <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExpr(System.IO.Stream,System.Char[],Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprRaw(System.IO.Stream,System.Byte[])">
      <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprRaw(System.IO.Stream,System.Byte[],Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprUtf8(System.IO.Stream,System.Char[])">
      <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
      <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprUtf8(System.IO.Stream,System.Char[],Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
      <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.PublicKey">
      <summary>The public key associated with this key.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ReplacePublicKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Replace the passed the public key on the passed in secret key.</summary>
      <param name="secretKey">Secret key to change.</param>
      <param name="publicKey">New public key.</param>
      <returns>A new secret key.</returns>
      <exception cref="T:System.ArgumentException">If KeyId's do not match.</exception>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.S2k">
      <summary>Return the S2K used to process this key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.S2kUsage">
      <summary>Return the S2K usage associated with this key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.UserAttributes">
      <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
      <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.UserIds">
      <summary>Allows enumeration of any user IDs associated with the key.</summary>
      <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing">
      <remarks>
            Class to hold a single master secret key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpSecretKeyRingBundle</c> class.
            </p></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.CopyWithNewPassword(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,System.Char[],System.Char[],Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Return a copy of the passed in secret key ring, with the master key and sub keys encrypted
            using a new password and the passed in algorithm.
            </summary>
      <param name="ring">The <c>PgpSecretKeyRing</c> to be copied.</param>
      <param name="oldPassPhrase">The current password for key.</param>
      <param name="newPassPhrase">The new password for the key.</param>
      <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
      <param name="rand">Source of randomness.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetExtraPublicKeys">
      <summary>
            Return an iterator of the public keys in the secret key ring that
            have no matching private key. At the moment only personal certificate data
            appears in this fashion.
            </summary>
      <returns>An <c>IEnumerable</c> of unattached, or extra, public keys.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetKeysWithSignaturesBy(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetPublicKey">
      <summary>Return the public key for the master key.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetPublicKeys"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKey">
      <summary>Return the master private key.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKey(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKeys">
      <summary>Allows enumeration of the secret keys.</summary>
      <returns>An <c>IEnumerable</c> of <c>PgpSecretKey</c> objects.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.InsertSecretKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey)">
      <summary>
            Returns a new key ring with the secret key passed in either added or
            replacing an existing one with the same key ID.
            </summary>
      <param name="secRing">The secret key ring to be modified.</param>
      <param name="secKey">The secret key to be inserted.</param>
      <returns>A new <c>PgpSecretKeyRing</c></returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.RemoveSecretKey(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey)">
      <summary>Returns a new key ring with the secret key passed in removed from the key ring.</summary>
      <param name="secRing">The secret key ring to be modified.</param>
      <param name="secKey">The secret key to be removed.</param>
      <returns>A new <c>PgpSecretKeyRing</c>, or null if secKey is not found.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.ReplacePublicKeys(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
      <summary>
            Replace the public key set on the secret ring with the corresponding key off the public ring.
            </summary>
      <param name="secretRing">Secret ring to be changed.</param>
      <param name="publicRing">Public ring containing the new public key set.</param>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle">
      <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire secret key file in one hit this is the class for you.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Bcpg.OpenPgp.PgpObject})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.#ctor(System.IO.Stream)">
      <summary>Build a PgpSecretKeyRingBundle from the passed in input stream.</summary>
      <param name="inputStream">Input stream containing data.</param>
      <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpSecretKeyRing.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.AddSecretKeyRing(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing)">
      <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in secret key ring.
            </summary>
      <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be added to.</param>
      <param name="secretKeyRing">The key ring to be added.</param>
      <returns>A new <c>PgpSecretKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
      <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Contains(System.Int64)">
      <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
      <param name="keyID">key ID to look for.</param>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Count">
      <summary>Return the number of rings in this collection.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings">
      <summary>Allow enumeration of the secret key rings making up this collection.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String)">
      <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
      <param name="userId">The user ID to be matched.</param>
      <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
      <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
      <param name="userId">The user ID to be matched.</param>
      <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
      <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
      <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
      <param name="userID">The user ID to be matched.</param>
      <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
      <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
      <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKey(System.Int64)">
      <summary>Return the PGP secret key associated with the given key id.</summary>
      <param name="keyId">The ID of the secret key to return.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKeyRing(System.Int64)">
      <summary>Return the secret key ring which contains the key referred to by keyId</summary>
      <param name="keyId">The ID of the secret key</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.RemoveSecretKeyRing(Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing)">
      <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in secret key ring removed.
            </summary>
      <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be removed from.</param>
      <param name="secretKeyRing">The key ring to be removed.</param>
      <returns>A new <c>PgpSecretKeyRingBundle</c> not containing the passed in key ring.</returns>
      <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature">
      <remarks>A PGP signature object.</remarks>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.BinaryDocument"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.CanonicalTextDocument"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.CasualCertification"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.CertificationRevocation"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.CreationTime">
      <summary>The creation time of this signature.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.DefaultCertification"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.DirectKey"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Encode(System.IO.Stream,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.GetDigestPrefix">
      <summary>Return the digest prefix of the signature.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.GetHashedSubPackets"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.GetSignature"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.GetSignatureTrailer"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.GetUnhashedSubPackets"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.HashAlgorithm">
      <summary>The hash algorithm associated with this signature.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.HasSubpackets">
      <summary>
            Return true if the signature has either hashed or unhashed subpackets.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.InitVerify(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.IsCertification">
      <summary>Return true if this signature represents a certification.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.IsCertification(System.Int32)">
      <summary>
            Return true if the passed in signature type represents a certification, false if the signature type is not.
            </summary>
      <param name="signatureType"></param>
      <returns>true if signatureType is a certification, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.IsSignatureEncodingEqual(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Join(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.KeyAlgorithm">
      <summary>The key algorithm associated with this signature.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.KeyId">
      <summary>The ID of the key that created the signature.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.KeyRevocation"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.NoCertification"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.PositiveCertification"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.PrimaryKeyBinding"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.SignatureType"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.StandAlone"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.SubkeyBinding"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.SubkeyRevocation"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.ThirdPartyConfirmation"></member>
    <member name="F:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Timestamp"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Update(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Update(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Update(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Verify"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Verify a key certification, such as revocation, for the passed in key.</summary>
      <param name="pubKey">The key we are checking.</param>
      <returns>True, if the certification is valid, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Verify a certification for the passed in key against the passed in master key.</summary>
      <param name="masterKey">The key we are verifying against.</param>
      <param name="pubKey">The key we are verifying.</param>
      <returns>True, if the certification is valid, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in user attributes.
            </summary>
      <param name="userAttributes">User attributes the key was stored under.</param>
      <param name="key">The key to be verified.</param>
      <returns>True, if the signature matches, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in ID.
            </summary>
      <param name="id">ID the key was stored under.</param>
      <param name="key">The key to be verified.</param>
      <returns>True, if the signature matches, false otherwise.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Version">
      <summary>The OpenPGP version number for this signature.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator">
      <remarks>Generator for PGP signatures.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>Create a generator for the passed in keyAlgorithm and hashAlgorithm codes.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.Generate">
      <summary>Return a signature object containing the current signature state.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Generate a certification, such as a revocation, for the passed in key.</summary>
      <param name="pubKey">The key we are certifying.</param>
      <returns>The certification.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Generate a certification for the passed in key against the passed in master key.</summary>
      <param name="masterKey">The key we are certifying against.</param>
      <param name="pubKey">The key we are certifying.</param>
      <returns>The certification.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Generate a certification for the passed in userAttributes.</summary>
      <param name="userAttributes">The ID we are certifying against the public key.</param>
      <param name="pubKey">The key we are certifying against the ID.</param>
      <returns>The certification.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(System.String,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
      <summary>Generate a certification for the passed in ID and key.</summary>
      <param name="id">The ID we are certifying against the public key.</param>
      <param name="pubKey">The key we are certifying against the ID.</param>
      <returns>The certification.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateOnePassVersion(System.Boolean)">
      <summary>Return the one pass header associated with the current signature.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
      <summary>Initialise the generator for signing.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey,Org.BouncyCastle.Security.SecureRandom)">
      <summary>Initialise the generator for signing.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.SetHashedSubpackets(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.SetUnhashedSubpackets(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.Update(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.Update(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.Update(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList">
      <remarks>A list of PGP signatures - normally in the signature block after literal data.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList.#ctor(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList.#ctor(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList.Count"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList.IsEmpty"></member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList.Item(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator">
      <remarks>Generator for signature subpackets.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.#ctor">
      <summary>
            Base constructor, creates an empty generator.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.#ctor(Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector)">
      <summary>
             Constructor for pre-initialising the generator from an existing one.
             </summary>
      <param name="sigSubV">
             sigSubV an initial set of subpackets.
             </param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.AddCustomSubpacket(Org.BouncyCastle.Bcpg.SignatureSubpacket)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.AddEmbeddedSignature(System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.AddIntendedRecipientFingerprint(System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.AddNotationData(System.Boolean,System.Boolean,System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.AddPolicyUrl(System.Boolean,System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.AddRevocationKey(System.Boolean,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.AddSignerUserId(System.Boolean,System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.Generate"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.GetSubpackets(Org.BouncyCastle.Bcpg.SignatureSubpacketTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.HasSubpacket(Org.BouncyCastle.Bcpg.SignatureSubpacketTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.RemovePacket(Org.BouncyCastle.Bcpg.SignatureSubpacket)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetEmbeddedSignature(System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSignature)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetExportable(System.Boolean,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetFeature(System.Boolean,System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetIssuerFingerprint(System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetIssuerFingerprint(System.Boolean,Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetIssuerKeyID(System.Boolean,System.Int64)">
      <summary>
            Sets issuer key sub packet
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetKeyExpirationTime(System.Boolean,System.Int64)">
      <summary>
            Set the number of seconds a key is valid for after the time of its creation.
            A value of zero means the key never expires.
            </summary>
      <param name="isCritical">True, if should be treated as critical, false otherwise.</param>
      <param name="seconds">The number of seconds the key is valid, or zero if no expiry.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetKeyFlags(System.Boolean,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetNotationData(System.Boolean,System.Boolean,System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetPreferredAeadAlgorithms(System.Boolean,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetPreferredCompressionAlgorithms(System.Boolean,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetPreferredHashAlgorithms(System.Boolean,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetPreferredSymmetricAlgorithms(System.Boolean,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetPrimaryUserId(System.Boolean,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetRevocable(System.Boolean,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetRevocationKey(System.Boolean,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetRevocationReason(System.Boolean,Org.BouncyCastle.Bcpg.RevocationReasonTag,System.String)">
      <summary>
            Sets revocation reason sub packet
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignatureCreationTime(System.Boolean,System.DateTime)">
      <summary>
            Set the creation time for the signature.
            <p>
            Note: this overrides the generation of a creation time when the signature
            is generated.</p></summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignatureExpirationTime(System.Boolean,System.Int64)">
      <summary>
            Set the number of seconds a signature is valid for after the time of its creation.
            A value of zero means the signature never expires.
            </summary>
      <param name="isCritical">True, if should be treated as critical, false otherwise.</param>
      <param name="seconds">The number of seconds the signature is valid, or zero if no expiry.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignatureTarget(System.Boolean,System.Int32,System.Int32,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignerUserId(System.Boolean,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignerUserId(System.Boolean,System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetTrust(System.Boolean,System.Int32,System.Int32)">
      <summary>
            Add a TrustSignature packet to the signature. The values for depth and trust are largely
            installation dependent but there are some guidelines in RFC 4880 - 5.2.3.13.
            </summary>
      <param name="isCritical">true if the packet is critical.</param>
      <param name="depth">depth level.</param>
      <param name="trustAmount">trust amount.</param>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector">
      <remarks>Container for a list of signature subpackets.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.Count">
      <summary>Return the number of packets this vector contains.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.FromSubpackets(Org.BouncyCastle.Bcpg.SignatureSubpacket[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetCriticalTags"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetEmbeddedSignatures">
      <exception cref="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpException" />
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetExportable"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetFeatures"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetIntendedRecipientFingerprint"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetIntendedRecipientFingerprints"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetIssuerFingerprint"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetIssuerKeyId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetKeyExpirationTime">
      <summary>
            Return the number of seconds a key is valid for after its creation date.
            A value of zero means the key never expires.
            </summary>
      <returns>Seconds a signature is valid for.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetKeyFlags"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetNotationDataOccurrences"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetNotationDataOccurrences(System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetPolicyUrl"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetPolicyUrls"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetPreferredAeadAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetPreferredCompressionAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetPreferredHashAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetPreferredSymmetricAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetRegularExpression"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetRegularExpressions"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetRevocable"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetRevocationKeys"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetRevocationReason"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSignatureCreationTime"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSignatureExpirationTime">
      <summary>
            Return the number of seconds a signature is valid for after its creation date.
            A value of zero means the signature never expires.
            </summary>
      <returns>Seconds a signature is valid for.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSignatureTarget"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSignerUserId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSubpacket(Org.BouncyCastle.Bcpg.SignatureSubpacketTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSubpackets(Org.BouncyCastle.Bcpg.SignatureSubpacketTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetTrust"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.HasSignatureCreationTime"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.HasSignatureExpirationTime"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.HasSubpacket(Org.BouncyCastle.Bcpg.SignatureSubpacketTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.IsExportable"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.IsPrimaryUserId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.IsRevocable"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.ToArray"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector">
      <remarks>Container for a list of user attribute subpackets.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector.FromSubpackets(Org.BouncyCastle.Bcpg.UserAttributeSubpacket[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector.GetImageAttribute"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector.GetSubpacket(Org.BouncyCastle.Bcpg.UserAttributeSubpacketTag)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVectorGenerator"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVectorGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVectorGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVectorGenerator.Generate"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVectorGenerator.SetImageAttribute(Org.BouncyCastle.Bcpg.Attr.ImageAttrib.Format,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities">
      <remarks>Basic utility class.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.DsaSigToMpi(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetCurveName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetDecoderStream(System.IO.Stream)">
      <summary>
            Return either an ArmoredInputStream or a BcpgInputStream based on whether
            the initial characters of the stream are binary PGP encodings or not.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetDigestIDForName(System.String)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetDigestName(Org.BouncyCastle.Bcpg.HashAlgorithmTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetKeySize(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetSignatureName(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetSymmetricCipherName(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.MakeKey(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhrase(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.S2k,System.Char[])">
      <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhraseRaw(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.S2k,System.Byte[])">
      <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhraseUtf8(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Bcpg.S2k,System.Char[])">
      <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.MakeRandomKey(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.RsaSigToMpi(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo)">
      <summary>Write out the passed in file as a literal data packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo,System.Byte[])">
      <summary>Write out the passed in file as a literal data packet in partial packet format.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator">
      <remarks>Generator for old style PGP V3 Signatures.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
      <summary>Create a generator for the passed in keyAlgorithm and hashAlgorithm codes.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.Generate">
      <summary>Return a V3 signature object containing the current signature state.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.GenerateOnePassVersion(System.Boolean)">
      <summary>Return the one pass header associated with the current signature.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.InitSign(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
      <summary>Initialise the generator for signing.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.InitSign(System.Int32,Org.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey,Org.BouncyCastle.Security.SecureRandom)">
      <summary>Initialise the generator for signing.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.Update(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.Update(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.Update(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.Rfc6637Utilities"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.Rfc6637Utilities.CreateKey(Org.BouncyCastle.Bcpg.PublicKeyPacket,Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.Rfc6637Utilities.CreateKey(Org.BouncyCastle.Bcpg.PublicKeyPacket,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.Rfc6637Utilities.CreateUserKeyingMaterial(Org.BouncyCastle.Bcpg.PublicKeyPacket)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.Rfc6637Utilities.GetAgreementAlgorithm(Org.BouncyCastle.Bcpg.PublicKeyPacket)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.Rfc6637Utilities.GetKeyEncryptionOID(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag)"></member>
    <member name="M:Org.BouncyCastle.Bcpg.OpenPgp.Rfc6637Utilities.GetKeyLength(Org.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.OpenPgp.SXprUtilities"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.EmbeddedSignature"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.EmbeddedSignature.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.EmbeddedSignature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.Exportable"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Exportable.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.Exportable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Exportable.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.Exportable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Exportable.IsExportable"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.Features"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Features.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.Features</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Features.#ctor(System.Boolean,System.Byte)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.Features</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Features.#ctor(System.Boolean,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.Features</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.Features.FEATURE_AEAD_ENCRYPTED_DATA"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.Features.FEATURE_MODIFICATION_DETECTION"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.Features.FEATURE_VERSION_5_PUBLIC_KEY"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Features.SupportsFeature(System.Byte)"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.Features.SupportsModificationDetection"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.IntendedRecipientFingerprint"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IntendedRecipientFingerprint.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.IntendedRecipientFingerprint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IntendedRecipientFingerprint.#ctor(System.Boolean,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.IntendedRecipientFingerprint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IntendedRecipientFingerprint.GetFingerprint"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.IntendedRecipientFingerprint.KeyVersion"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.IssuerFingerprint"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IssuerFingerprint.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.IssuerFingerprint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IssuerFingerprint.#ctor(System.Boolean,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.IssuerFingerprint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IssuerFingerprint.GetFingerprint"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.IssuerFingerprint.KeyVersion"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.IssuerKeyId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IssuerKeyId.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.IssuerKeyId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IssuerKeyId.#ctor(System.Boolean,System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.IssuerKeyId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.IssuerKeyId.KeyId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.IssuerKeyId.KeyIdToBytes(System.Int64)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime.#ctor(System.Boolean,System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime.Time"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime.TimeToBytes(System.Int64)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.KeyFlags"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.KeyFlags.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.KeyFlags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.KeyFlags.#ctor(System.Boolean,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.KeyFlags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.KeyFlags.Authentication"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.KeyFlags.CertifyOther"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.KeyFlags.EncryptComms"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.KeyFlags.EncryptStorage"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.KeyFlags.Flags">
      <summary>
            Return the flag values contained in the first 4 octets (note: at the moment
            the standard only uses the first one).
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.KeyFlags.Shared"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.KeyFlags.SignData"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.KeyFlags.Split"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.NotationData"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.NotationData.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.NotationData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.NotationData.#ctor(System.Boolean,System.Boolean,System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.NotationData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.NotationData.GetNotationName"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.NotationData.GetNotationValue"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.NotationData.GetNotationValueBytes"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.NotationData.HeaderFlagLength"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.NotationData.HeaderNameLength"></member>
    <member name="F:Org.BouncyCastle.Bcpg.Sig.NotationData.HeaderValueLength"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.NotationData.IsHumanReadable"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.PolicyUrl"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PolicyUrl.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.PolicyUrl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PolicyUrl.#ctor(System.Boolean,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.PolicyUrl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PolicyUrl.GetRawUrl"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.PolicyUrl.Url"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.PreferredAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PreferredAlgorithms.#ctor(Org.BouncyCastle.Bcpg.SignatureSubpacketTag,System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.PreferredAlgorithms</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PreferredAlgorithms.#ctor(Org.BouncyCastle.Bcpg.SignatureSubpacketTag,System.Boolean,System.Int32[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.PreferredAlgorithms</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PreferredAlgorithms.GetPreferences"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.PrimaryUserId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PrimaryUserId.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.PrimaryUserId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PrimaryUserId.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.PrimaryUserId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.PrimaryUserId.IsPrimaryUserId"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.RegularExpression"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.RegularExpression.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.RegularExpression</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.RegularExpression.#ctor(System.Boolean,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.RegularExpression</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.RegularExpression.GetRawRegex"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.RegularExpression.Regex"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.Revocable"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Revocable.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.Revocable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Revocable.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.Revocable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.Revocable.IsRevocable"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.SignatureCreationTime"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureCreationTime.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignatureCreationTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureCreationTime.#ctor(System.Boolean,System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignatureCreationTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureCreationTime.GetTime"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureCreationTime.TimeToBytes(System.DateTime)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime.#ctor(System.Boolean,System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime.Time"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime.TimeToBytes(System.Int64)"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.SignatureTarget"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureTarget.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignatureTarget</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureTarget.#ctor(System.Boolean,System.Int32,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignatureTarget</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignatureTarget.GetHashData"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.SignatureTarget.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.SignatureTarget.PublicKeyAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.SignerUserId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignerUserId.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignerUserId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignerUserId.#ctor(System.Boolean,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.SignerUserId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignerUserId.GetId"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.SignerUserId.GetRawId"></member>
    <member name="T:Org.BouncyCastle.Bcpg.Sig.TrustSignature"></member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.TrustSignature.#ctor(System.Boolean,System.Boolean,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.TrustSignature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.Sig.TrustSignature.#ctor(System.Boolean,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Bcpg.Sig.TrustSignature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.TrustSignature.Depth"></member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.TrustSignature.TrustAmount"></member>
    <member name="T:Org.BouncyCastle.Cmp.CertificateConfirmationContent"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.#ctor(Org.BouncyCastle.Asn1.Cmp.CertConfirmContent)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateConfirmationContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.#ctor(Org.BouncyCastle.Asn1.Cmp.CertConfirmContent,Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateConfirmationContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.#ctor(Org.BouncyCastle.Asn1.Cmp.CertConfirmContent,Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateConfirmationContent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.FromPkiBody(Org.BouncyCastle.Asn1.Cmp.PkiBody)"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.FromPkiBody(Org.BouncyCastle.Asn1.Cmp.PkiBody,Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder)"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.GetStatusMessages"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.IsCertificateConfirmationContent(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContent.ToAsn1Structure"></member>
    <member name="T:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder.#ctor(Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder.#ctor(Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder.AddAcceptedCertificate(Org.BouncyCastle.Asn1.Cmp.CmpCertificate,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.DerInteger)"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder.AddAcceptedCertificate(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Asn1.DerInteger)"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder.AddAcceptedCertificate(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateConfirmationContentBuilder.Build"></member>
    <member name="T:Org.BouncyCastle.Cmp.CertificateStatus"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateStatus.#ctor(Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder,Org.BouncyCastle.Asn1.Cmp.CertStatus)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateStatus.#ctor(Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder,Org.BouncyCastle.Asn1.Cmp.CertStatus)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CertificateStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.CertificateStatus.CertReqID"></member>
    <member name="P:Org.BouncyCastle.Cmp.CertificateStatus.CertRequestID"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateStatus.IsVerified(Org.BouncyCastle.Asn1.Cmp.CmpCertificate,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Cmp.CertificateStatus.IsVerified(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="P:Org.BouncyCastle.Cmp.CertificateStatus.StatusInfo"></member>
    <member name="T:Org.BouncyCastle.Cmp.CmpException"></member>
    <member name="M:Org.BouncyCastle.Cmp.CmpException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CmpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CmpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CmpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CmpException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CmpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.CmpException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.CmpException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Cmp.GeneralPkiMessage"></member>
    <member name="M:Org.BouncyCastle.Cmp.GeneralPkiMessage.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiMessage)">
      <summary>
            Wrap a PKIMessage ASN.1 structure.
            </summary>
      <param name="pkiMessage">PKI message.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.GeneralPkiMessage.#ctor(System.Byte[])">
      <summary>
            Create a PKIMessage from the passed in bytes.
            </summary>
      <param name="encoding">BER/DER encoding of the PKIMessage</param>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.GeneralPkiMessage.Body"></member>
    <member name="P:Org.BouncyCastle.Cmp.GeneralPkiMessage.HasProtection">
      <summary>
            Return true if this message has protection bits on it. A return value of true
            indicates the message can be used to construct a ProtectedPKIMessage.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.GeneralPkiMessage.Header"></member>
    <member name="M:Org.BouncyCastle.Cmp.GeneralPkiMessage.ToAsn1Structure"></member>
    <member name="T:Org.BouncyCastle.Cmp.ProtectedPkiMessage">
      <summary>
            Wrapper for a PKIMessage with protection attached to it.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessage.#ctor(Org.BouncyCastle.Asn1.Cmp.PkiMessage)">
      <summary>
            Wrap a PKI message.
            </summary>
      <param name="pkiMessage">The PKI message</param>
      <exception cref="T:System.ArgumentException">If the PKI message does not have protection.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessage.#ctor(Org.BouncyCastle.Cmp.GeneralPkiMessage)">
      <summary>
            Wrap a general message.
            </summary>
      <param name="pkiMessage">The General message</param>
      <exception cref="T:System.ArgumentException">If the general message does not have protection.</exception>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.ProtectedPkiMessage.Body">
      <summary>Message body</summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessage.GetCertificates">
      <summary>
            Return the extra certificates associated with this message.
            </summary>
      <returns>an array of extra certificates, zero length if none present.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.ProtectedPkiMessage.HasPasswordBasedMacProtected">
      <summary>
            Determine whether the message is protected by a password based MAC. Use verify(PKMACBuilder, char[])
            to verify the message if this method returns true.
            </summary>
      <returns>true if protection MAC PBE based, false otherwise.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.ProtectedPkiMessage.Header">
      <summary>Message header</summary>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.ProtectedPkiMessage.ProtectionAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessage.ToAsn1Message">
      <summary>
            Return the underlying ASN.1 structure contained in this object.
            </summary>
      <returns>PkiMessage structure</returns>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessage.Verify(Org.BouncyCastle.Crmf.PKMacBuilder,System.Char[])">
      <summary>
            Verify a message with password based MAC protection.
            </summary>
      <param name="pkMacBuilder">MAC builder that can be used to construct the appropriate MacCalculator</param>
      <param name="password">the MAC password</param>
      <returns>true if the passed in password and MAC builder verify the message, false otherwise.</returns>
      <exception cref="T:System.InvalidOperationException">if algorithm not MAC based, or an exception is thrown verifying the MAC.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessage.Verify(Org.BouncyCastle.Crmf.PKMacBuilder,System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessage.Verify(Org.BouncyCastle.Crypto.IVerifierFactory)">
      <summary>
            Verify a message with a public key based signature attached.
            </summary>
      <param name="verifierFactory">a factory of signature verifiers.</param>
      <returns>true if the provider is able to create a verifier that validates the signature, false otherwise.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.#ctor(System.Int32,Org.BouncyCastle.Asn1.X509.GeneralName,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.AddCmpCertificate(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.AddGeneralInfo(Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.Build(Org.BouncyCastle.Crypto.IMacFactory)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.Build(Org.BouncyCastle.Crypto.ISignatureFactory)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetBody(Org.BouncyCastle.Asn1.Cmp.PkiBody)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetBody(System.Int32,Org.BouncyCastle.Cmp.CertificateConfirmationContent)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetBody(System.Int32,Org.BouncyCastle.Crmf.CertificateRepMessage)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetBody(System.Int32,Org.BouncyCastle.Crmf.CertificateReqMessages)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetFreeText(Org.BouncyCastle.Asn1.Cmp.PkiFreeText)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetMessageTime(Org.BouncyCastle.Asn1.Asn1GeneralizedTime)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetMessageTime(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetRecipKID(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetRecipNonce(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetSenderKID(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetSenderNonce(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cmp.ProtectedPkiMessageBuilder.SetTransactionId(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Cmp.RevocationDetails"></member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetails.#ctor(Org.BouncyCastle.Asn1.Cmp.RevDetails)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.RevocationDetails</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cmp.RevocationDetails.Issuer"></member>
    <member name="P:Org.BouncyCastle.Cmp.RevocationDetails.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Cmp.RevocationDetails.Subject"></member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetails.ToASN1Structure"></member>
    <member name="T:Org.BouncyCastle.Cmp.RevocationDetailsBuilder"></member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetailsBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cmp.RevocationDetailsBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetailsBuilder.Build"></member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetailsBuilder.SetIssuer(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetailsBuilder.SetPublicKey(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetailsBuilder.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Cmp.RevocationDetailsBuilder.SetSubject(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsAttributeTableGenerationException"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAttributeTableGenerationException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAttributeTableGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAttributeTableGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAttributeTableGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAttributeTableGenerationException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAttributeTableGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAttributeTableGenerationException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAttributeTableGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsAttributeTableGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAttributeTableGenerator.GetAttributes(System.Collections.Generic.IDictionary{Org.BouncyCastle.Cms.CmsAttributeTableParameter,System.Object})"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsAttributeTableParameter">
      <remarks>
            The 'Signature' parameter is only available when generating unsigned attributes.
            </remarks>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsAuthenticatedData"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedData.ContentInfo"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetAuthAttrs"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetMac"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetRecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetUnauthAttrs"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedData.MacAlgOid"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedData.MacAlgorithmID"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetAuthAttrs"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetMac"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetRecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetUnauthAttrs"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.MacAlgOid"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.MacAlgorithmID"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.MacAlgParams"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Asn1.Asn1EncodableVector)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.SetBufferSize(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsAuthenticatedGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsAuthenticatedGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsCompressedData"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsCompressedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsCompressedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsCompressedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsCompressedData.ContentInfo"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.GetContent"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.GetContent(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsCompressedDataGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsCompressedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String)"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsCompressedDataGenerator.ZLib"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsCompressedDataParser"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataParser.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsCompressedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsCompressedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataParser.GetContent"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.Open(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.Open(System.IO.Stream,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.Open(System.IO.Stream,System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.SetBufferSize(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.ZLib"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsContentInfoParser"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsContentInfoParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsContentInfoParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsContentInfoParser.Close"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsContentInfoParser.contentInfo"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsContentInfoParser.data"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsContentInfoParser.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Cms.CmsContentInfoParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsContentInfoParser.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Cms.CmsContentInfoParser</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Cms.CmsContentInfoParser</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsEnvelopedData"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedData.ContentInfo"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedData.EncryptionAlgOid"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedData.EncryptionAlgorithmID"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.GetRecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.GetUnprotectedAttributes"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator">
      <remarks>
             General class for generating a CMS enveloped-data message.
            
             A simple example of usage.
            
             <pre>
                  CmsEnvelopedDataGenerator  fact = new CmsEnvelopedDataGenerator();
            
                  fact.AddKeyTransRecipient(cert);
            
                  CmsEnvelopedData         data = fact.Generate(content, algorithm);
             </pre></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,Org.BouncyCastle.Crypto.ICipherBuilderWithKey)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String)">
      <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String,System.Int32)">
      <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsEnvelopedDataParser"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.EncryptionAlgOid"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.EncryptionAlgorithmID"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.EncryptionAlgParams"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.GetRecipientInfos"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.GetUnprotectedAttributes"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)">
      <summary>Use a BER Set to store the recipient information.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.SetBufferSize(System.Int32)">
      <summary>Set the underlying string size for encapsulated data.</summary>
      <param name="bufferSize">Length of octet strings to buffer the data.</param>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsEnvelopedGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsEnvelopedGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,Org.BouncyCastle.Crypto.Parameters.KeyParameter,Org.BouncyCastle.Asn1.Cms.KekIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,Org.BouncyCastle.Crypto.Parameters.KeyParameter,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipient(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipient(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipients(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Collections.Generic.IEnumerable{Org.BouncyCastle.X509.X509Certificate},System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddPasswordRecipient(Org.BouncyCastle.Cms.CmsPbeKey,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.AddRecipientInfoGenerator(Org.BouncyCastle.Cms.RecipientInfoGenerator)">
      <summary>
            Add a generator to produce the recipient info required.
            </summary>
      <param name="recipientInfoGenerator">a generator of a recipient info object.</param>
    </member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes128Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes128Ccm"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes128Gcm"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes128Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes192Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes192Ccm"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes192Gcm"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes192Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes256Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes256Ccm"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes256Gcm"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Aes256Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Camellia128Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Camellia128Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Camellia192Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Camellia192Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Camellia256Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Camellia256Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Cast5Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.DesCbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.DesEde3Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.DesEde3Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.ECCDHSha1Kdf"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.ECDHSha1Kdf"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.ECMqvSha1Kdf"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.ECMqvSha224Kdf"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.ECMqvSha256Kdf"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.ECMqvSha384Kdf"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.ECMqvSha512Kdf"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.GenerateAsn1Parameters(System.String,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.GetAlgorithmIdentifier(System.String,Org.BouncyCastle.Crypto.Parameters.KeyParameter,Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Crypto.ICipherParameters@)"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Gost28147CryptoProWrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.Gost28147Wrap"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.IdeaCbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.RC2Cbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.SeedCbc"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.SeedWrap"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedGenerator.UnprotectedAttributeGenerator"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsException"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsPbeKey"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsPbeKey.#ctor(System.Char[],Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsPbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsPbeKey.#ctor(System.Char[],System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsPbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsPbeKey.#ctor(System.ReadOnlySpan{System.Char},Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsPbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsPbeKey.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsPbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsPbeKey.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsPbeKey.Finalize"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsPbeKey.Format"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsPbeKey.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsPbeKey.IterationCount"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsPbeKey.Salt"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsProcessable"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessable.Write(System.IO.Stream)">
      <summary>
            Generic routine to copy out the data we want processed.
            </summary>
      <remarks>
            This routine may be called multiple times.
            </remarks>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsProcessableByteArray"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableByteArray.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsProcessableByteArray</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableByteArray.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsProcessableByteArray</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableByteArray.GetInputStream"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsProcessableByteArray.Type"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableByteArray.Write(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsProcessableFile"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableFile.#ctor(System.IO.FileInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsProcessableFile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableFile.#ctor(System.IO.FileInfo,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsProcessableFile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableFile.GetInputStream"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableFile.Write(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsProcessableInputStream"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableInputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsProcessableInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableInputStream.CheckSingleUsage"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableInputStream.GetInputStream"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableInputStream.Write(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsReadable"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsReadable.GetInputStream"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsSignedData"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(Org.BouncyCastle.Cms.CmsProcessable,Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(Org.BouncyCastle.Cms.CmsProcessable,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(Org.BouncyCastle.Cms.CmsProcessable,System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(System.Collections.Generic.IDictionary{System.String,System.Byte[]},Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.AddDigestAlgorithm(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.AddDigestAlgorithm(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder)"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedData.ContentInfo"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetAttributeCertificates"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetCertificates"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetCrls"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetDigestAlgorithmIDs"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetEncoded(System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetOtherRevInfos(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetSignerInfos"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.ReplaceCertificatesAndCrls(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.ReplaceCertificatesAndCrls(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.ReplaceCertificatesAndRevocations(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.ReplaceSigners(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Cms.SignerInformationStore)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.ReplaceSigners(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Cms.SignerInformationStore,Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder)"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedData.SignedContent"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedData.SignedContentType">
      <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedData.Version">
      <summary>Return the version number for this object.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsSignedDataGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedDataGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.AddSignerInfoGenerator(Org.BouncyCastle.Cms.SignerInfoGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(System.String,Org.BouncyCastle.Cms.CmsProcessable,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.GenerateCounterSigners(Org.BouncyCastle.Cms.SignerInformation)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsSignedDataParser"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.#ctor(Org.BouncyCastle.Cms.CmsTypedStream,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.#ctor(Org.BouncyCastle.Cms.CmsTypedStream,System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedDataParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedDataParser.DigestOids"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetAttributeCertificates"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetCertificates"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetCrls"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetOtherRevInfos(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetSignedContent"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetSignerInfos"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.ReplaceCertificatesAndCrls(System.IO.Stream,Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate},System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.ReplaceSigners(System.IO.Stream,Org.BouncyCastle.Cms.SignerInformationStore,System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedDataParser.SignedContentType">
      <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedDataParser.Version"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddDigests(System.Collections.Generic.IEnumerable{System.String})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddDigests(System.String[])"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String,Org.BouncyCastle.Cms.CmsAttributeTableGenerator,Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.SetBufferSize(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsSignedGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsSignedGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Constructor allowing specific source of randomness</summary>
      <param name="random">Instance of <c>SecureRandom</c> to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddAttributeCertificate(Org.BouncyCastle.X509.X509V2AttributeCertificate)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddAttributeCertificates(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddCertificate(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddCertificates(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddCrl(Org.BouncyCastle.X509.X509Crl)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddCrls(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddOtherRevocationInfo(Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddOtherRevocationInfos(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.Asn1.Asn1Encodable})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddOtherRevocationInfos(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat})"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddSigners(Org.BouncyCastle.Cms.SignerInformationStore)"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.Data"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestGost3411"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestMD5"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestRipeMD128"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestRipeMD160"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestRipeMD256"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestSha1"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestSha224"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestSha256"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestSha384"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestSha512"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestSha512_224"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.DigestSha512_256"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionDsa"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionECDsa"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionECGost3410"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionECGost3410_2012_256"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionECGost3410_2012_512"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionGost3410"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionRsa"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.EncryptionRsaPss"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.GetAttributeSet(Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.GetBaseParameters(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.GetGeneratedDigests"></member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.m_random"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedGenerator.UseDerForCerts"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedGenerator.UseDerForCrls"></member>
    <member name="T:Org.BouncyCastle.Cms.CmsStreamException"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsStreamException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsStreamException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsStreamException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsStreamException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsStreamException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsStreamException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsStreamException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Cms.CmsTypedStream"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsTypedStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsTypedStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsTypedStream.#ctor(System.String,System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsTypedStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsTypedStream.#ctor(System.String,System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.CmsTypedStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsTypedStream.ContentStream"></member>
    <member name="P:Org.BouncyCastle.Cms.CmsTypedStream.ContentType"></member>
    <member name="M:Org.BouncyCastle.Cms.CmsTypedStream.Drain"></member>
    <member name="T:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.#ctor(Org.BouncyCastle.Asn1.Cms.AttributeTable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.CreateStandardAttributeTable(System.Collections.Generic.IDictionary{Org.BouncyCastle.Cms.CmsAttributeTableParameter,System.Object})"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.GetAttributes(System.Collections.Generic.IDictionary{Org.BouncyCastle.Cms.CmsAttributeTableParameter,System.Object})"></member>
    <member name="T:Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder.Find(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder.Find(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder.Find(System.String)"></member>
    <member name="T:Org.BouncyCastle.Cms.DefaultSignatureAlgorithmIdentifierFinder"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignatureAlgorithmIdentifierFinder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.DefaultSignatureAlgorithmIdentifierFinder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignatureAlgorithmIdentifierFinder.Find(System.String)"></member>
    <member name="T:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.#ctor(Org.BouncyCastle.Asn1.Cms.AttributeTable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.CreateStandardAttributeTable(System.Collections.Generic.IDictionary{Org.BouncyCastle.Cms.CmsAttributeTableParameter,System.Object})"></member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.GetAttributes(System.Collections.Generic.IDictionary{Org.BouncyCastle.Cms.CmsAttributeTableParameter,System.Object})"></member>
    <member name="T:Org.BouncyCastle.Cms.KekRecipientInformation"></member>
    <member name="M:Org.BouncyCastle.Cms.KekRecipientInformation.GetContentStream(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Cms.KeyAgreeRecipientInformation"></member>
    <member name="M:Org.BouncyCastle.Cms.KeyAgreeRecipientInformation.GetContentStream(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator.#ctor(Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber,Org.BouncyCastle.Crypto.IKeyWrapper)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator.#ctor(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.IKeyWrapper)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator.#ctor(System.Byte[],Org.BouncyCastle.Crypto.IKeyWrapper)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator.AlgorithmDetails"></member>
    <member name="M:Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator.Generate(Org.BouncyCastle.Crypto.Parameters.KeyParameter,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Cms.KeyTransRecipientInfoGenerator.GenerateWrappedKey(Org.BouncyCastle.Crypto.Parameters.KeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Cms.KeyTransRecipientInformation"></member>
    <member name="M:Org.BouncyCastle.Cms.KeyTransRecipientInformation.GetContentStream(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Cms.OriginatorID"></member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorID.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.OriginatorID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorID.Equals(Org.BouncyCastle.Cms.OriginatorID)"></member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorID.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorID.GetHashCode"></member>
    <member name="T:Org.BouncyCastle.Cms.OriginatorInfoGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInfoGenerator.#ctor(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.OriginatorInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInfoGenerator.#ctor(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.OriginatorInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInfoGenerator.#ctor(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate},Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.OriginatorInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInfoGenerator.#ctor(Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.OriginatorInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInfoGenerator.Generate"></member>
    <member name="T:Org.BouncyCastle.Cms.OriginatorInformation"></member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInformation.#ctor(Org.BouncyCastle.Asn1.Cms.OriginatorInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.OriginatorInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInformation.GetCertificates"></member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInformation.GetCrls"></member>
    <member name="M:Org.BouncyCastle.Cms.OriginatorInformation.ToAsn1Structure"></member>
    <member name="T:Org.BouncyCastle.Cms.PasswordRecipientInformation"></member>
    <member name="M:Org.BouncyCastle.Cms.PasswordRecipientInformation.GetContentStream(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Cms.PasswordRecipientInformation.KeyDerivationAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey">
      <summary>
            PKCS5 scheme-2 - password converted to bytes assuming ASCII.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey.#ctor(System.Char[],Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey.#ctor(System.Char[],System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey.#ctor(System.ReadOnlySpan{System.Char},Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey"></member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey.#ctor(System.Char[],Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey.#ctor(System.Char[],System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey.#ctor(System.ReadOnlySpan{System.Char},Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Cms.RecipientID"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientID.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.RecipientID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.RecipientID.Equals(Org.BouncyCastle.Cms.RecipientID)"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientID.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientID.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Cms.RecipientID.KeyIdentifier"></member>
    <member name="T:Org.BouncyCastle.Cms.RecipientInfoGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInfoGenerator.Generate(Org.BouncyCastle.Crypto.Parameters.KeyParameter,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Generate a RecipientInfo object for the given key.
            </summary>
      <param name="contentEncryptionKey">
            A <see cref="T:Org.BouncyCastle.Crypto.Parameters.KeyParameter" /></param>
      <param name="random">
            A <see cref="T:Org.BouncyCastle.Security.SecureRandom" /></param>
      <returns>
            A <see cref="T:Org.BouncyCastle.Asn1.Cms.RecipientInfo" /></returns>
      <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"></exception>
    </member>
    <member name="T:Org.BouncyCastle.Cms.RecipientInformation"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformation.GetContent(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformation.GetContentStream(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformation.GetMac"></member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformation.KeyEncryptionAlgOid"></member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformation.KeyEncryptionAlgorithmID"></member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformation.KeyEncryptionAlgParams"></member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformation.RecipientID"></member>
    <member name="T:Org.BouncyCastle.Cms.RecipientInformationStore"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformationStore.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Cms.RecipientInformation})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.RecipientInformationStore</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformationStore.Count"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformationStore.GetEnumerator"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformationStore.GetFirstRecipient(Org.BouncyCastle.Cms.RecipientID)"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformationStore.GetRecipients"></member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformationStore.GetRecipients(Org.BouncyCastle.Cms.RecipientID)"></member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformationStore.Item(Org.BouncyCastle.Cms.RecipientID)"></member>
    <member name="T:Org.BouncyCastle.Cms.SignerID"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerID.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.SignerID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SignerID.Equals(Org.BouncyCastle.Cms.SignerID)"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerID.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerID.GetHashCode"></member>
    <member name="T:Org.BouncyCastle.Cms.SignerInfoGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInfoGenerator.NewBuilder"></member>
    <member name="T:Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder.Build(Org.BouncyCastle.Crypto.ISignatureFactory,Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder.Build(Org.BouncyCastle.Crypto.ISignatureFactory,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder.SetDirectSignature(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder.WithSignedAttributeGenerator(Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInfoGeneratorBuilder.WithUnsignedAttributeGenerator(Org.BouncyCastle.Cms.CmsAttributeTableGenerator)"></member>
    <member name="T:Org.BouncyCastle.Cms.SignerInformation"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.#ctor(Org.BouncyCastle.Cms.SignerInformation)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.SignerInformation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.AddCounterSigners(Org.BouncyCastle.Cms.SignerInformation,Org.BouncyCastle.Cms.SignerInformationStore)"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.ContentType"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.DigestAlgOid"></member>
    <member name="F:Org.BouncyCastle.Cms.SignerInformation.digestAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.DigestAlgorithmID"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.DigestAlgParams"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.EncryptionAlgOid"></member>
    <member name="F:Org.BouncyCastle.Cms.SignerInformation.encryptionAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.EncryptionAlgorithmID"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.EncryptionAlgParams"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetContentDigest"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetCounterSignatures"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetEncodedSignedAttributes"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetSignature"></member>
    <member name="F:Org.BouncyCastle.Cms.SignerInformation.info"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.IsCounterSignature"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.ReplaceUnsignedAttributes(Org.BouncyCastle.Cms.SignerInformation,Org.BouncyCastle.Asn1.Cms.AttributeTable)"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.SignedAttributes"></member>
    <member name="F:Org.BouncyCastle.Cms.SignerInformation.signedAttributeSet"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.SignerID"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.ToSignerInfo"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.UnsignedAttributes"></member>
    <member name="F:Org.BouncyCastle.Cms.SignerInformation.unsignedAttributeSet"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.Verify(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.Verify(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.Version"></member>
    <member name="T:Org.BouncyCastle.Cms.SignerInformationStore"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.#ctor(Org.BouncyCastle.Cms.SignerInformation)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.SignerInformationStore</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Cms.SignerInformation})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.SignerInformationStore</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformationStore.Count">
      <summary>The number of signers in the collection.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.GetEnumerator"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.GetFirstSigner(Org.BouncyCastle.Cms.SignerID)"></member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.GetSigners">
      <returns>An ICollection of all signers in the collection</returns>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.GetSigners(Org.BouncyCastle.Cms.SignerID)"></member>
    <member name="T:Org.BouncyCastle.Cms.SimpleAttributeTableGenerator"></member>
    <member name="M:Org.BouncyCastle.Cms.SimpleAttributeTableGenerator.#ctor(Org.BouncyCastle.Asn1.Cms.AttributeTable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Cms.SimpleAttributeTableGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SimpleAttributeTableGenerator.GetAttributes(System.Collections.Generic.IDictionary{Org.BouncyCastle.Cms.CmsAttributeTableParameter,System.Object})"></member>
    <member name="T:Org.BouncyCastle.Crmf.AuthenticatorControl">
      <summary>
            Carrier for an authenticator control.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.AuthenticatorControl.#ctor(Org.BouncyCastle.Asn1.DerUtf8String)">
      <summary>
            Basic constructor - build from a UTF-8 string representing the token.
            </summary>
      <param name="token">UTF-8 string representing the token.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.AuthenticatorControl.#ctor(System.String)">
      <summary>
            Basic constructor - build from a string representing the token.
            </summary>
      <param name="token">string representing the token.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.AuthenticatorControl.Type">
      <summary>
            Return the type of this control.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.AuthenticatorControl.Value">
      <summary>
            Return the token associated with this control (a UTF8String).
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateRepMessage"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.#ctor(Org.BouncyCastle.Asn1.Cmp.CertRepMessage)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateRepMessage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.FromPkiBody(Org.BouncyCastle.Asn1.Cmp.PkiBody)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.GetCmpCertificates"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.GetResponses"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.GetX509Certificates"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.IsCertificateRepMessage(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.IsOnlyX509PKCertificates"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessage.ToAsn1Structure"></member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateRepMessageBuilder">
      <summary>Builder for a CertificateRepMessage.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessageBuilder.#ctor(Org.BouncyCastle.X509.X509Certificate[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateRepMessageBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessageBuilder.AddCertificateResponse(Org.BouncyCastle.Crmf.CertificateResponse)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRepMessageBuilder.Build"></member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateReqMessages"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessages.#ctor(Org.BouncyCastle.Asn1.Crmf.CertReqMessages)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateReqMessages</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessages.FromPkiBody(Org.BouncyCastle.Asn1.Cmp.PkiBody)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessages.GetRequests"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessages.IsCertificateRequestMessages(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessages.ToAsn1Structure"></member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateReqMessagesBuilder"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessagesBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateReqMessagesBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessagesBuilder.AddRequest(Org.BouncyCastle.Crmf.CertificateRequestMessage)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateReqMessagesBuilder.Build"></member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateRequestMessage"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.#ctor(Org.BouncyCastle.Asn1.Crmf.CertReqMsg)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateRequestMessage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.#ctor(System.Byte[])">
      <summary>
            Create a CertificateRequestMessage from the passed in bytes.
            </summary>
      <param name="encoded">BER/DER encoding of the CertReqMsg structure.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.FindControl(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.GetCertReqID">
      <summary>
            Return the certificate request ID for this message.
            </summary>
      <returns>the certificate request ID.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.GetCertTemplate">
      <summary>
            Return the certificate template contained in this message.
            </summary>
      <returns>a CertTemplate structure.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.GetControl(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
            Return a control value of the specified type.
            </summary>
      <param name="type">the type OID for the control value we are checking for.</param>
      <returns>the control value if present, null otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.GetEncoded">
      <summary>
            Return the ASN.1 encoding of the certReqMsg we wrap.
            </summary>
      <returns>a byte array containing the binary encoding of the certReqMsg.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.HasControl(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
            Return whether or not this request has a specific type of control value.
            </summary>
      <param name="objectIdentifier">the type OID for the control value we are checking for.</param>
      <returns>true if a control value of type is present, false otherwise.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.CertificateRequestMessage.HasControls">
      <summary>
            Return whether or not this request has control values associated with it.
            </summary>
      <returns>true if there are control values present, false otherwise.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.CertificateRequestMessage.HasProofOfPossession">
      <summary>
            Return whether or not this request message has a proof-of-possession field in it.
            </summary>
      <returns>true if proof-of-possession is present, false otherwise.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.CertificateRequestMessage.HasSigningKeyProofOfPossessionWithPkMac">
      <summary>
            Return whether or not the proof-of-possession (POP) is of the type popSigningKey and
            it has a public key MAC associated with it.
            </summary>
      <returns>true if POP is popSigningKey and a PKMAC is present, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.IsValidSigningKeyPop(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)">
      <summary>
            Return whether or not a signing key proof-of-possession (POP) is valid.
            </summary>
      <param name="verifierProvider">a provider that can produce content verifiers for the signature contained in this POP.</param>
      <returns>true if the POP is valid, false otherwise.</returns>
      <exception cref="T:System.InvalidOperationException">if there is a problem in verification or content verifier creation.</exception>
      <exception cref="T:System.InvalidOperationException">if POP not appropriate.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.IsValidSigningKeyPop(Org.BouncyCastle.Crypto.IVerifierFactoryProvider,Org.BouncyCastle.Crmf.PKMacBuilder,System.Char[])">
      <summary>
            Return whether or not a signing key proof-of-possession (POP), with an associated PKMAC, is valid.
            </summary>
      <param name="verifierProvider">a provider that can produce content verifiers for the signature contained in this POP.</param>
      <param name="macBuilder">a suitable PKMacBuilder to create the MAC verifier.</param>
      <param name="password">the password used to key the MAC calculation.</param>
      <returns>true if the POP is valid, false otherwise.</returns>
      <exception cref="T:System.InvalidOperationException">if there is a problem in verification or content verifier creation.</exception>
      <exception cref="T:System.InvalidOperationException">if POP not appropriate.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.IsValidSigningKeyPop(Org.BouncyCastle.Crypto.IVerifierFactoryProvider,Org.BouncyCastle.Crmf.PKMacBuilder,System.ReadOnlySpan{System.Char})">
      <summary>
            Return whether or not a signing key proof-of-possession (POP), with an associated PKMAC, is valid.
            </summary>
      <param name="verifierProvider">a provider that can produce content verifiers for the signature contained in this POP.</param>
      <param name="macBuilder">a suitable PKMacBuilder to create the MAC verifier.</param>
      <param name="password">the password used to key the MAC calculation.</param>
      <returns>true if the POP is valid, false otherwise.</returns>
      <exception cref="T:System.InvalidOperationException">if there is a problem in verification or content verifier creation.</exception>
      <exception cref="T:System.InvalidOperationException">if POP not appropriate.</exception>
    </member>
    <member name="F:Org.BouncyCastle.Crmf.CertificateRequestMessage.popKeyAgreement"></member>
    <member name="F:Org.BouncyCastle.Crmf.CertificateRequestMessage.popKeyEncipherment"></member>
    <member name="F:Org.BouncyCastle.Crmf.CertificateRequestMessage.popRaVerified"></member>
    <member name="F:Org.BouncyCastle.Crmf.CertificateRequestMessage.popSigningKey"></member>
    <member name="P:Org.BouncyCastle.Crmf.CertificateRequestMessage.ProofOfPossession">
      <summary>
            Return the type of the proof-of-possession this request message provides.
            </summary>
      <returns>one of: popRaVerified, popSigningKey, popKeyEncipherment, popKeyAgreement</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessage.ToAsn1Structure">
      <summary>
            Return the underlying ASN.1 object defining this CertificateRequestMessage object.
            </summary>
      <returns>A CertReqMsg</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.AddControl(Org.BouncyCastle.Crmf.IControl)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.Build"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetAuthInfoPKMAC(Org.BouncyCastle.Crmf.PKMacBuilder,System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetAuthInfoPKMacBuilder(Org.BouncyCastle.Crmf.PKMacBuilder,System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetAuthInfoPKMacBuilder(Org.BouncyCastle.Crmf.PKMacBuilder,System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetAuthInfoSender(Org.BouncyCastle.Asn1.X509.GeneralName)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetAuthInfoSender(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetIssuer(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetProofOfPossessionAgreeMac(Org.BouncyCastle.Asn1.Crmf.PKMacValue)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetProofOfPossessionRaVerified"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetProofOfPossessionSignKeySigner(Org.BouncyCastle.Crypto.ISignatureFactory)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetProofOfPossessionSubsequentMessage(Org.BouncyCastle.Asn1.Crmf.SubsequentMessage)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetProofOfPossessionSubsequentMessage(System.Int32,Org.BouncyCastle.Asn1.Crmf.SubsequentMessage)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetPublicKey(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetRegInfo(Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue[])"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetSerialNumber(Org.BouncyCastle.Asn1.DerInteger)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetSubject(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateRequestMessageBuilder.SetValidity(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"></member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateResponse">
      <summary>High level wrapper for the CertResponse CRMF structure.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponse.#ctor(Org.BouncyCastle.Asn1.Cmp.CertResponse)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponse.GetCertificate"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponse.GetEncryptedCertificate"></member>
    <member name="P:Org.BouncyCastle.Crmf.CertificateResponse.HasEncryptedCertificate"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponse.ToAsn1Structure"></member>
    <member name="T:Org.BouncyCastle.Crmf.CertificateResponseBuilder">
      <summary>Builder for CertificateResponse objects (the CertResponse CRMF equivalent).</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponseBuilder.#ctor(Org.BouncyCastle.Asn1.DerInteger,Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CertificateResponseBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponseBuilder.Build"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponseBuilder.WithCertificate(Org.BouncyCastle.Asn1.Cmp.CmpCertificate)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponseBuilder.WithCertificate(Org.BouncyCastle.Cms.CmsEnvelopedData)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponseBuilder.WithCertificate(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Crmf.CertificateResponseBuilder.WithResponseInfo(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crmf.CrmfException"></member>
    <member name="M:Org.BouncyCastle.Crmf.CrmfException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CrmfException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CrmfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CrmfException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CrmfException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CrmfException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.CrmfException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.CrmfException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.DefaultPKMacPrimitivesProvider"></member>
    <member name="M:Org.BouncyCastle.Crmf.DefaultPKMacPrimitivesProvider.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.DefaultPKMacPrimitivesProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.DefaultPKMacPrimitivesProvider.CreateDigest(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Crmf.DefaultPKMacPrimitivesProvider.CreateMac(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="T:Org.BouncyCastle.Crmf.EncryptedValueBuilder"></member>
    <member name="M:Org.BouncyCastle.Crmf.EncryptedValueBuilder.#ctor(Org.BouncyCastle.Crypto.IKeyWrapper,Org.BouncyCastle.Crypto.ICipherBuilderWithKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.EncryptedValueBuilder</parameter>
          </include>
        </markup>
      </summary>
      <param name="wrapper">wrapper a wrapper for key used to encrypt the actual data contained in the EncryptedValue.</param>
      <param name="encryptor">encryptor  an output encryptor to encrypt the actual data contained in the EncryptedValue. </param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.EncryptedValueBuilder.#ctor(Org.BouncyCastle.Crypto.IKeyWrapper,Org.BouncyCastle.Crypto.ICipherBuilderWithKey,Org.BouncyCastle.Crmf.IEncryptedValuePadder)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.EncryptedValueBuilder</parameter>
          </include>
        </markup>
      </summary>
      <param name="wrapper">a wrapper for key used to encrypt the actual data contained in the EncryptedValue.</param>
      <param name="encryptor">encryptor  an output encryptor to encrypt the actual data contained in the EncryptedValue.</param>
      <param name="padder">padder a padder to ensure that the EncryptedValue created will always be a constant length.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.EncryptedValueBuilder.Build(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo)">
      <summary>
             Build an EncryptedValue structure containing the private key contained in
             the passed info structure.
            </summary>
      <param name="privateKeyInfo">a PKCS#8 private key info structure.</param>
      <returns>an EncryptedValue containing an EncryptedPrivateKeyInfo structure.</returns>
      <exception cref="T:Org.BouncyCastle.Crmf.CrmfException">on a failure to encrypt the data, or wrap the symmetric key for this value.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.EncryptedValueBuilder.Build(Org.BouncyCastle.X509.X509Certificate)">
      <summary>
             Build an EncryptedValue structure containing the certificate contained in
             the passed in holder.
            </summary>
      <param name="holder">a holder containing a certificate.</param>
      <returns>an EncryptedValue containing the encrypted certificate.</returns>
      <exception cref="T:Org.BouncyCastle.Crmf.CrmfException">on a failure to encrypt the data, or wrap the symmetric key for this value.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.EncryptedValueBuilder.Build(System.Char[])">
      <param name="revocationPassphrase">a revocation pass phrase.</param>
      <returns>an EncryptedValue containing the encrypted pass phrase.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.EncryptedValueParser">
      <summary>Parser for EncryptedValue structures.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.EncryptedValueParser.#ctor(Org.BouncyCastle.Asn1.Crmf.EncryptedValue)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.EncryptedValueParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.EncryptedValueParser.#ctor(Org.BouncyCastle.Asn1.Crmf.EncryptedValue,Org.BouncyCastle.Crmf.IEncryptedValuePadder)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.EncryptedValueParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.EncryptedValueParser.IntendedAlg"></member>
    <member name="T:Org.BouncyCastle.Crmf.IControl">
      <summary>
            Generic interface for a CertificateRequestMessage control value.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.IControl.Type">
      <summary>
            Return the type of this control.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.IControl.Value">
      <summary>
            Return the value contained in this control object.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.IEncryptedValuePadder">
      <summary>
            An encrypted value padder is used to make sure that prior to a value been
            encrypted the data is padded to a standard length.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.IEncryptedValuePadder.GetPaddedData(System.Byte[])">
      <summary>Return a byte array of padded data.</summary>
      <param name="data">the data to be padded.</param>
      <returns>a padded byte array containing data.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.IEncryptedValuePadder.GetUnpaddedData(System.Byte[])">
      <summary>Return a byte array of with padding removed.</summary>
      <param name="paddedData">the data to be padded.</param>
      <returns>an array containing the original unpadded data.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.IPKMacPrimitivesProvider"></member>
    <member name="M:Org.BouncyCastle.Crmf.IPKMacPrimitivesProvider.CreateDigest(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Crmf.IPKMacPrimitivesProvider.CreateMac(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="T:Org.BouncyCastle.Crmf.PkiArchiveControl"></member>
    <member name="M:Org.BouncyCastle.Crmf.PkiArchiveControl.#ctor(Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions)">
      <summary>
            Basic constructor - build from an PKIArchiveOptions structure.
            </summary>
      <param name="pkiArchiveOptions">the ASN.1 structure that will underlie this control.</param>
    </member>
    <member name="F:Org.BouncyCastle.Crmf.PkiArchiveControl.archiveRemGenPrivKey"></member>
    <member name="P:Org.BouncyCastle.Crmf.PkiArchiveControl.ArchiveType">
      <summary>
            Return the archive control type, one of: encryptedPrivKey,keyGenParameters,or archiveRemGenPrivKey.
            </summary>
      <returns>the archive control type.</returns>
    </member>
    <member name="F:Org.BouncyCastle.Crmf.PkiArchiveControl.encryptedPrivKey"></member>
    <member name="P:Org.BouncyCastle.Crmf.PkiArchiveControl.EnvelopedData">
      <summary>
            Return whether this control contains enveloped data.
            </summary>
      <returns>true if the control contains enveloped data, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PkiArchiveControl.GetEnvelopedData">
      <summary>
            Return the enveloped data structure contained in this control.
            </summary>
      <returns>a CMSEnvelopedData object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PkiArchiveControl.IsEnvelopedData">
      <summary>
            Return whether this control contains enveloped data.
            </summary>
      <returns>true if the control contains enveloped data, false otherwise.</returns>
    </member>
    <member name="F:Org.BouncyCastle.Crmf.PkiArchiveControl.keyGenParameters"></member>
    <member name="P:Org.BouncyCastle.Crmf.PkiArchiveControl.Type">
      <summary>
            Return the type of this control.
            </summary>
      <returns>CRMFObjectIdentifiers.id_regCtrl_pkiArchiveOptions</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.PkiArchiveControl.Value">
      <summary>
            Return the underlying ASN.1 object.
            </summary>
      <returns>a PKIArchiveOptions structure.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.PkiArchiveControlBuilder"></member>
    <member name="M:Org.BouncyCastle.Crmf.PkiArchiveControlBuilder.#ctor(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo,Org.BouncyCastle.Asn1.X509.GeneralName)">
      <summary>
            Basic constructor - specify the contents of the PKIArchiveControl structure.
             </summary>
      <param name="privateKeyInfo">the private key to be archived.</param>
      <param name="generalName">the general name to be associated with the private key.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PkiArchiveControlBuilder.AddRecipientGenerator(Org.BouncyCastle.Cms.RecipientInfoGenerator)">
      <summary>Add a recipient generator to this control.</summary>
      <param name="recipientGen"> recipient generator created for a specific recipient.</param>
      <returns>this builder object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PkiArchiveControlBuilder.Build(Org.BouncyCastle.Crypto.ICipherBuilderWithKey)">
      <summary>Build the PKIArchiveControl using the passed in encryptor to encrypt its contents.</summary>
      <param name="contentEncryptor">a suitable content encryptor.</param>
      <returns>a PKIArchiveControl object.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.PKMacBuilder"></member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.#ctor">
      <summary>
            Default, IterationCount = 1000, OIW=IdSha1, Mac=HmacSHA1
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.#ctor(Org.BouncyCastle.Crmf.IPKMacPrimitivesProvider)">
      <summary>
            Defaults with IPKMacPrimitivesProvider
            </summary>
      <param name="provider"></param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.#ctor(Org.BouncyCastle.Crmf.IPKMacPrimitivesProvider,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
            Create.
            </summary>
      <param name="provider">The Mac provider</param>
      <param name="digestAlgorithmIdentifier">Digest Algorithm Id</param>
      <param name="macAlgorithmIdentifier">Mac Algorithm Id</param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.#ctor(Org.BouncyCastle.Crmf.IPKMacPrimitivesProvider,System.Int32)">
      <summary>
            Create a PKMAC builder enforcing a ceiling on the maximum iteration count.
            </summary>
      <param name="provider">supporting calculator</param>
      <param name="maxIterations">max allowable value for iteration count.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.Build(System.Char[])">
      <summary>
            Build an IMacFactory.
            </summary>
      <param name="password">The password.</param>
      <returns>IMacFactory</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.Build(System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.Get(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.Get(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.SetIterationCount(System.Int32)">
      <summary>
            Set the iteration count.
            </summary>
      <param name="iterationCount">the iteration count.</param>
      <returns>this</returns>
      <exception cref="T:System.ArgumentException">if iteration count is less than 100</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.SetParameters(Org.BouncyCastle.Asn1.Cmp.PbmParameter)">
      <summary>
            Set PbmParameters
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>this</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.SetSaltLength(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crmf.PKMacBuilder.SetSecureRandom(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            The Secure random
            </summary>
      <param name="random">The random.</param>
      <returns>this</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder"></member>
    <member name="M:Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder.#ctor(Org.BouncyCastle.Asn1.Crmf.CertRequest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder.#ctor(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder.Build(Org.BouncyCastle.Crypto.ISignatureFactory)"></member>
    <member name="M:Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder.SetPublicKeyMac(Org.BouncyCastle.Crmf.PKMacBuilder,System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder.SetPublicKeyMac(Org.BouncyCastle.Crmf.PKMacBuilder,System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Crmf.ProofOfPossessionSigningKeyBuilder.SetSender(Org.BouncyCastle.Asn1.X509.GeneralName)"></member>
    <member name="T:Org.BouncyCastle.Crmf.RegTokenControl"></member>
    <member name="M:Org.BouncyCastle.Crmf.RegTokenControl.#ctor(Org.BouncyCastle.Asn1.DerUtf8String)">
      <summary>
            Basic constructor - build from a UTF-8 string representing the token.
            </summary>
      <param name="token">UTF-8 string representing the token.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crmf.RegTokenControl.#ctor(System.String)">
      <summary>
            Basic constructor - build from a string representing the token.
            </summary>
      <param name="token">string representing the token.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.RegTokenControl.Type">
      <summary>
            Return the type of this control.
            </summary>
      <returns>CRMFObjectIdentifiers.id_regCtrl_regToken</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crmf.RegTokenControl.Value">
      <summary>
            Return the token associated with this control (a UTF8String).
            </summary>
      <returns>a UTF8String.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.AesUtilities"></member>
    <member name="M:Org.BouncyCastle.Crypto.AesUtilities.CreateEngine"></member>
    <member name="P:Org.BouncyCastle.Crypto.AesUtilities.IsHardwareAccelerated"></member>
    <member name="T:Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair.Private"></member>
    <member name="P:Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair.Public"></member>
    <member name="T:Org.BouncyCastle.Crypto.AsymmetricKeyParameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.AsymmetricKeyParameter.#ctor(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.AsymmetricKeyParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.AsymmetricKeyParameter.Equals(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Crypto.AsymmetricKeyParameter.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.AsymmetricKeyParameter.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.AsymmetricKeyParameter.IsPrivate"></member>
    <member name="T:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.#ctor(Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedAeadBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.DoFinal(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadBlockCipher.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.BufferedAeadCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.#ctor(Org.BouncyCastle.Crypto.Modes.IAeadCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedAeadCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.BufferedAeadCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.DoFinal(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAeadCipher.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.Reset">
      <summary>Reset the buffer</summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.BufferedBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.#ctor(Org.BouncyCastle.Crypto.Modes.IBlockCipherMode)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.BufferedBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedBlockCipher.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.BufferedCipherBase"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedCipherBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.BufferedCipherBase.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.DoFinal(System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Crypto.BufferedCipherBase.EmptyBuffer"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessBytes(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedCipherBase.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.BufferedIesCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.#ctor(Org.BouncyCastle.Crypto.Engines.IesEngine)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedIesCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.BufferedIesCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedIesCipher.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.BufferedStreamCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.#ctor(Org.BouncyCastle.Crypto.IStreamCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.BufferedStreamCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.BufferedStreamCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.DoFinal(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.BufferedStreamCipher.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.CipherKeyGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.CipherKeyGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.CipherKeyGenerator.DefaultStrength"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.EngineGenerateKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.EngineGenerateKeyParameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.EngineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.EnsureInitialized"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKeyParameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="F:Org.BouncyCastle.Crypto.CipherKeyGenerator.random"></member>
    <member name="F:Org.BouncyCastle.Crypto.CipherKeyGenerator.strength"></member>
    <member name="T:Org.BouncyCastle.Crypto.CryptoException"></member>
    <member name="M:Org.BouncyCastle.Crypto.CryptoException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.CryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.CryptoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.CryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.CryptoException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.CryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.CryptoException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.CryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.CryptoServicesRegistrar"></member>
    <member name="M:Org.BouncyCastle.Crypto.CryptoServicesRegistrar.GetSecureRandom"></member>
    <member name="M:Org.BouncyCastle.Crypto.CryptoServicesRegistrar.GetSecureRandom(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Crypto.DataLengthException">
      <summary>This exception is thrown if a buffer that is meant to have output copied into it turns out to be too
            short, or if we've been given insufficient input.</summary>
      <remarks>
            In general this exception will get thrown rather than an <see cref="T:System.IndexOutOfRangeException" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.DataLengthException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.DataLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.DataLengthException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.DataLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.DataLengthException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.DataLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.DataLengthException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.DataLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IAlphabetMapper"></member>
    <member name="M:Org.BouncyCastle.Crypto.IAlphabetMapper.ConvertToChars(System.Byte[])">
      <summary>
            Return a char[] for this alphabet based on the indexes passed.
            </summary>
      <param name="input">input array of indexes.</param>
      <returns>an array of char corresponding to the index values.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IAlphabetMapper.ConvertToIndexes(System.Char[])">
      <summary>
            Return the passed in char[] as a byte array of indexes (indexes
            can be more than 1 byte)
            </summary>
      <param name="input">characters to be mapped.</param>
      <returns>an index array.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IAlphabetMapper.Radix">
      <summary>
            Return the number of characters in the alphabet.
            </summary>
      <returns>the radix for the alphabet.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IAsymmetricBlockCipher">
      <remarks>Base interface for a public/private key block cipher.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IAsymmetricBlockCipher.AlgorithmName">
      <summary>The name of the algorithm this cipher implements.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IAsymmetricBlockCipher.GetInputBlockSize">
      <returns>The maximum size, in bytes, an input block may be.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IAsymmetricBlockCipher.GetOutputBlockSize">
      <returns>The maximum size, in bytes, an output block will be.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IAsymmetricBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the cipher.</summary>
      <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
      <param name="parameters">The key or other data required by the cipher.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IAsymmetricBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>Process a block.</summary>
      <param name="inBuf">The input buffer.</param>
      <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
      <param name="inLen">The length of the input block.</param>
      <exception cref="T:Org.BouncyCastle.Crypto.InvalidCipherTextException">Input decrypts improperly.</exception>
      <exception cref="T:Org.BouncyCastle.Crypto.DataLengthException">Input is too large for the cipher.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBasicAgreement.GetFieldSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBasicAgreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IBlockCipher">
      <remarks>Base interface for a symmetric key block cipher.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IBlockCipher.AlgorithmName">
      <summary>The name of the algorithm this cipher implements.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockCipher.GetBlockSize">
      <returns>The block size for this cipher, in bytes.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the cipher.</summary>
      <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
      <param name="parameters">The key or other data required by the cipher.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
      <summary>Process a block.</summary>
      <param name="inBuf">The input buffer.</param>
      <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
      <param name="outBuf">The output buffer.</param>
      <param name="outOff">The offset into <paramref>outBuf</paramref> to write the output block.</param>
      <returns>The number of bytes processed and produced.</returns>
      <exception cref="T:Org.BouncyCastle.Crypto.DataLengthException">If input block is wrong size, or outBuf too small.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Process a block.</summary>
      <param name="input">The input block as a span.</param>
      <param name="output">The output span.</param>
      <returns>The number of bytes processed and produced.</returns>
      <exception cref="T:Org.BouncyCastle.Crypto.DataLengthException">If input block is wrong size, or output span too small.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IBlockResult">
      <summary>
            Operators that reduce their input to a single block return an object
            of this type.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockResult.Collect">
      <summary>
            Return the final result of the operation.
            </summary>
      <returns>A block of bytes, representing the result of an operation.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockResult.Collect(System.Byte[],System.Int32)">
      <summary>
            Store the final result of the operation by copying it into the destination array.
            </summary>
      <param name="buf">The byte array to copy the result into.</param>
      <param name="off">The offset into destination to start copying the result at.</param>
      <returns>The number of bytes copied into destination.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockResult.Collect(System.Span{System.Byte})">
      <summary>
            Store the final result of the operation by copying it into the destination span.
            </summary>
      <param name="output">The span to copy the result into.</param>
      <returns>The number of bytes copied into destination.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBlockResult.GetMaxResultLength">
      <summary>Return an upper limit for the size of the result.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IBufferedCipher">
      <remarks>Block cipher engines are expected to conform to this interface.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IBufferedCipher.AlgorithmName">
      <summary>The name of the algorithm this cipher implements.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the cipher.</summary>
      <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
      <param name="parameters">The key and other data required by the cipher.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessBytes(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IBufferedCipher.Reset">
      <summary>
            Reset the cipher. After resetting the cipher is in the same state
            as it was after the last init (if there was one).
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.ICipher">
      <summary>
            Base interface for a ciphers that do not require data to be block aligned.
            <para>
            Note: In cases where the underlying algorithm is block based, these ciphers may add or remove padding as needed.
            </para></summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ICipher.GetMaxOutputSize(System.Int32)">
      <summary>
            Return the size of the output buffer required for a Write() plus a
            close() with the write() being passed inputLen bytes.
            <para>
            The returned size may be dependent on the initialisation of this cipher
            and may not be accurate once subsequent input data is processed as the cipher may
            add, add or remove padding, as it sees fit.
            </para></summary>
      <param name="inputLen">The length of the expected input.</param>
      <returns>The space required to accommodate a call to processBytes and doFinal with inputLen bytes of input.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ICipher.GetUpdateOutputSize(System.Int32)">
      <summary>
            Return the size of the output buffer required for a write() with the write() being
            passed inputLen bytes and just updating the cipher output.
            </summary>
      <param name="inputLen">The length of the expected input.</param>
      <returns>The space required to accommodate a call to processBytes with inputLen bytes of input.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.ICipher.Stream">
      <summary>
            Gets the stream for reading/writing data processed/to be processed.
            </summary>
      <value>The stream associated with this cipher.</value>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.ICipherBuilder">
      <summary>
            Base interface for cipher builders.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.ICipherBuilder.AlgorithmDetails">
      <summary>
            Return the algorithm and parameter details associated with any cipher built.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ICipherBuilder.BuildCipher(System.IO.Stream)">
      <summary>
            Build a cipher that operates on the passed in stream.
            </summary>
      <param name="stream">The stream to write/read any encrypted/decrypted data.</param>
      <returns>A cipher based around the given stream.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ICipherBuilder.GetMaxOutputSize(System.Int32)">
      <summary>
            Return the maximum output size that a given input will produce.
            </summary>
      <param name="inputLen">the length of the expected input.</param>
      <returns>The maximum possible output size that can produced for the expected input length.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.ICipherBuilderWithKey">
      <summary>
            A cipher builder that can also return the key it was initialized with.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.ICipherBuilderWithKey.Key">
      <summary>
            Return the key we were initialized with.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.ICipherParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.IDecryptorBuilderProvider">
      <summary>
            Interface describing a provider of cipher builders for creating decrypting ciphers.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDecryptorBuilderProvider.CreateDecryptorBuilder(System.Object)">
      <summary>
            Return a cipher builder for creating decrypting ciphers.
            </summary>
      <param name="algorithmDetails">The algorithm details/parameters to use to create the final cipher.</param>
      <returns>A new cipher builder.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IDerivationFunction">
      <summary>Base interface for general purpose byte derivation functions.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IDerivationFunction.Digest">
      <summary>The message digest used as the basis for the function.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDerivationFunction.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IDerivationFunction.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IDerivationFunction.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IDerivationParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.IDigest">
      <remarks>Base interface for a message digest.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IDigest.AlgorithmName">
      <summary>The algorithm name.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
      <summary>Update the message digest with a block of bytes.</summary>
      <param name="input">the byte array containing the data.</param>
      <param name="inOff">the offset into the byte array where the data starts.</param>
      <param name="inLen">the length of the data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})">
      <summary>Update the message digest with a span of bytes.</summary>
      <param name="input">the span containing the data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.DoFinal(System.Byte[],System.Int32)">
      <summary>Close the digest, producing the final digest value.</summary>
      <param name="output">the byte array the digest is to be copied into.</param>
      <param name="outOff">the offset into the byte array the digest is to start at.</param>
      <returns>the number of bytes written</returns>
      <remarks>This call leaves the digest reset.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.DoFinal(System.Span{System.Byte})">
      <summary>Close the digest, producing the final digest value.</summary>
      <param name="output">the span the digest is to be copied into.</param>
      <returns>the number of bytes written</returns>
      <remarks>This call leaves the digest reset.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.GetByteLength">
      <summary>Return the size, in bytes, of the internal buffer used by this digest.</summary>
      <returns>the size, in bytes, of the internal buffer used by this digest.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.GetDigestSize">
      <summary>Return the size, in bytes, of the digest produced by this message digest.</summary>
      <returns>the size, in bytes, of the digest produced by this message digest.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.Reset">
      <summary>Reset the digest back to its initial state.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigest.Update(System.Byte)">
      <summary>Update the message digest with a single byte.</summary>
      <param name="input">the input byte to be entered.</param>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IDigestFactory">
      <summary>
            Base interface for operator factories that create stream-based digest calculators.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IDigestFactory.AlgorithmDetails">
      <summary>The algorithm details object for calculators made by this factory.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDigestFactory.CreateCalculator">
      <summary>
            Create a stream calculator for the digest associated with this factory. The stream
            calculator is used for the actual operation of entering the data to be digested
            and producing the digest block.
            </summary>
      <returns>A calculator producing an IBlockResult with the final digest in it.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IDigestFactory.DigestLength">
      <summary>Return the size of the digest associated with this factory.</summary>
      <returns>The length of the digest produced by this calculators from this factory in bytes.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IDsa">
      <summary>Interface for classes implementing the Digital Signature Algorithm</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IDsa.AlgorithmName">
      <summary>The algorithm name.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDsa.GenerateSignature(System.Byte[])">
      <summary>Sign the passed in message (usually the output of a hash function).</summary>
      <param name="message">the message to be signed.</param>
      <returns>two big integers representing the r and s values respectively.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDsa.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the signer for signature generation or signature verification.</summary>
      <param name="forSigning">true if we are generating a signature, false otherwise.</param>
      <param name="parameters">key parameters for signature generation.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IDsa.Order">
      <summary>The order of the group that the r, s values in signatures belong to.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IDsa.VerifySignature(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>Verify the message message against the signature values r and s.</summary>
      <param name="message">the message that was supposed to have been signed.</param>
      <param name="r">the r signature value.</param>
      <param name="s">the s signature value.</param>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IEncapsulatedSecretExtractor"></member>
    <member name="P:Org.BouncyCastle.Crypto.IEncapsulatedSecretExtractor.EncapsulationLength">
      <summary>
            The length in bytes of the encapsulation.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IEncapsulatedSecretExtractor.ExtractSecret(System.Byte[])">
      <summary>
            Generate an exchange pair based on the recipient public key.
            </summary>
      <param name="encapsulation"> the encapsulated secret.</param>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IEncapsulatedSecretGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.IEncapsulatedSecretGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Generate an exchange pair based on the recipient public key.
            </summary>
      <param name="recipientKey"></param>
      <returns> An SecretWithEncapsulation derived from the recipient public key.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IEntropySource">
      <summary>
            Base interface describing an entropy source for a DRBG.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IEntropySource.EntropySize">
      <summary>
            Return the number of bits of entropy this source can produce.
            </summary>
      <value>The size, in bits, of the return value of getEntropy.</value>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IEntropySource.GetEntropy">
      <summary>
            Return a byte array of entropy.
            </summary>
      <returns>The entropy bytes.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IEntropySource.GetEntropy(System.Span{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.IEntropySource.IsPredictionResistant">
      <summary>
            Return whether or not this entropy source is regarded as prediction resistant.
            </summary>
      <value>
        <c>true</c> if this instance is prediction resistant; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IEntropySourceProvider">
      <summary>
            Base interface describing a provider of entropy sources.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IEntropySourceProvider.Get(System.Int32)">
      <summary>
            Return an entropy source providing a block of entropy.
            </summary>
      <param name="bitsRequired">The size of the block of entropy required.</param>
      <returns>An entropy source providing bitsRequired blocks of entropy.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IKeyUnwrapper">
      <summary>
            Base interface for a key unwrapper.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IKeyUnwrapper.AlgorithmDetails">
      <summary>
            The parameter set used to configure this key unwrapper.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IKeyUnwrapper.Unwrap(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Unwrap the passed in data.
            </summary>
      <param name="cipherText">The array containing the data to be unwrapped.</param>
      <param name="offset">The offset into cipherText at which the unwrapped data starts.</param>
      <param name="length">The length of the data to be unwrapped.</param>
      <returns>an IBlockResult containing the unwrapped key data.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IKeyWrapper">
      <summary>
            Base interface for a key wrapper.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IKeyWrapper.AlgorithmDetails">
      <summary>
            The parameter set used to configure this key wrapper.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IKeyWrapper.Wrap(System.Byte[])">
      <summary>
            Wrap the passed in key data.
            </summary>
      <param name="keyData">The key data to be wrapped.</param>
      <returns>an IBlockResult containing the wrapped key data.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IMac">
      <summary>The base interface for implementations of message authentication codes (MACs).</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IMac.AlgorithmName">
      <summary>The algorithm name.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
      <summary>Update the MAC with a block of bytes.</summary>
      <param name="input">the byte array containing the data.</param>
      <param name="inOff">the offset into the byte array where the data starts.</param>
      <param name="inLen">the length of the data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.BlockUpdate(System.ReadOnlySpan{System.Byte})">
      <summary>Update the MAC with a span of bytes.</summary>
      <param name="input">the span containing the data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.DoFinal(System.Byte[],System.Int32)">
      <summary>Perform final calculations, producing the result MAC.</summary>
      <param name="output">the byte array the MAC is to be copied into.</param>
      <param name="outOff">the offset into the byte array the MAC is to start at.</param>
      <returns>the number of bytes written</returns>
      <remarks>This call leaves the MAC reset.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.DoFinal(System.Span{System.Byte})">
      <summary>Perform final calculations, producing the result MAC.</summary>
      <param name="output">the span the MAC is to be copied into.</param>
      <returns>the number of bytes written</returns>
      <remarks>This call leaves the MAC reset.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.GetMacSize">
      <summary>Return the size, in bytes, of the MAC produced by this implementation.</summary>
      <returns>the size, in bytes, of the MAC produced by this implementation.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the MAC.</summary>
      <param name="parameters">The key or other data required by the MAC.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.Reset">
      <summary>Reset the MAC back to its initial state.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMac.Update(System.Byte)">
      <summary>Update the MAC with a single byte.</summary>
      <param name="input">the input byte to be entered.</param>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IMacDerivationFunction"></member>
    <member name="P:Org.BouncyCastle.Crypto.IMacDerivationFunction.Mac"></member>
    <member name="T:Org.BouncyCastle.Crypto.IMacFactory"></member>
    <member name="P:Org.BouncyCastle.Crypto.IMacFactory.AlgorithmDetails">
      <summary>The algorithm details object for this calculator.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IMacFactory.CreateCalculator">
      <summary>
            Create a stream calculator for this signature calculator. The stream
            calculator is used for the actual operation of entering the data to be signed
            and producing the signature block.
            </summary>
      <returns>A calculator producing an IBlockResult with a signature in it.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.InvalidCipherTextException">
      <summary>This exception is thrown whenever we find something we don't expect in a message.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.InvalidCipherTextException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.InvalidCipherTextException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.InvalidCipherTextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.InvalidCipherTextException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.InvalidCipherTextException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.InvalidCipherTextException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.InvalidCipherTextException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.InvalidCipherTextException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IRawAgreement"></member>
    <member name="P:Org.BouncyCastle.Crypto.IRawAgreement.AgreementSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRawAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRawAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRawAgreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IRsa"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRsa.ConvertInput(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRsa.ConvertOutput(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRsa.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRsa.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRsa.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IRsa.ProcessBlock(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.ISecretWithEncapsulation"></member>
    <member name="M:Org.BouncyCastle.Crypto.ISecretWithEncapsulation.GetEncapsulation">
      <summary>
            Return the data that carries the secret in its encapsulated form.
            </summary>
      <returns> the encapsulation of the secret.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISecretWithEncapsulation.GetSecret">
      <summary>
             Return the secret associated with the encapsulation.
             </summary>
      <returns> the secret the encapsulation is for.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.ISignatureFactory">
      <summary>
            Base interface for operators that serve as stream-based signature calculators.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.ISignatureFactory.AlgorithmDetails">
      <summary>The algorithm details object for this calculator.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISignatureFactory.CreateCalculator">
      <summary>
            Create a stream calculator for this signature calculator. The stream
            calculator is used for the actual operation of entering the data to be signed
            and producing the signature block.
            </summary>
      <returns>A calculator producing an IBlockResult with a signature in it.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.ISigner"></member>
    <member name="P:Org.BouncyCastle.Crypto.ISigner.AlgorithmName">
      <summary>The algorithm name.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
      <summary>Update the signer with a block of bytes.</summary>
      <param name="input">the byte array containing the data.</param>
      <param name="inOff">the offset into the byte array where the data starts.</param>
      <param name="inLen">the length of the data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.BlockUpdate(System.ReadOnlySpan{System.Byte})">
      <summary>Update the signer with a span of bytes.</summary>
      <param name="input">the span containing the data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.GenerateSignature">
      <summary>Generate a signature for the message we've been loaded with using the key we were initialised with.
            </summary>
      <returns>A byte array containing the signature for the message.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the signer for signing or verification.</summary>
      <param name="forSigning">true if for signing, false otherwise.</param>
      <param name="parameters">necessary parameters.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.Reset">
      <summary>Reset the signer back to its initial state.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.Update(System.Byte)">
      <summary>Update the signer with a single byte.</summary>
      <param name="input">the input byte to be entered.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.ISigner.VerifySignature(System.Byte[])">
      <summary>Return true if the internal state represents the signature described in the passed in array.
            </summary>
      <param name="signature">an array containing the candidate signature to verify.</param>
      <returns>true if the internal state represents the signature described in the passed in array.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.ISignerWithRecovery"></member>
    <member name="M:Org.BouncyCastle.Crypto.ISignerWithRecovery.GetRecoveredMessage"></member>
    <member name="M:Org.BouncyCastle.Crypto.ISignerWithRecovery.HasFullMessage"></member>
    <member name="M:Org.BouncyCastle.Crypto.ISignerWithRecovery.UpdateWithRecoveredMessage(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.IStreamCalculator`1">
      <summary>
            Base interface for cryptographic operations such as Hashes, MACs, and Signatures which reduce a stream of data
            to a single value.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IStreamCalculator`1.GetResult">
      <summary>
            Return the result of processing the stream. This value is only available once the stream
            has been closed.
            </summary>
      <returns>The result of processing the stream.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IStreamCalculator`1.Stream">
      <summary>Return a "sink" stream which only exists to update the implementing object.</summary>
      <returns>A stream to write to in order to update the implementing object.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IStreamCipher">
      <summary>The interface stream ciphers conform to.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IStreamCipher.AlgorithmName">
      <summary>The name of the algorithm this cipher implements.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IStreamCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the cipher.</summary>
      <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
      <param name="parameters">The key and other data required by the cipher.</param>
      <exception cref="T:System.ArgumentException">
            If the parameters argument is inappropriate.
            </exception>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Process a block of bytes from <paramref name="input" />, putting the result into <paramref name="output" />.
            </summary>
      <param name="input">The input byte array.</param>
      <param name="inOff">
            The offset into <c>input</c> where the data to be processed starts.
            </param>
      <param name="length">The number of bytes to be processed.</param>
      <param name="output">The output buffer the processed bytes go into.</param>
      <param name="outOff">
            The offset into <c>output</c> the processed data starts at.
            </param>
      <exception cref="T:Org.BouncyCastle.Crypto.DataLengthException">If the input buffer is too small.</exception>
      <exception cref="T:Org.BouncyCastle.Crypto.OutputLengthException">If the output buffer is too small.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>
            Process a block of bytes from <paramref name="input" />, putting the result into <paramref name="output" />.
            </summary>
      <param name="input">The input span.</param>
      <param name="output">The output span.</param>
      <exception cref="T:Org.BouncyCastle.Crypto.OutputLengthException">If the output span is too small.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IStreamCipher.Reset">
      <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IStreamCipher.ReturnByte(System.Byte)">
      <summary>encrypt/decrypt a single byte returning the result.</summary>
      <param name="input">the byte to be processed.</param>
      <returns>the result of processing the input byte.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IVerifier">
      <summary>
            Operators that reduce their input to the validation of a signature produce this type.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IVerifier.IsVerified(System.Byte[])">
      <summary>
            Return true if the passed in data matches what is expected by the verification result.
            </summary>
      <param name="data">The bytes representing the signature.</param>
      <returns>true if the signature verifies, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IVerifier.IsVerified(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Return true if the length bytes from off in the source array match the signature
            expected by the verification result.
            </summary>
      <param name="source">Byte array containing the signature.</param>
      <param name="off">The offset into the source array where the signature starts.</param>
      <param name="length">The number of bytes in source making up the signature.</param>
      <returns>true if the signature verifies, false otherwise.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IVerifierFactory">
      <summary>
            Base interface for operators that serve as stream-based signature verifiers.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IVerifierFactory.AlgorithmDetails">
      <summary>The algorithm details object for this verifier.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IVerifierFactory.CreateCalculator">
      <summary>
            Create a stream calculator for this verifier. The stream
            calculator is used for the actual operation of entering the data to be verified
            and producing a result which can be used to verify the original signature.
            </summary>
      <returns>A calculator producing an IVerifier which can verify the signature.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IVerifierFactoryProvider">
      <summary>
            Base interface for a provider to support the dynamic creation of signature verifiers.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IVerifierFactoryProvider.CreateVerifierFactory(System.Object)">
      <summary>
            Return a signature verfier for signature algorithm described in the passed in algorithm details object.
            </summary>
      <param name="algorithmDetails">The details of the signature algorithm verification is required for.</param>
      <returns>A new signature verifier.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.IWrapper"></member>
    <member name="P:Org.BouncyCastle.Crypto.IWrapper.AlgorithmName">
      <summary>The name of the algorithm this cipher implements.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IWrapper.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IWrapper.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IWrapper.Wrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IXof">
      <remarks>
            With FIPS PUB 202 a new kind of message digest was announced which supported extendable output, or variable digest sizes.
            This interface provides the extra methods required to support variable output on a digest implementation.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IXof.Output(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Start outputting the results of the final calculation for this XOF. Unlike DoFinal, this method
            will continue producing output until the XOF is explicitly reset, or signals otherwise.
            </summary>
      <param name="output">output array to write the output bytes to.</param>
      <param name="outOff">offset to start writing the bytes at.</param>
      <param name="outLen">the number of output bytes requested.</param>
      <returns>the number of bytes written</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IXof.Output(System.Span{System.Byte})">
      <summary>
            Start outputting the results of the final calculation for this XOF. Unlike OutputFinal, this method
            will continue producing output until the XOF is explicitly reset, or signals otherwise.
            </summary>
      <param name="output">span to fill with the output bytes.</param>
      <returns>the number of bytes written</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IXof.OutputFinal(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Output the results of the final calculation for this XOF to outLen number of bytes.
            </summary>
      <param name="output">output array to write the output bytes to.</param>
      <param name="outOff">offset to start writing the bytes at.</param>
      <param name="outLen">the number of output bytes requested.</param>
      <returns>the number of bytes written</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.IXof.OutputFinal(System.Span{System.Byte})">
      <summary>
            Output the results of the final calculation for this XOF to fill the output span.
            </summary>
      <param name="output">span to fill with the output bytes.</param>
      <returns>the number of bytes written</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.KeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.KeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.KeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.KeyGenerationParameters.Random"></member>
    <member name="P:Org.BouncyCastle.Crypto.KeyGenerationParameters.Strength"></member>
    <member name="T:Org.BouncyCastle.Crypto.MaxBytesExceededException">
      <summary>This exception is thrown whenever a cipher requires a change of key, IV or similar after x amount of
            bytes enciphered.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.MaxBytesExceededException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.MaxBytesExceededException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.MaxBytesExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.MaxBytesExceededException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.MaxBytesExceededException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.MaxBytesExceededException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.MaxBytesExceededException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.MaxBytesExceededException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.OutputLengthException"></member>
    <member name="M:Org.BouncyCastle.Crypto.OutputLengthException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.OutputLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.OutputLengthException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.OutputLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.OutputLengthException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.OutputLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.OutputLengthException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.OutputLengthException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.PbeParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.PbeParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.String,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Init(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Init(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Crypto.PbeParametersGenerator.IterationCount"></member>
    <member name="F:Org.BouncyCastle.Crypto.PbeParametersGenerator.mIterationCount"></member>
    <member name="F:Org.BouncyCastle.Crypto.PbeParametersGenerator.mPassword"></member>
    <member name="F:Org.BouncyCastle.Crypto.PbeParametersGenerator.mSalt"></member>
    <member name="P:Org.BouncyCastle.Crypto.PbeParametersGenerator.Password"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.Char[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.ReadOnlySpan{System.Char},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToBytes(System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToBytes(System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToUtf8Bytes(System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToUtf8Bytes(System.ReadOnlySpan{System.Char})"></member>
    <member name="P:Org.BouncyCastle.Crypto.PbeParametersGenerator.Salt"></member>
    <member name="T:Org.BouncyCastle.Crypto.SimpleBlockResult">
      <summary>
            A simple block result object which just carries a byte array.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.SimpleBlockResult.#ctor(System.Byte[])">
      <summary>
            Base constructor - a wrapper for the passed in byte array.
            </summary>
      <param name="result">The byte array to be wrapped.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.SimpleBlockResult.Collect">
      <summary>
            Return the final result of the operation.
            </summary>
      <returns>A block of bytes, representing the result of an operation.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.SimpleBlockResult.Collect(System.Byte[],System.Int32)">
      <summary>
            Store the final result of the operation by copying it into the destination array.
            </summary>
      <param name="buf">The byte array to copy the result into.</param>
      <param name="off">The offset into destination to start copying the result at.</param>
      <returns>The number of bytes copied into destination.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.SimpleBlockResult.Collect(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.SimpleBlockResult.GetMaxResultLength"></member>
    <member name="T:Org.BouncyCastle.Crypto.StreamBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.#ctor(Org.BouncyCastle.Crypto.Modes.IBlockCipherMode)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.StreamBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.StreamBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.ReturnByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.DHAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHAgreement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.DHAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHAgreement.CalculateMessage"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHAgreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement.GetFieldSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups">
      <summary>Standard Diffie-Hellman groups from various IETF specifications.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.DHStandardGroups</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc2409_1024"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc2409_768"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc3526_1536"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc3526_2048"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc3526_3072"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc3526_4096"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc3526_6144"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc3526_8192"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc4306_1024"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc4306_768"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc5996_1024"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc5996_768"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc7919_ffdhe2048"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc7919_ffdhe3072"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc7919_ffdhe4096"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc7919_ffdhe6144"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.DHStandardGroups.rfc7919_ffdhe8192"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement.GetFieldSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement.privKey"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement.GetFieldSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.ECDHCWithKdfBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHCWithKdfBasicAgreement.#ctor(System.String,Org.BouncyCastle.Crypto.IDerivationFunction)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.ECDHCWithKdfBasicAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHCWithKdfBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.ECDHWithKdfBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHWithKdfBasicAgreement.#ctor(System.String,Org.BouncyCastle.Crypto.IDerivationFunction)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.ECDHWithKdfBasicAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECDHWithKdfBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.ECMqvBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECMqvBasicAgreement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.ECMqvBasicAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECMqvBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECMqvBasicAgreement.GetFieldSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECMqvBasicAgreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.ECMqvBasicAgreement.privParams"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.ECMqvWithKdfBasicAgreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECMqvWithKdfBasicAgreement.#ctor(System.String,Org.BouncyCastle.Crypto.IDerivationFunction)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.ECMqvWithKdfBasicAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.ECMqvWithKdfBasicAgreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange">
      <summary>
            SM2 Key Exchange protocol - based on https://tools.ietf.org/html/draft-shen-sm2-ecdsa-02
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange.CalculateKey(System.Int32,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange.CalculateKeyWithConfirmation(System.Int32,System.Byte[],Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange.CalculateU(Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePublicParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.SM2KeyExchange.Kdf(Org.BouncyCastle.Math.EC.ECPoint,System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.X25519Agreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X25519Agreement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.X25519Agreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.X25519Agreement.AgreementSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X25519Agreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X25519Agreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X25519Agreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.X448Agreement"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X448Agreement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.X448Agreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.X448Agreement.AgreementSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X448Agreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X448Agreement.CalculateAgreement(Org.BouncyCastle.Crypto.ICipherParameters,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.X448Agreement.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant">
      <summary>
             A participant in a Password Authenticated Key Exchange by Juggling (J-PAKE) exchange.
            
             The J-PAKE exchange is defined by Feng Hao and Peter Ryan in the paper
             <a href="http://grouper.ieee.org/groups/1363/Research/contributions/hao-ryan-2008.pdf">
             "Password Authenticated Key Exchange by Juggling, 2008."</a>
            
             The J-PAKE protocol is symmetric.
             There is no notion of a <i>client</i> or <i>server</i>, but rather just two <i>participants</i>.
             An instance of JPakeParticipant represents one participant, and
             is the primary interface for executing the exchange.
            
             To execute an exchange, construct a JPakeParticipant on each end,
             and call the following 7 methods
             (once and only once, in the given order, for each participant, sending messages between them as described):
            
             CreateRound1PayloadToSend() - and send the payload to the other participant
             ValidateRound1PayloadReceived(JPakeRound1Payload) - use the payload received from the other participant
             CreateRound2PayloadToSend() - and send the payload to the other participant
             ValidateRound2PayloadReceived(JPakeRound2Payload) - use the payload received from the other participant
             CalculateKeyingMaterial()
             CreateRound3PayloadToSend(BigInteger) - and send the payload to the other participant
             ValidateRound3PayloadReceived(JPakeRound3Payload, BigInteger) - use the payload received from the other participant
            
             Each side should derive a session key from the keying material returned by CalculateKeyingMaterial().
             The caller is responsible for deriving the session key using a secure key derivation function (KDF).
            
             Round 3 is an optional key confirmation process.
             If you do not execute round 3, then there is no assurance that both participants are using the same key.
             (i.e. if the participants used different passwords, then their session keys will differ.)
            
             If the round 3 validation succeeds, then the keys are guaranteed to be the same on both sides.
            
             The symmetric design can easily support the asymmetric cases when one party initiates the communication.
             e.g. Sometimes the round1 payload and round2 payload may be sent in one pass.
             Also, in some cases, the key confirmation payload can be sent together with the round2 payload.
             These are the trivial techniques to optimize the communication.
            
             The key confirmation process is implemented as specified in
             <a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">NIST SP 800-56A Revision 1</a>,
             Section 8.2 Unilateral Key Confirmation for Key Agreement Schemes.
            
             This class is stateful and NOT threadsafe.
             Each instance should only be used for ONE complete J-PAKE exchange
             (i.e. a new JPakeParticipant should be constructed for each new J-PAKE exchange).
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[])">
      <summary>
             Convenience constructor for a new JPakeParticipant that uses
             the JPakePrimeOrderGroups#NIST_3072 prime order group,
             a SHA-256 digest, and a default SecureRandom implementation.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
      <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
      <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[],Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup)">
      <summary>
             Convenience constructor for a new JPakeParticipant that uses
             a SHA-256 digest, and a default SecureRandom implementation.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
      <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
      <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
      <param name="group">Prime order group. See JPakePrimeOrderGroups for standard groups.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[],Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
             Constructor for a new JPakeParticipant.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
      <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
      <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
      <param name="group">Prime order group. See JPakePrimeOrderGroups for standard groups.</param>
      <param name="digest">Digest to use during zero knowledge proofs and key confirmation
                 (SHA-256 or stronger preferred).</param>
      <param name="random">Source of secure random data for x1 and x2, and for the zero knowledge proofs.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CalculateKeyingMaterial">
      <summary>
             Calculates and returns the key material.
             A session key must be derived from this key material using a secure key derivation function (KDF).
             The KDF used to derive the key is handled externally (i.e. not by JPakeParticipant).
            
             The keying material will be identical for each participant if and only if
             each participant's password is the same.  i.e. If the participants do not
             share the same password, then each participant will derive a different key.
             Therefore, if you immediately start using a key derived from
             the keying material, then you must handle detection of incorrect keys.
             If you want to handle this detection explicitly, you can optionally perform
             rounds 3 and 4.  See JPakeParticipant for details on how to execute
             rounds 3 and 4.
            
             The keying material will be in the range <tt>[0, p-1]</tt>.
            
             ValidateRound2PayloadReceived(JPakeRound2Payload) must be called prior to this method.
             
             As a side effect, the internal password array is cleared, since it is no longer needed.
            
             After execution, the State state will be STATE_KEY_CALCULATED.
            
             Throws InvalidOperationException if called prior to ValidateRound2PayloadReceived(JPakeRound2Payload),
             or if called multiple times.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CreateRound1PayloadToSend">
      <summary>
             Creates and returns the payload to send to the other participant during round 1.
            
             After execution, the State state} will be STATE_ROUND_1_CREATED}.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CreateRound2PayloadToSend">
      <summary>
             Creates and returns the payload to send to the other participant during round 2.
            
             ValidateRound1PayloadReceived(JPakeRound1Payload) must be called prior to this method.
            
             After execution, the State state will be  STATE_ROUND_2_CREATED.
            
             Throws InvalidOperationException if called prior to ValidateRound1PayloadReceived(JPakeRound1Payload), or multiple times
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CreateRound3PayloadToSend(Org.BouncyCastle.Math.BigInteger)">
      <summary>
             Creates and returns the payload to send to the other participant during round 3.
            
             See JPakeParticipant for more details on round 3.
            
             After execution, the State state} will be  STATE_ROUND_3_CREATED.
             Throws InvalidOperationException if called prior to CalculateKeyingMaterial, or multiple
             times.
             </summary>
      <param name="keyingMaterial">The keying material as returned from CalculateKeyingMaterial().</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.State">
      <summary>
            Gets the current state of this participant.
            See the <tt>STATE_*</tt> constants for possible values.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_INITIALIZED"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_KEY_CALCULATED"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_ROUND_1_CREATED"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_ROUND_1_VALIDATED"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_ROUND_2_CREATED"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_ROUND_2_VALIDATED"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_ROUND_3_CREATED"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.STATE_ROUND_3_VALIDATED"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound1PayloadReceived(Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload)">
      <summary>
             Validates the payload received from the other participant during round 1.
            
             Must be called prior to CreateRound2PayloadToSend().
            
             After execution, the State state will be  STATE_ROUND_1_VALIDATED.
             
             Throws CryptoException if validation fails. Throws InvalidOperationException
             if called multiple times.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound2PayloadReceived(Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload)">
      <summary>
             Validates the payload received from the other participant during round 2.
             Note that this DOES NOT detect a non-common password.
             The only indication of a non-common password is through derivation
             of different keys (which can be detected explicitly by executing round 3 and round 4)
            
             Must be called prior to CalculateKeyingMaterial().
            
             After execution, the State state will be STATE_ROUND_2_VALIDATED.
            
             Throws CryptoException if validation fails. Throws
             InvalidOperationException if called prior to ValidateRound1PayloadReceived(JPakeRound1Payload), or multiple times
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound3PayloadReceived(Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload,Org.BouncyCastle.Math.BigInteger)">
      <summary>
             Validates the payload received from the other participant during round 3.
            
             See JPakeParticipant for more details on round 3.
            
             After execution, the State state will be STATE_ROUND_3_VALIDATED.
             
             Throws CryptoException if validation fails. Throws InvalidOperationException if called prior to
             CalculateKeyingMaterial or multiple times
             </summary>
      <param name="round3PayloadReceived">The round 3 payload received from the other participant.</param>
      <param name="keyingMaterial">The keying material as returned from CalculateKeyingMaterial().</param>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup">
      <summary>
             A pre-computed prime order group for use during a J-PAKE exchange.
            
             Typically a Schnorr group is used.  In general, J-PAKE can use any prime order group
             that is suitable for public key cryptography, including elliptic curve cryptography.
            
             See JPakePrimeOrderGroups for convenient standard groups.
            
             NIST <a href="http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/DSA2_All.pdf">publishes</a>
             many groups that can be used for the desired level of security.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
             Constructs a new JPakePrimeOrderGroup.
            
             In general, you should use one of the pre-approved groups from
             JPakePrimeOrderGroups, rather than manually constructing one.
            
             The following basic checks are performed:
            
             p-1 must be evenly divisible by q
             g must be in [2, p-1]
             g^q mod p must equal 1
             p must be prime (within reasonably certainty)
             q must be prime (within reasonably certainty)
            
             The prime checks are performed using BigInteger#isProbablePrime(int),
             and are therefore subject to the same probability guarantees.
            
             These checks prevent trivial mistakes.
             However, due to the small uncertainties if p and q are not prime,
             advanced attacks are not prevented.
             Use it at your own risk.
             
             Throws NullReferenceException if any argument is null. Throws
             InvalidOperationException is any of the above validations fail.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Boolean)">
      <summary>
            Constructor used by the pre-approved groups in JPakePrimeOrderGroups.
            These pre-approved groups can avoid the expensive checks.
            User-specified groups should not use this constructor.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup.G"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup.P"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup.Q"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups">
      <summary>
            Standard pre-computed prime order groups for use by J-PAKE.
            (J-PAKE can use pre-computed prime order groups, same as DSA and Diffie-Hellman.)
            <p />
            This class contains some convenient constants for use as input for
            constructing {@link JPAKEParticipant}s.
            <p />
            The prime order groups below are taken from Sun's JDK JavaDoc (docs/guide/security/CryptoSpec.html#AppB),
            and from the prime order groups
            <a href="http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/DSA2_All.pdf">published by NIST</a>.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups.NIST_2048">
      <summary>
            From NIST.
            2048-bit p, 224-bit q and 2048-bit g for 112-bit security.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups.NIST_3072">
      <summary>
            From NIST.
            3072-bit p, 256-bit q and 3072-bit g for 128-bit security.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups.SUN_JCE_1024">
      <summary>
            From Sun's JDK JavaDoc (docs/guide/security/CryptoSpec.html#AppB)
            1024-bit p, 160-bit q and 1024-bit g for 80-bit security.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload">
      <summary>
            The payload sent/received during the first round of a J-PAKE exchange.
            
            Each JPAKEParticipant creates and sends an instance of this payload to
            the other. The payload to send should be created via 
            JPAKEParticipant.CreateRound1PayloadToSend().
            
            Each participant must also validate the payload received from the other.
            The received payload should be validated via 
            JPAKEParticipant.ValidateRound1PayloadReceived(JPakeRound1Payload).
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.#ctor(System.String,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger[],Org.BouncyCastle.Math.BigInteger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.Gx1"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.Gx2"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.KnowledgeProofForX1"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.KnowledgeProofForX2"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.ParticipantId"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload">
      <summary>
            The payload sent/received during the second round of a J-PAKE exchange.
            
            Each JPAKEParticipant creates and sends an instance
            of this payload to the other JPAKEParticipant.
            The payload to send should be created via
            JPAKEParticipant#createRound2PayloadToSend()
            
            Each JPAKEParticipant must also validate the payload
            received from the other JPAKEParticipant.
            The received payload should be validated via
            JPAKEParticipant#validateRound2PayloadReceived(JPakeRound2Payload)
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload.#ctor(System.String,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload.A"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload.KnowledgeProofForX2s"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload.ParticipantId"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload">
      <summary>
             The payload sent/received during the optional third round of a J-PAKE exchange,
             which is for explicit key confirmation.
            
             Each JPAKEParticipant creates and sends an instance
             of this payload to the other JPAKEParticipant.
             The payload to send should be created via
             JPAKEParticipant#createRound3PayloadToSend(BigInteger)
            
             Eeach JPAKEParticipant must also validate the payload
             received from the other JPAKEParticipant.
             The received payload should be validated via
             JPAKEParticipant#validateRound3PayloadReceived(JPakeRound3Payload, BigInteger)
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload.#ctor(System.String,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload.MacTag"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload.ParticipantId"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities">
      <summary>
            Primitives needed for a J-PAKE exchange.
            
            The recommended way to perform a J-PAKE exchange is by using
            two JPAKEParticipants.  Internally, those participants
            call these primitive operations in JPakeUtilities.
            
            The primitives, however, can be used without a JPAKEParticipant if needed.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateA(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Calculate A as done in round 2. 
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateGA(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Calculate ga as done in round 2.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateGx(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Calculate g^x mod p as done in round 1.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateKeyingMaterial(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Calculates the keying material, which can be done after round 2 has completed.
            A session key must be derived from this key material using a secure key derivation function (KDF).
            The KDF used to derive the key is handled externally (i.e. not by JPAKEParticipant).
            
            KeyingMaterial = (B/g^{x2*x4*s})^x2
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateMacTag(System.String,System.String,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
             Calculates the MacTag (to be used for key confirmation), as defined by
             <a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">NIST SP 800-56A Revision 1</a>,
             Section 8.2 Unilateral Key Confirmation for Key Agreement Schemes.
            
             MacTag = HMAC(MacKey, MacLen, MacData)
             MacKey = H(K || "JPAKE_KC")
             MacData = "KC_1_U" || participantId || partnerParticipantId || gx1 || gx2 || gx3 || gx4
            
             Note that both participants use "KC_1_U" because the sender of the round 3 message
             is always the initiator for key confirmation.
            
             HMAC = {@link HMac} used with the given {@link Digest}
             H = The given {@link Digest}
             MacLen = length of MacTag
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateS(Org.BouncyCastle.Math.BigInteger,System.Byte[])">
      <summary>Converts the given password to a BigInteger mod q.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateS(Org.BouncyCastle.Math.BigInteger,System.Char[])">
      <summary>Converts the given password (UTF8 encoded) to a BigInteger mod q.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateS(Org.BouncyCastle.Math.BigInteger,System.ReadOnlySpan{System.Char})">
      <summary>Converts the given password (UTF8 encoded) to a BigInteger mod q.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateS(System.Char[])">
      <summary>
            Converts the given password to a BigInteger
            for use in arithmetic calculations.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateX2s(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Calculate x2 * s as done in round 2.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateZeroKnowledgeProof(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.String,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Calculate a zero knowledge proof of x using Schnorr's signature.
            The returned array has two elements {g^v, r = v-x*h} for x.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.GenerateX1(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Return a value that can be used as x1 or x3 during round 1.
            The returned value is a random value in the range [0, q-1].
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.GenerateX2(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Return a value that can be used as x2 or x4 during round 1.
            The returned value is a random value in the range [1, q-1].
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.One"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateGa(Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Validates that ga is not 1.
            
            As described by Feng Hao...
            Alice could simply check ga != 1 to ensure it is a generator.
            In fact, as we will explain in Section 3, (x1 + x3 + x4 ) is random over Zq even in the face of active attacks.
            Hence, the probability for ga = 1 is extremely small - on the order of 2^160 for 160-bit q.
            
            throws CryptoException if ga is 1
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateGx4(Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Validates that g^x4 is not 1.
            throws CryptoException if g^x4 is 1
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateMacTag(System.String,System.String,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Validates the MacTag received from the partner participant.
            
            throws CryptoException if the participantId strings are equal.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateNotNull(System.Object,System.String)">
      <summary>
            Validates that the given object is not null.
            throws NullReferenceException if the object is null.
            </summary>
      <param name="obj">object in question</param>
      <param name="description">name of the object (to be used in exception message)</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsDiffer(System.String,System.String)">
      <summary>
             Validates that the given participant ids are not equal.
             (For the J-PAKE exchange, each participant must use a unique id.)
            
             Throws CryptoException if the participantId strings are equal.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsEqual(System.String,System.String)">
      <summary>
            Validates that the given participant ids are equal.
            This is used to ensure that the payloads received from
            each round all come from the same participant.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateZeroKnowledgeProof(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger[],System.String,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
            Validates the zero knowledge proof (generated by
            calculateZeroKnowledgeProof(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, string, Digest, SecureRandom)
            is correct.
            
            throws CryptoException if the zero knowledge proof is not correct
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.Zero"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Kdf.ConcatenationKdfGenerator">
      <summary>Generator for Concatenation Key Derivation Function defined in NIST SP 800-56A, Sect 5.8.1</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Kdf.ConcatenationKdfGenerator</parameter>
          </include>
        </markup>
      </summary>
      <param name="digest">the digest to be used as the source of generated bytes</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.Digest">
      <summary>the underlying digest.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Fill <c>len</c> bytes of the output buffer with bytes generated from the derivation function.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Int32,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters.Algorithm"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters.GetExtraInfo"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters.GetZ"></member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKdfParameters.KeySize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.B"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.CalculateClientEvidenceMessage"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.CalculateSecret(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.CalculateSessionKey"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.digest"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.g"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.Init(Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.Key"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.M1"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.M2"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.N"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.privA"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.pubA"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.random"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.S"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.SelectPrivateValue"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.u"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.VerifyServerEvidenceMessage(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.x"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.A"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.CalculateSecret(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.CalculateServerEvidenceMessage"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.CalculateSessionKey"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.digest"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.g"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.GenerateServerCredentials"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.Init(Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.Key"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.M1"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.M2"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.N"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.privB"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.pubB"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.random"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.S"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.SelectPrivateValue"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.u"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.v"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.VerifyClientEvidenceMessage(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.rfc5054_1024"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.rfc5054_1536"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.rfc5054_2048"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.rfc5054_3072"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.rfc5054_4096"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.rfc5054_6144"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6StandardGroups.rfc5054_8192"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateK(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateKey(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateM1(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateM2(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateU(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateX(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,System.Byte[],System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateX(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.GeneratePrivateValue(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.ValidatePublicValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.digest"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.g"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.Init(Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters,Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.N"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.AsconDigest">
      <summary>ASCON v1.2 Hash, https://ascon.iaik.tugraz.at/ .</summary>
      <remarks>
            https://csrc.nist.gov/CSRC/media/Projects/lightweight-cryptography/documents/finalist-round/updated-spec-doc/ascon-spec-final.pdf<br />
            ASCON v1.2 Hash with reference to C Reference Impl from: https://github.com/ascon/ascon-c .
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.#ctor(Org.BouncyCastle.Crypto.Digests.AsconDigest.AsconParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.AsconDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.AsconDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.AsconDigest.AsconParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.AsconXof">
      <summary>ASCON v1.2 XOF, https://ascon.iaik.tugraz.at/ .</summary>
      <remarks>
            https://csrc.nist.gov/CSRC/media/Projects/lightweight-cryptography/documents/finalist-round/updated-spec-doc/ascon-spec-final.pdf<br />
            ASCON v1.2 XOF with reference to C Reference Impl from: https://github.com/ascon/ascon-c .
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.#ctor(Org.BouncyCastle.Crypto.Digests.AsconXof.AsconParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.AsconXof</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.AsconXof.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.OutputFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.OutputFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.AsconXof.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.AsconXof.AsconParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Blake2bDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2bDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.#ctor(Org.BouncyCastle.Crypto.Digests.Blake2bDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2bDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2bDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.#ctor(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2bDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2bDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.ClearKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.ClearSalt"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2bDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Blake2sDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2sDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.#ctor(Org.BouncyCastle.Crypto.Digests.Blake2sDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2sDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2sDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.#ctor(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2sDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2sDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.ClearKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.ClearSalt"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2sDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2xsDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.#ctor(Org.BouncyCastle.Crypto.Digests.Blake2xsDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2xsDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2xsDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2xsDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.#ctor(System.Int32,System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake2xsDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.GetUnknownMaxLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.OutputFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.OutputFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.Reset"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.UnknownDigestLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake2xsDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Blake3Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake3Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Blake3Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake3Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Blake3Digest</parameter>
          </include>
        </markup>
      </summary>
      <param name="pDigestSize">the default digest size (in bits)</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Blake3Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.Init(Org.BouncyCastle.Crypto.Parameters.Blake3Parameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.OutputFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.OutputFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Blake3Digest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.CShakeDigest">
      <summary>
            Customizable SHAKE function.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.CShakeDigest.#ctor(Org.BouncyCastle.Crypto.Digests.CShakeDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.CShakeDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.CShakeDigest.#ctor(System.Int32,System.Byte[],System.Byte[])">
      <summary>
            Base constructor
            </summary>
      <param name="bitLength">bit length of the underlying SHAKE function, 128 or 256.</param>
      <param name="N">the function name string, note this is reserved for use by NIST. Avoid using it if not required.</param>
      <param name="S">the customization string - available for local use.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.CShakeDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.CShakeDigest.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.CShakeDigest.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.CShakeDigest.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Dstu7564Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Dstu7564Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Dstu7564Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.ProcessBlock(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.ProcessBlock(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Dstu7564Digest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.GeneralDigest"></member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.GeneralDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.CopyIn(Org.BouncyCastle.Crypto.Digests.GeneralDigest)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.Finish"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.GeneralDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest.GetDigestSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest.GetDigestSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Gost3411Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Gost3411Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Gost3411Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Gost3411Digest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Haraka256_X86"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256_X86.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256_X86.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Runtime.Intrinsics.Vector128{System.Byte}})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Haraka256_X86.IsSupported"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256_X86.Permute(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256_X86.Permute(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Runtime.Intrinsics.Vector128{System.Byte}})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Haraka256Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Haraka256Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka256Digest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Haraka512_X86"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512_X86.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512_X86.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Runtime.Intrinsics.Vector128{System.Byte}})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Haraka512_X86.IsSupported"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512_X86.Permute(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512_X86.Permute(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Runtime.Intrinsics.Vector128{System.Byte}})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Haraka512Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Haraka512Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Haraka512Digest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.HarakaBase"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.HarakaBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.HarakaBase.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.HarakaBase.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.IsapDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.IsapDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.IsapDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.IsapDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.KeccakDigest">
      <summary>
            Implementation of Keccak based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
      <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.KeccakDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.#ctor(Org.BouncyCastle.Crypto.Digests.KeccakDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.KeccakDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.KeccakDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Absorb(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Absorb(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Absorb(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.AbsorbBits(System.Int32,System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.KeccakDigest.AlgorithmName"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.KeccakDigest.bitsInQueue"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Copy"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.KeccakDigest.dataQueue"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.DoFinal(System.Byte[],System.Int32,System.Byte,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.KeccakDigest.fixedOutputLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.GetDigestSize"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.KeccakDigest.rate"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Squeeze(System.Byte[],System.Int32,System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Squeeze(System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.KeccakDigest.squeezing"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.KeccakDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.LongDigest"></member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.LongDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.CopyIn(Org.BouncyCastle.Crypto.Digests.LongDigest)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.Finish"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.LongDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.MD2Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.MD2Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.#ctor(Org.BouncyCastle.Crypto.Digests.MD2Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.MD2Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.MD2Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD2Digest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.MD4Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.MD4Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.#ctor(Org.BouncyCastle.Crypto.Digests.MD4Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.MD4Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.MD4Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD4Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.MD5Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.MD5Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.#ctor(Org.BouncyCastle.Crypto.Digests.MD5Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.MD5Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.MD5Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.MD5Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.NonMemoableDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.GetDigestSize"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.mBaseDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NonMemoableDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.NullDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.NullDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.NullDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.NullDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.ParallelHash">
      <summary>
            ParallelHash - a hash designed  to  support the efficient hashing of very long strings, by taking advantage,
            of the parallelism available in modern processors with an optional XOF mode.
            <para>
            From NIST Special Publication 800-185 - SHA-3 Derived Functions:cSHAKE, KMAC, TupleHash and ParallelHash
            </para></summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.#ctor(Org.BouncyCastle.Crypto.Digests.ParallelHash)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.ParallelHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.#ctor(System.Int32,System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.ParallelHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.#ctor(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.ParallelHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.ParallelHash.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.OutputFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.OutputFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ParallelHash.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.PhotonBeetleDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.RipeMD128Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.#ctor(Org.BouncyCastle.Crypto.Digests.RipeMD128Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.RipeMD128Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD128Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.RipeMD160Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.#ctor(Org.BouncyCastle.Crypto.Digests.RipeMD160Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.RipeMD160Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD160Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest">
      <remarks>
        <p>Implementation of RipeMD256.</p>
        <p>
          <b>Note:</b> this algorithm offers the same level of security as RipeMD128.</p>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.#ctor">
      <summary> Standard constructor</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.#ctor(Org.BouncyCastle.Crypto.Digests.RipeMD256Digest)">
      <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.Reset">
      <summary> reset the chaining variables to the IV values.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD256Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest">
      <remarks>
        <p>Implementation of RipeMD 320.</p>
        <p>
          <b>Note:</b> this algorithm offers the same level of security as RipeMD160.</p>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.#ctor">
      <summary> Standard constructor</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.#ctor(Org.BouncyCastle.Crypto.Digests.RipeMD320Digest)">
      <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.Reset">
      <summary> reset the chaining variables to the IV values.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.RipeMD320Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Sha1Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha1Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Sha1Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha1Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Sha1Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha1Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Sha224Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha224Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Sha224Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha224Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Sha224Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha224Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Sha256Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha256Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Sha256Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha256Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Sha256Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha256Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Sha384Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha384Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Sha384Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha384Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Sha384Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha384Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Sha3Digest">
      <summary>
            Implementation of SHA-3 based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
      <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha3Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha3Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha3Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Sha3Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha3Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha3Digest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha3Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Sha3Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha3Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha3Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha3Digest.DoFinal(System.Byte[],System.Int32,System.Byte,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha3Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Sha512Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha512Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.#ctor(Org.BouncyCastle.Crypto.Digests.Sha512Digest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha512Digest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Sha512Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.Sha512tDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.#ctor(Org.BouncyCastle.Crypto.Digests.Sha512tDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha512tDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.Sha512tDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.Sha512tDigest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.ShakeDigest">
      <summary>
            Implementation of SHAKE based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
      <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.ShakeDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.#ctor(Org.BouncyCastle.Crypto.Digests.ShakeDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.ShakeDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.ShakeDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.ShakeDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.DoFinal(System.Byte[],System.Int32,System.Byte,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.OutputFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.OutputFinal(System.Byte[],System.Int32,System.Int32,System.Byte,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShakeDigest.OutputFinal(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.ShortenedDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.#ctor(Org.BouncyCastle.Crypto.IDigest,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.ShortenedDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.ShortenedDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.SkeinDigest">
      <summary>
            Implementation of the Skein parameterised hash function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:Org.BouncyCastle.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
      <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p />
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.#ctor(Org.BouncyCastle.Crypto.Digests.SkeinDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.SkeinDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
      <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:Org.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_256" /><see cref="F:Org.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_512" /> or
                                  <see cref="F:Org.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_1024" />.</param>
      <param name="digestSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.SkeinDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.Init(Org.BouncyCastle.Crypto.Parameters.SkeinParameters)">
      <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
      <param name="parameters">the parameters to apply to this engine, or <code language="cs">null</code> to use no parameters.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_1024">
      <summary>
            1024 bit block size - Skein-1024
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_256">
      <summary>
            256 bit block size - Skein-256
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_512">
      <summary>
            512 bit block size - Skein-512
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.SkeinEngine">
      <summary>
            Implementation of the Skein family of parameterised hash functions in 256, 512 and 1024 bit block
            sizes, based on the <see cref="T:Org.BouncyCastle.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
      <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p />
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p />
            This implementation is the basis for <see cref="T:Org.BouncyCastle.Crypto.Digests.SkeinDigest" /> and <see cref="T:Org.BouncyCastle.Crypto.Macs.SkeinMac" />, implementing the
            parameter based configuration system that allows Skein to be adapted to multiple applications. <br />
            Initialising the engine with <see cref="T:Org.BouncyCastle.Crypto.Parameters.SkeinParameters" /> allows standard and arbitrary parameters to
            be applied during the Skein hash function.
            <p />
            Implemented:
            <ul><li>256, 512 and 1024 bit internal states.</li><li>Full 96 bit input length.</li><li>Parameters defined in the Skein specification, and arbitrary other pre and post message
            parameters.</li><li>Arbitrary output size in 1 byte intervals.</li></ul><p />
            Not implemented:
            <ul><li>Sub-byte length input (bit padding).</li><li>Tree hashing.</li></ul></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.#ctor(Org.BouncyCastle.Crypto.Digests.SkeinEngine)">
      <summary>
            Creates a SkeinEngine as an exact copy of an existing instance.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
      <param name="blockSizeBits">the internal state size in bits - one of <see cref="F:Org.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_256" /><see cref="F:Org.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_512" /> or
                                  <see cref="F:Org.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_1024" />.</param>
      <param name="outputSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.SkeinEngine.BlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Init(Org.BouncyCastle.Crypto.Parameters.SkeinParameters)">
      <summary>
            Initialises the Skein engine with the provided parameters. See <see cref="T:Org.BouncyCastle.Crypto.Parameters.SkeinParameters" /> for
            details on the parameterisation of the Skein hash function.
            </summary>
      <param name="parameters">the parameters to apply to this engine, or <code language="cs">null</code> to use no parameters.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.SkeinEngine.OutputSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Reset">
      <summary>
            Reset the engine to the initial state (with the key and any pre-message parameters , ready to
            accept message input.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_1024">
      <summary>
            1024 bit block size - Skein-1024
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_256">
      <summary>
            256 bit block size - Skein-256
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_512">
      <summary>
            512 bit block size - Skein-512
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Parameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Parameter.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.SkeinEngine.Parameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Parameter.Type"></member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.SkeinEngine.Parameter.Value"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.SM3Digest">
      <summary>
            Implementation of Chinese SM3 digest as described at
            http://tools.ietf.org/html/draft-shen-sm3-hash-00
            and at .... ( Chinese PDF )
            </summary>
      <remarks>
            The specification says "process a bit stream",
            but this is written to process bytes in blocks of 4,
            meaning this will process 32-bit word groups.
            But so do also most other digest specifications,
            including the SHA-256 which was a origin for
            this specification.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.#ctor">
      <summary>
            Standard constructor
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.#ctor(Org.BouncyCastle.Crypto.Digests.SM3Digest)">
      <summary>
            Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.SM3Digest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.Reset">
      <summary>
            reset the chaining variables
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SM3Digest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.SparkleDigest">
      <summary>Sparkle v1.2, based on the current round 3 submission, https://sparkle-lwc.github.io/ .</summary>
      <remarks>
            Reference C implementation: https://github.com/cryptolu/sparkle.<br />
            Specification:
            https://csrc.nist.gov/CSRC/media/Projects/lightweight-cryptography/documents/finalist-round/updated-spec-doc/sparkle-spec-final.pdf .
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.#ctor(Org.BouncyCastle.Crypto.Digests.SparkleDigest.SparkleParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.SparkleDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.SparkleDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.SparkleDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.SparkleDigest.SparkleParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.TigerDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.TigerDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.#ctor(Org.BouncyCastle.Crypto.Digests.TigerDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.TigerDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.TigerDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TigerDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.TupleHash">
      <summary>
            TupleHash - a hash designed  to  simply  hash  a  tuple  of  input  strings,  any  or  all  of  which  may  be  empty  strings,
            in  an  unambiguous way with an optional XOF mode.
            <para>
            From NIST Special Publication 800-185 - SHA-3 Derived Functions:cSHAKE, KMAC, TupleHash and ParallelHash
            </para></summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.#ctor(Org.BouncyCastle.Crypto.Digests.TupleHash)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.TupleHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.TupleHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.#ctor(System.Int32,System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.TupleHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.TupleHash.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.OutputFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.OutputFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.TupleHash.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.#ctor(Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.Copy"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.Reset(Org.BouncyCastle.Utilities.IMemoable)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Digests.XoodyakDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Digests.XoodyakDigest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Digests.XoodyakDigest.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.EC.CustomNamedCurves">
      <summary>Elliptic curve registry for various customized curve implementations.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.EC.CustomNamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.EC.CustomNamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.EC.CustomNamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.EC.CustomNamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of the
            full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.EC.CustomNamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.EC.CustomNamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.EC.CustomNamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetPadBits"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.SetPadBits(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Encodings.OaepEncoding"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.OaepEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.OaepEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.IDigest,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.OaepEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.OaepEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Encodings.OaepEncoding.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabled"></member>
    <member name="F:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabledProperty"></member>
    <member name="P:Org.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AesEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.AesEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.AesEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AesEngine_X86"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.AesEngine_X86</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.IsSupported"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesEngine_X86.ProcessFourBlocks(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AesLightEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesLightEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.AesLightEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.AesLightEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesLightEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesLightEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesLightEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesLightEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AesWrapEngine">
      <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap Specification.
            <p />
            For further details see: <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesWrapEngine.#ctor">
      <summary>
            Create a regular AesWrapEngine specifying the encrypt for wrapping, decrypt for unwrapping.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesWrapEngine.#ctor(System.Boolean)">
      <summary>
            Create an AESWrapEngine where the underlying cipher is (optionally) set to decrypt for wrapping, encrypt for
            unwrapping.
            </summary>
      <param name="useReverseDirection">true if underlying cipher should be used in decryption mode, false
            otherwise.</param>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AesWrapPadEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesWrapPadEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.AesWrapPadEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AriaEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.AriaEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.A(System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.AriaEngine.AlgorithmName"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.AriaEngine.BlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.FE(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.FO(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.KeySchedule(System.Boolean,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.KeyScheduleRound(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.ReverseKeys(System.Byte[][])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.SB1(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.SB2(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.SB3(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.SB4(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.SL1(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.SL2(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaEngine.Xor(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AriaWrapEngine">
      <remarks>
            An implementation of the ARIA Key Wrapper from the NIST Key Wrap Specification.
            <p />
            For further details see: <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaWrapEngine.#ctor">
      <summary>
            Create a regular AriaWrapEngine specifying the encrypt for wrapping, decrypt for unwrapping.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaWrapEngine.#ctor(System.Boolean)">
      <summary>
            Create an AriaWrapEngine where the underlying cipher is (optionally) set to decrypt for wrapping, encrypt for
            unwrapping.
            </summary>
      <param name="useReverseDirection">true if underlying cipher should be used in decryption mode, false
            otherwise.</param>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AriaWrapPadEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AriaWrapPadEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.AriaWrapPadEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AsconEngine">
      <summary>ASCON v1.2 AEAD, https://ascon.iaik.tugraz.at/ .</summary>
      <remarks>
            https://csrc.nist.gov/CSRC/media/Projects/lightweight-cryptography/documents/finalist-round/updated-spec-doc/ascon-spec-final.pdf<br />
            ASCON v1.2 AEAD with reference to C Reference Impl from: https://github.com/ascon/ascon-c .
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.#ctor(Org.BouncyCastle.Crypto.Engines.AsconEngine.AsconParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.AsconEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.AsconEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.GetIVBytesSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.GetKeyBytesSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AsconEngine.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.AsconEngine.AsconParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.BlowfishEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.BlowfishEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.BlowfishEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.BlowfishEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.BlowfishEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.BlowfishEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.BlowfishEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.BlowfishEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.CamelliaEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.CamelliaEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.CamelliaEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaLightEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.CamelliaWrapEngine">
      <remarks>
            An implementation of the Camellia key wrapper based on RFC 3657/RFC 3394.
            <p />
            For further details see: <a href="http://www.ietf.org/rfc/rfc3657.txt">http://www.ietf.org/rfc/rfc3657.txt</a>.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.CamelliaWrapEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.CamelliaWrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Cast5Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Cast5Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Cast5Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Cast5Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Cast5Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Cast5Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Cast5Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Cast5Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Cast6Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Cast6Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Cast6Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Cast6Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Cast6Engine.GetBlockSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine">
      <summary>
            Implementation of Daniel J. Bernstein's ChaCha stream cipher.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine.#ctor">
      <summary>
            Creates a 20 rounds ChaCha engine.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine.AdvanceCounter"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine.GenerateKeyStream(System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine.NonceSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine.ResetCounter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine.SetKey(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.ChaChaEngine">
      <summary>
            Implementation of Daniel J. Bernstein's ChaCha stream cipher.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaChaEngine.#ctor">
      <summary>
            Creates a 20 rounds ChaCha engine.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaChaEngine.#ctor(System.Int32)">
      <summary>
            Creates a ChaCha engine with a specific number of rounds.
            </summary>
      <param name="rounds">the number of rounds (must be an even number).</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaChaEngine.AdvanceCounter"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.ChaChaEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaChaEngine.GenerateKeyStream(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaChaEngine.ResetCounter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ChaChaEngine.SetKey(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.DesEdeEngine">
      <remarks>A class that provides a basic DESede (or Triple DES) engine.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.DesEdeEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.DesEdeEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.DesEngine">
      <remarks>A class that provides a basic DES engine.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.DesEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.DesEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEngine.GenerateWorkingKey(System.Boolean,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEngine.GetWorkingKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Dstu7624Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624Engine.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Dstu7624Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Dstu7624Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Dstu7624WrapEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624WrapEngine.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Dstu7624WrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Dstu7624WrapEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624WrapEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Dstu7624WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.ElGamalEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ElGamalEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.ElGamalEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.ElGamalEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ElGamalEngine.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ElGamalEngine.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ElGamalEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ElGamalEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Gost28147Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Gost28147Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.GetSBox(System.String)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.GetSBoxName(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Gost28147Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Grain128AeadEngine.ReturnByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.HC128Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC128Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.HC128Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.HC128Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC128Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC128Engine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC128Engine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC128Engine.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC128Engine.ReturnByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.HC256Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC256Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.HC256Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.HC256Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC256Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC256Engine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC256Engine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC256Engine.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.HC256Engine.ReturnByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.IdeaEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IdeaEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.IdeaEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.IdeaEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IdeaEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IdeaEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IdeaEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IdeaEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.IesEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IesEngine.#ctor(Org.BouncyCastle.Crypto.IBasicAgreement,Org.BouncyCastle.Crypto.IDerivationFunction,Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.IesEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IesEngine.#ctor(Org.BouncyCastle.Crypto.IBasicAgreement,Org.BouncyCastle.Crypto.IDerivationFunction,Org.BouncyCastle.Crypto.IMac,Org.BouncyCastle.Crypto.BufferedBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.IesEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IesEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IesEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.IsaacEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IsaacEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.IsaacEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.IsaacEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IsaacEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IsaacEngine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IsaacEngine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IsaacEngine.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.IsaacEngine.ReturnByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.AddCryptedBlocks(System.Byte[],System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.Encrypt(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessData(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.NoekeonEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NoekeonEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.NoekeonEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.NoekeonEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NoekeonEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NoekeonEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NoekeonEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NoekeonEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RC2Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RC2Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RC2Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RC2WrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RC4Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC4Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RC4Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RC4Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC4Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC4Engine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC4Engine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC4Engine.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC4Engine.ReturnByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RC532Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC532Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RC532Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RC532Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC532Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC532Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC532Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC532Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RC564Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC564Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RC564Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RC564Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC564Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC564Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC564Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC564Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RC6Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC6Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RC6Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RC6Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC6Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC6Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC6Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC6Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine">
      <summary>An implementation of the AES Key Wrap with Padding specification as described in RFC 3349.</summary>
      <remarks>
            For further details see: Schaad, J. and R. Housley, "Advanced Encryption Standard (AES) Key Wrap Algorithm",
            RFC 3394, DOI 10.17487/RFC3394, September 2002, &lt;https://www.rfc-editor.org/info/rfc3394\&gt;, and
            http://csrc.nist.gov/encryption/kms/key-wrap.pdf.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Rfc5649WrapEngine">
      <summary>An implementation of the AES Key Wrap with Padding specification as described in RFC 5649.</summary>
      <remarks>
            For further details see: Housley, R. and M. Dworkin, "Advanced Encryption Standard (AES) Key Wrap with Padding Algorithm",
            RFC 5649, DOI 10.17487/RFC5649, September 2009, &lt;https://www.rfc-editor.org/info/rfc5649&gt;, and
            http://csrc.nist.gov/encryption/kms/key-wrap.pdf.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc5649WrapEngine.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.Rfc5649WrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Rfc5649WrapEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc5649WrapEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc5649WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Rfc5649WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RijndaelEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RijndaelEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RijndaelEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RijndaelEngine.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RijndaelEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RijndaelEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RijndaelEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RijndaelEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RijndaelEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RijndaelEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine.#ctor(Org.BouncyCastle.Crypto.IRsa)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindedEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.#ctor(Org.BouncyCastle.Crypto.IRsa)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RsaCoreEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine.ConvertInput(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine.ConvertOutput(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaCoreEngine.ProcessBlock(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.RsaEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RsaEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.#ctor(Org.BouncyCastle.Crypto.IRsa)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.RsaEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RsaEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.GetInputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.GetOutputBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.Salsa20Engine">
      <summary>
            Implementation of Daniel J. Bernstein's Salsa20 stream cipher, Snuffle 2005
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.#ctor">
      <summary>
            Creates a 20 round Salsa20 engine.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.#ctor(System.Int32)">
      <summary>
            Creates a Salsa20 engine with a specific number of rounds.
            </summary>
      <param name="rounds">the number of rounds (must be an even number).</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.AdvanceCounter"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.AlgorithmName"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.DEFAULT_ROUNDS"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.GenerateKeyStream(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.NonceSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.ResetCounter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.ReturnByte(System.Byte)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.rounds"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.Salsa20Engine.SetKey(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SeedEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SeedEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SeedEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.SeedEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SeedEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SeedEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SeedEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SeedEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SeedWrapEngine">
      <remarks>
            An implementation of the SEED key wrapper based on RFC 4010/RFC 3394.
            <p />
            For further details see: <a href="http://www.ietf.org/rfc/rfc4010.txt">http://www.ietf.org/rfc/rfc4010.txt</a>.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SeedWrapEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SeedWrapEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SerpentEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SerpentEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.AlgorithmName"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.BlockSize"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.encrypting"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib0(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib1(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib2(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib3(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib4(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib5(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib6(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib7(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.InverseLT"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.LT"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb0(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb1(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb2(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb3(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb4(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb5(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb6(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb7(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.wKey"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.X0"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.X1"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.X2"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.SerpentEngineBase.X3"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SkipjackEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SkipjackEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SkipjackEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.SkipjackEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SkipjackEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SkipjackEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SkipjackEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SkipjackEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SM2Engine">
      <summary>
            SM2 public key encryption engine - based on https://tools.ietf.org/html/draft-shen-sm2-ecdsa-02.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SM2Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.#ctor(Org.BouncyCastle.Crypto.Engines.SM2Engine.Mode)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SM2Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SM2Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.#ctor(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.Engines.SM2Engine.Mode)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SM2Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.CreateBasePointMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.ProcessBlock(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM2Engine.ProcessBlock(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SM2Engine.Mode"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SM4Engine">
      <summary>SM4 Block Cipher - SM4 is a 128 bit block cipher with a 128 bit key.</summary>
      <remarks>
            The implementation here is based on the document <a href="http://eprint.iacr.org/2008/329.pdf">http://eprint.iacr.org/2008/329.pdf</a>
            by Whitfield Diffie and George Ledin, which is a translation of Prof. LU Shu-wang's original standard.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM4Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SM4Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.SM4Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM4Engine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM4Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM4Engine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SM4Engine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SparkleEngine">
      <summary>Sparkle v1.2, based on the current round 3 submission, https://sparkle-lwc.github.io/ .</summary>
      <remarks>
            Reference C implementation: https://github.com/cryptolu/sparkle.<br />
            Specification:
            https://csrc.nist.gov/CSRC/media/Projects/lightweight-cryptography/documents/finalist-round/updated-spec-doc/sparkle-spec-final.pdf .
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.#ctor(Org.BouncyCastle.Crypto.Engines.SparkleEngine.SparkleParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.SparkleEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.SparkleEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.GetIVBytesSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.GetKeyBytesSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.SparkleEngine.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.SparkleEngine.SparkleParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.TeaEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TeaEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.TeaEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.TeaEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TeaEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TeaEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TeaEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TeaEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.ThreefishEngine">
      <summary>
            Implementation of the Threefish tweakable large block cipher in 256, 512 and 1024 bit block
            sizes.
            </summary>
      <remarks>
            This is the 1.3 version of Threefish defined in the Skein hash function submission to the NIST
            SHA-3 competition in October 2010.
            <p />
            Threefish was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p />
            This implementation inlines all round functions, unrolls 8 rounds, and uses 1.2k of static tables
            to speed up key schedule injection. <br />
            2 x block size state is retained by each cipher instance.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.#ctor(System.Int32)">
      <summary>
            Constructs a new Threefish cipher, with a specified block size.
            </summary>
      <param name="blocksizeBits">the block size in bits, one of <see cref="F:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256" />, <see cref="F:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512" />,
                                 <see cref="F:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024" /> .</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.AlgorithmName"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024">
      <summary>
            1024 bit block size - Threefish-1024
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256">
      <summary>
            256 bit block size - Threefish-256
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512">
      <summary>
            512 bit block size - Threefish-512
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
            Initialise the engine.
            </summary>
      <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
      <param name="parameters">an instance of <see cref="T:Org.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters" /> or <see cref="T:Org.BouncyCastle.Crypto.Parameters.KeyParameter" /> (to
                          use a 0 tweak)</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.ThreefishEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.TnepresEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TnepresEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.TnepresEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.TnepresEngine.AlgorithmName"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.TwofishEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TwofishEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.TwofishEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.TwofishEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TwofishEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TwofishEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TwofishEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.TwofishEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.VmpcEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.VmpcEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.VmpcEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcEngine.InitKey(System.Byte[],System.Byte[])"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.VmpcEngine.n"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.VmpcEngine.P"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcEngine.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcEngine.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcEngine.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcEngine.ReturnByte(System.Byte)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.VmpcEngine.s"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.VmpcEngine.workingIV"></member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.VmpcEngine.workingKey"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.VmpcKsa3Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcKsa3Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.VmpcKsa3Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.VmpcKsa3Engine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.VmpcKsa3Engine.InitKey(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.XSalsa20Engine">
      <summary>
            Implementation of Daniel J. Bernstein's XSalsa20 stream cipher - Salsa20 with an extended nonce.
            </summary>
      <remarks>
            XSalsa20 requires a 256 bit key, and a 192 bit nonce.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.XSalsa20Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.XSalsa20Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.XSalsa20Engine.AlgorithmName"></member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.XSalsa20Engine.NonceSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.XSalsa20Engine.SetKey(System.Byte[],System.Byte[])">
      <summary>
            XSalsa20 key generation: process 256 bit input key and 128 bits of the input nonce
            using a core Salsa20 function without input addition to produce 256 bit working key
            and use that with the remaining 64 bits of nonce to initialize a standard Salsa20 engine state.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Engines.XteaEngine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.XteaEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Engines.XteaEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.XteaEngine.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.XteaEngine.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.XteaEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.XteaEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.XteaEngine.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Fpe.FpeEngine">
      <summary>Base class for format-preserving encryption.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeEngine.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Fpe.FpeEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Fpe.FpeEngine.baseCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeEngine.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeEngine.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Fpe.FpeEngine.forEncryption"></member>
    <member name="F:Org.BouncyCastle.Crypto.Fpe.FpeEngine.fpeParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeEngine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
            Initialize the FPE engine for encryption/decryption.
            </summary>
      <param name="forEncryption">true if initialising for encryption, false otherwise.</param>
      <param name="parameters ">the key and other parameters to use to set the engine up.</param>
      <returns>number of bytes output.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeEngine.IsOverrideSet(System.String)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Process length bytes from inBuf, writing the output to outBuf.
            </summary>
      <param name="inBuf">input data.</param>
      <param name="inOff">offset in input data to start at.</param>
      <param name="length">number of bytes to process.</param>
      <param name="outBuf">destination buffer.</param>
      <param name="outOff">offset to start writing at in destination buffer.</param>
      <returns>number of bytes output.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf1Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine.DecryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine.EncryptBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Fpe.FpeFf3_1Engine.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.#ctor(System.Int32,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.BCrypt"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.BCrypt.Generate(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.BCrypt.PasswordToByteArray(System.Char[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator.EngineGenerateKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator.EngineGenerateKeyParameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator.EngineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.DesKeyGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesKeyGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DesKeyGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesKeyGenerator.EngineGenerateKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesKeyGenerator.EngineGenerateKeyParameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DesKeyGenerator.EngineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.DHBasicKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHBasicKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DHBasicKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHBasicKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHBasicKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.DHKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DHKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.DHParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHParametersGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DHParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHParametersGenerator.GenerateParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHParametersGenerator.Init(System.Int32,System.Int32,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.DsaKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DsaKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.CalculateGenerator_FIPS186_2(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.CalculateGenerator_FIPS186_3_Unverifiable(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.CalculateGenerator_FIPS186_3_Verifiable(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters">
      <summary>Generates a set of <c>DsaParameters</c></summary>
      <remarks>Can take a while...</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters_FIPS186_2"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters_FIPS186_3"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Hash(Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Inc(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Init(Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters)">
      <summary>Initialise the generator for DSA 2</summary>
      <param name="parameters">An instance of <c>DsaParameterGenerationParameters</c> used to configure this generator</param>
      <remarks>You must use this Init method if you need to generate parameters for DSA 2 keys</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Init(System.Int32,System.Int32,Org.BouncyCastle.Security.SecureRandom)">
      <summary>Initialise the generator</summary>
      <param name="size">the size of keys in bits (from 512 up to 1024, and a multiple of 64)</param>
      <param name="certainty">measure of robustness of primes (at least 80 for FIPS 186-2 compliance)</param>
      <param name="random">the source of randomness to use</param>
      <remarks>This form can only be used for older DSA (pre-DSA2) parameters</remarks>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator.CreateBasePointMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Ed25519KeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Ed25519KeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Ed25519KeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Ed25519KeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Ed25519KeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Ed448KeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Ed448KeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Ed448KeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Ed448KeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Ed448KeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.ElGamalKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ElGamalKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.ElGamalKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ElGamalKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ElGamalKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator.GenerateParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator.Init(System.Int32,System.Int32,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Gost3410KeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Gost3410KeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Gost3410KeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Gost3410KeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Gost3410KeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.GenerateParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.Init(System.Int32,System.Int32,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.HkdfBytesGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.HkdfBytesGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.HkdfBytesGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.HkdfBytesGenerator.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.HkdfBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.HkdfBytesGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.HkdfBytesGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Kdf1BytesGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Kdf1BytesGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Kdf1BytesGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Kdf2BytesGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Kdf2BytesGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Kdf2BytesGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator.#ctor(Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.KdfCounterBytesGenerator.Mac"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator.#ctor(Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.KdfDoublePipelineIterationBytesGenerator.Mac"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator.#ctor(Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.KdfFeedbackBytesGenerator.Mac"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator">
      <summary>Generator for MGF1 as defined in Pkcs 1v2</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator</parameter>
          </include>
        </markup>
      </summary>
      <param name="digest">the digest to be used as the source of generated bytes</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.Digest">
      <summary>the underlying digest.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Fill <c>len</c> bytes of the output buffer with bytes generated from the derivation function.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.GenerateBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.Init(Org.BouncyCastle.Crypto.IDerivationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.OpenBsdBCrypt"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenBsdBCrypt.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.OpenBsdBCrypt</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenBsdBCrypt.CheckPassword(System.String,System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenBsdBCrypt.Generate(System.Char[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenBsdBCrypt.Generate(System.String,System.Char[],System.Byte[],System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
      <param name="digest">the digest to use as the PRF.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.String,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedMacParameters(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.String,System.Int32,System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.IVMaterial"></member>
    <member name="F:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.KeyMaterial"></member>
    <member name="F:Org.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.MacMaterial"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedMacParameters(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.String,System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedMacParameters(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.String,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.String,System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator">
      <summary>
            Generates keys for the Poly1305 MAC.
            </summary>
      <remarks>
            Poly1305 keys are 256 bit keys consisting of a 128 bit secret key used for the underlying block
            cipher followed by a 128 bit {@code r} value used for the polynomial portion of the Mac. <br />
            The {@code r} value has a specific format with some bits required to be cleared, resulting in an
            effective 106 bit key. <br />
            A separately generated 256 bit key can be modified to fit the Poly1305 key format by using the
            {@link #clamp(byte[])} method to clear the required bits.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.CheckKey(System.Byte[])">
      <summary>
            Checks a 32 byte key for compliance with the Poly1305 key requirements, e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])" />.
            </summary>
      <param name="key">Key.</param>
      <exception cref="T:System.ArgumentException">if the key is of the wrong length, or has invalid bits set
                      in the <code>r</code> portion of the key.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])">
      <summary>
            Modifies an existing 32 byte key value to comply with the requirements of the Poly1305 key by
            clearing required bits in the <code>r</code> (second 16 bytes) portion of the key.<br />
            Specifically:
            <ul><li>r[3], r[7], r[11], r[15] have top four bits clear (i.e., are {0, 1, . . . , 15})</li><li>r[4], r[8], r[12] have bottom two bits clear (i.e., are in {0, 4, 8, . . . , 252})</li></ul></summary>
      <param name="key">a 32 byte key value <code>k[0] ... k[15], r[0] ... r[15]</code></param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.EngineGenerateKey">
      <summary>
            Generates a 256 bit key in the format required for Poly1305 - e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])" />.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.EngineGenerateKeyParameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.EngineInit(Org.BouncyCastle.Crypto.KeyGenerationParameters)">
      <summary>
            Initialises the key generator.
            </summary>
      <remarks>
            Poly1305 keys are always 256 bits, so the key length in the provided parameters is ignored.
            </remarks>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.GenerateBlindingFactor"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.ChooseRandomPrime(System.Int32,Org.BouncyCastle.Math.BigInteger)">
      <summary>Choose a random prime value for use with RSA</summary>
      <param name="bitlength">the bit-length of the returned prime</param>
      <param name="e">the RSA public exponent</param>
      <returns>a prime p, with (p-1) relatively prime to e</returns>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.DefaultPublicExponent"></member>
    <member name="F:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.DefaultTests"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.One"></member>
    <member name="F:Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.SCrypt">
      <summary>Implementation of the scrypt a password-based key derivation function.</summary>
      <remarks>
            Scrypt was created by Colin Percival and is specified in
            <a href="http://tools.ietf.org/html/draft-josefsson-scrypt-kdf-01">draft-josefsson-scrypt-kd</a>.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.SCrypt.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.SCrypt</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.SCrypt.Generate(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Generate a key using the scrypt key derivation function.</summary>
      <param name="P">the bytes of the pass phrase.</param>
      <param name="S">the salt to use for this invocation.</param>
      <param name="N">CPU/Memory cost parameter. Must be larger than 1, a power of 2 and less than
                <code>2^(128 * r / 8)</code>.</param>
      <param name="r">the block size, must be &gt;= 1.</param>
      <param name="p">Parallelization parameter. Must be a positive integer less than or equal to
                <code>int.MaxValue / (128 * r * 8)</code>.</param>
      <param name="dkLen">the length of the key to generate.</param>
      <returns>the generated key.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.X25519KeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.X25519KeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.X25519KeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.X25519KeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.X25519KeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Generators.X448KeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.X448KeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Generators.X448KeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.X448KeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.X448KeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IO.CipherStream"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.#ctor(System.IO.Stream,Org.BouncyCastle.Crypto.IBufferedCipher,Org.BouncyCastle.Crypto.IBufferedCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.IO.CipherStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IO.CipherStream.CanRead"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.CipherStream.CanSeek"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.CipherStream.CanWrite"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.Flush"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.CipherStream.Length"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.CipherStream.Position"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.ReadByte"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.CipherStream.ReadCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.Seek(System.Int64,System.IO.SeekOrigin)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.SetLength(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.CipherStream.WriteByte(System.Byte)"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.CipherStream.WriteCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.IO.DigestSink"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestSink.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.IO.DigestSink</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestSink.Digest"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestSink.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestSink.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestSink.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestSink.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestSink.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IO.DigestStream"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.#ctor(System.IO.Stream,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.IO.DigestStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestStream.CanRead"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestStream.CanSeek"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestStream.CanWrite"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.Flush"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestStream.Length"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestStream.Position"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.ReadByte"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestStream.ReadDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.Seek(System.Int64,System.IO.SeekOrigin)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.SetLength(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.DigestStream.WriteByte(System.Byte)"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.DigestStream.WriteDigest"></member>
    <member name="T:Org.BouncyCastle.Crypto.IO.MacSink"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacSink.#ctor(Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.IO.MacSink</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacSink.Mac"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacSink.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacSink.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacSink.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacSink.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacSink.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IO.MacStream"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.#ctor(System.IO.Stream,Org.BouncyCastle.Crypto.IMac,Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.IO.MacStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacStream.CanRead"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacStream.CanSeek"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacStream.CanWrite"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.Flush"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacStream.Length"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacStream.Position"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.ReadByte"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacStream.ReadMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.Seek(System.Int64,System.IO.SeekOrigin)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.SetLength(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.MacStream.WriteByte(System.Byte)"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.MacStream.WriteMac"></member>
    <member name="T:Org.BouncyCastle.Crypto.IO.SignerSink"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerSink.#ctor(Org.BouncyCastle.Crypto.ISigner)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.IO.SignerSink</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerSink.Signer"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerSink.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerSink.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerSink.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerSink.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerSink.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.IO.SignerStream"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.#ctor(System.IO.Stream,Org.BouncyCastle.Crypto.ISigner,Org.BouncyCastle.Crypto.ISigner)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.IO.SignerStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerStream.CanRead"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerStream.CanSeek"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerStream.CanWrite"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.Flush"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerStream.Length"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerStream.Position"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.ReadByte"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerStream.ReadSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.Seek(System.Int64,System.IO.SeekOrigin)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.SetLength(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Crypto.IO.SignerStream.WriteByte(System.Byte)"></member>
    <member name="P:Org.BouncyCastle.Crypto.IO.SignerStream.WriteSigner"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.CMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.CMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.CMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.CMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac">
      <summary>
            Implementation of DSTU7564 mac mode
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.Dstu7564Mac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7564Mac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.Dstu7624Mac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Dstu7624Mac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.GMac">
      <summary>
            The GMAC specialisation of Galois/Counter mode (GCM) detailed in NIST Special Publication
            800-38D.
            </summary>
      <remarks>
            GMac is an invocation of the GCM mode where no data is encrypted (i.e. all input data to the Mac
            is processed as additional authenticated data with the underlying GCM block cipher).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.#ctor(Org.BouncyCastle.Crypto.Modes.GcmBlockCipher)">
      <summary>
            Creates a GMAC based on the operation of a block cipher in GCM mode.
            </summary>
      <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
      <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.#ctor(Org.BouncyCastle.Crypto.Modes.GcmBlockCipher,System.Int32)">
      <summary>
            Creates a GMAC based on the operation of a 128 bit block cipher in GCM mode.
            </summary>
      <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
      <param name="macSizeBits">the mac size to generate, in bits. Must be a multiple of 8, between 32 and 128 (inclusive).
            Sizes less than 96 are not recommended, but are supported for specialized applications.</param>
      <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.GMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
            Initialises the GMAC - requires a <see cref="T:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV" /> 
            providing a <see cref="T:Org.BouncyCastle.Crypto.Parameters.KeyParameter" /> and a nonce.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.GMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.Gost28147Mac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.Gost28147Mac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Gost28147Mac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.HMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.HMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.#ctor(Org.BouncyCastle.Crypto.IDigest,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.HMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.HMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.GetUnderlyingDigest"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.HMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.KMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.KMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.KMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.Output(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.Output(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.OutputFinal(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.OutputFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.KMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.Poly1305">
      <summary>
            Poly1305 message authentication code, designed by D. J. Bernstein.
            </summary>
      <remarks>
            Poly1305 computes a 128-bit (16 bytes) authenticator, using a 128 bit nonce and a 256 bit key
            consisting of a 128 bit key applied to an underlying cipher, and a 128 bit key (with 106
            effective key bits) used in the authenticator.
            
            The polynomial calculation in this implementation is adapted from the public domain <a href="https://github.com/floodyberry/poly1305-donna">poly1305-donna-unrolled</a> C implementation
            by Andrew M (@floodyberry).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.Poly1305</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.Poly1305</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.Poly1305.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.Init(Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
            Initialises the Poly1305 MAC.
            </summary>
      <param name="parameters">a {@link ParametersWithIV} containing a 128 bit nonce and a {@link KeyParameter} with
                     a 256 bit key complying to the {@link Poly1305KeyGenerator Poly1305 key format}.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.Poly1305.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.SipHash">
      <summary>
            Implementation of SipHash as specified in "SipHash: a fast short-input PRF", by Jean-Philippe
            Aumasson and Daniel J. Bernstein (https://131002.net/siphash/siphash.pdf).
            </summary>
      <remarks>
            "SipHash is a family of PRFs SipHash-c-d where the integer parameters c and d are the number of
            compression rounds and the number of finalization rounds. A compression round is identical to a
            finalization round and this round function is called SipRound. Given a 128-bit key k and a
            (possibly empty) byte string m, SipHash-c-d returns a 64-bit value..."
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.#ctor">
      <summary>SipHash-2-4</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.#ctor(System.Int32,System.Int32)">
      <summary>SipHash-c-d</summary>
      <param name="c">the number of compression rounds</param>
      <param name="d">the number of finalization rounds</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.SipHash.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.ApplySipRounds(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.c"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.d"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.DoFinal"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.k0"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.k1"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.m"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.ProcessMessageWord"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.RotateLeft(System.Int64,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SipHash.Update(System.Byte)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.v0"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.v1"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.v2"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.v3"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.wordCount"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SipHash.wordPos"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.SkeinMac">
      <summary>
            Implementation of the Skein parameterised MAC function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:Org.BouncyCastle.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
      <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p />
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.#ctor(Org.BouncyCastle.Crypto.Macs.SkeinMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.SkeinMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructs a Skein MAC with an internal state size and output size.
            </summary>
      <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:Org.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_256" /><see cref="F:Org.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_512" /> or
                                  <see cref="F:Org.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_1024" />.</param>
      <param name="digestSizeBits">the output/MAC size to produce in bits, which must be an integral number of
                                 bytes.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.SkeinMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
      <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.Reset"></member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_1024">
      <summary>
            1024 bit block size - Skein-1024
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_256">
      <summary>
            256 bit block size - Skein-256
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_512">
      <summary>
            512 bit block size - Skein-512
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.SkeinMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Macs.VmpcMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Macs.VmpcMac</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Macs.VmpcMac.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.GetMacSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.Init(Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Macs.VmpcMac.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.CbcBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CbcBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.CcmBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CcmBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.CfbBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.CfbBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.#ctor(Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.ChaCha20Poly1305.Reset"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.CtsBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.#ctor(Org.BouncyCastle.Crypto.Modes.IBlockCipherMode)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.CtsBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.EaxBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.EaxBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.EcbBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.EcbBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher">
      <summary>
            Implements the Galois/Counter mode (GCM) detailed in NIST Special Publication 800-38D.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.GcmBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.GcmBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <remarks>
            MAC sizes from 32 bits to 128 bits (must be a multiple of 8) are supported. The default is 128 bits.
            Sizes less than 96 are not recommended, but are supported for specialized applications.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.GcmBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.GcmSivBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.GOfbBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher">
      <summary>An IAeadCipher based on an IBlockCipher.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetBlockSize">
      <returns>The block size for this cipher, in bytes.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher.UnderlyingCipher">
      <summary>The block cipher underlying this algorithm.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.IAeadCipher">
      <summary>
            A cipher mode that includes authenticated encryption with a streaming mode and optional
            associated data.
            </summary>
      <remarks>
            Implementations of this interface may operate in a packet mode (where all input data is
            buffered and processed during the call to DoFinal, or in a streaming mode (where output
            data is incrementally produced with each call to ProcessByte or ProcessBytes. This is
            important to consider during decryption: in a streaming mode, unauthenticated plaintext
            data may be output prior to the call to DoFinal that results in an authentication failure.
            The higher level protocol utilising this cipher must ensure the plaintext data is handled
            appropriately until the end of data is reached and the entire ciphertext is authenticated.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.IAeadCipher.AlgorithmName">
      <summary>The name of the algorithm this cipher implements.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the cipher.</summary>
      <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
      <param name="parameters">The key or other data required by the cipher.</param>
      <remarks>Parameter can either be an AeadParameters or a ParametersWithIV object.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.ProcessAadByte(System.Byte)">
      <summary>Add a single byte to the associated data check.</summary>
      <param name="input">The byte to be processed.</param>
      <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Add a sequence of bytes to the associated data check.</summary>
      <param name="inBytes">The input byte array.</param>
      <param name="inOff">The offset into the input array where the data to be processed starts.</param>
      <param name="len">The number of bytes to be processed.</param>
      <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.ProcessAadBytes(System.ReadOnlySpan{System.Byte})">
      <summary>Add a span of bytes to the associated data check.</summary>
      <param name="input">the span containing the data.</param>
      <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IAeadCipher.Reset">
      <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.IBlockCipherMode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.IBlockCipherMode.IsPartialBlockOkay">
      <summary>Indicates whether this cipher mode can handle partial blocks.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.IBlockCipherMode.Reset">
      <summary>
            Reset the cipher mode to the same state as it was after the last init (if there was one).
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.IBlockCipherMode.UnderlyingCipher">
      <summary>Return the <code cref="T:Org.BouncyCastle.Crypto.IBlockCipher" /> underlying this cipher mode.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
            Base constructor. Nb value is set to 4.
            </summary>
      <param name="engine">base cipher to use under CCM.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
      <summary>
            Constructor allowing Nb configuration.
            
            Nb is a parameter specified in CCM mode of DSTU7624 standard.
            This parameter specifies maximum possible length of input.It should
            be calculated as follows: Nb = 1 / 8 * (-3 + log[2]Nmax) + 1,
            where Nmax - length of input message in bits.For practical reasons
            Nmax usually less than 4Gb, e.g. for Nmax = 2^32 - 1, Nb = 4.
            </summary>
      <param name="engine">base cipher to use under CCM.</param>
      <param name="Nb">Nb value to use.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.ProcessPacket(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.KCcmBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.CalculateByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.ReturnByte(System.Byte)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.KCtrBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher">
      <summary>An implementation of <a href="https://tools.ietf.org/html/rfc7253">RFC 7253 on The OCB
             Authenticated-Encryption Algorithm</a>.</summary>
      <remarks>
             For those still concerned about the original patents around this, please see:
             <para>https://mailarchive.ietf.org/arch/msg/cfrg/qLTveWOdTJcLn4HP3ev-vrj05Vg/</para>
             Text reproduced below:
             <para>
             Phillip Rogaway&lt;rogaway@cs.ucdavis.edu&gt; Sat, 27 February 2021 02:46 UTC
            
             I can confirm that I have abandoned all OCB patents and placed into the public domain all OCB-related IP of
             mine. While I have been telling people this for quite some time, I don't think I ever made a proper announcement
             to the CFRG or on the OCB webpage. Consider that done.
             </para></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.OcbBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.Clear(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.GetLSub(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.GetMac"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.OCB_double(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.OCB_extend(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.OCB_ntz(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessAadByte(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessAadBytes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessHashBlock"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessMainBlock(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessMainBlock(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ProcessNonce(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.Reset(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.ShiftLeft(System.Byte[],System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.UnderlyingCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.UpdateHASH(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OcbBlockCipher.Xor(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.OfbBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OfbBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.SicBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.SicBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.GetBlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.IsPartialBlockOkay"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.ProcessBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.Reset"></member>
    <member name="P:Org.BouncyCastle.Crypto.Modes.SicBlockCipher.UnderlyingCipher"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmExponentiator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmExponentiator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmExponentiator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmExponentiator.ExponentiateX(System.Int64,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmExponentiator.Init(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmMultiplier.Init(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.BasicGcmMultiplier.MultiplyH(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator.ExponentiateX(System.Int64,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator.Init(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier.Init(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier.MultiplyH(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.Tables1kGcmExponentiator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables1kGcmExponentiator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.Gcm.Tables1kGcmExponentiator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables1kGcmExponentiator.ExponentiateX(System.Int64,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables1kGcmExponentiator.Init(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.Tables4kGcmMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables4kGcmMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.Gcm.Tables4kGcmMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables4kGcmMultiplier.Init(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables4kGcmMultiplier.MultiplyH(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.Tables64kGcmMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables64kGcmMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.Gcm.Tables64kGcmMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables64kGcmMultiplier.Init(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables64kGcmMultiplier.MultiplyH(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Modes.Gcm.Tables8kGcmMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables8kGcmMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Modes.Gcm.Tables8kGcmMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables8kGcmMultiplier.Init(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Modes.Gcm.Tables8kGcmMultiplier.MultiplyH(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.Asn1CipherBuilderWithKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1CipherBuilderWithKey.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Int32,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1CipherBuilderWithKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1CipherBuilderWithKey.AlgorithmDetails"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1CipherBuilderWithKey.BuildCipher(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1CipherBuilderWithKey.GetMaxOutputSize(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1CipherBuilderWithKey.Key"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory.#ctor(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory.AlgorithmDetails"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory.CreateCalculator"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory.DigestLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory.Get(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1DigestFactory.Get(System.String)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper.#ctor(System.String,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper.AlgorithmDetails"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyUnwrapper.Unwrap(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable,Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.#ctor(System.String,Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.AlgorithmDetails"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1KeyWrapper.Wrap(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.Asn1SignatureFactory">
      <summary>
            Calculator factory class for signature generation in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Base constructor.
            </summary>
      <param name="algorithm">The name of the signature algorithm to use.</param>
      <param name="privateKey">The private key to be used in the signing operation.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Constructor which also specifies a source of randomness to be used if one is required.
            </summary>
      <param name="algorithm">The name of the signature algorithm to use.</param>
      <param name="privateKey">The private key to be used in the signing operation.</param>
      <param name="random">The source of randomness to be used in signature calculation.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.AlgorithmDetails"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.CreateCalculator"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactory">
      <summary>
            Verifier class for signature verification in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactory.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactory.#ctor(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Base constructor.
            </summary>
      <param name="algorithm">The name of the signature algorithm to use.</param>
      <param name="publicKey">The public key to be used in the verification operation.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactory.AlgorithmDetails"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactory.CreateCalculator"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider">
      <summary>
            Provider class which supports dynamic creation of signature verifiers.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Base constructor - specify the public key to be used in verification.
            </summary>
      <param name="publicKey">The public key to be used in creating verifiers provided by this object.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider.CreateVerifierFactory(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.BufferedCipherWrapper"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.BufferedCipherWrapper.#ctor(Org.BouncyCastle.Crypto.IBufferedCipher,System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.BufferedCipherWrapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.BufferedCipherWrapper.GetMaxOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.BufferedCipherWrapper.GetUpdateOutputSize(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.BufferedCipherWrapper.Stream"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultDigestCalculator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultDigestCalculator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultDigestCalculator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultDigestCalculator.GetResult"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.DefaultDigestCalculator.Stream"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultDigestResult"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultDigestResult.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultDigestResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultDigestResult.Collect"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultDigestResult.Collect(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultDigestResult.Collect(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultDigestResult.GetMaxResultLength"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultMacCalculator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultMacCalculator.#ctor(Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultMacCalculator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultMacCalculator.GetResult"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.DefaultMacCalculator.Stream"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultMacResult"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultMacResult.#ctor(Org.BouncyCastle.Crypto.IMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultMacResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultMacResult.Collect"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultMacResult.Collect(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultMacResult.Collect(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultMacResult.GetMaxResultLength"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultSignatureCalculator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultSignatureCalculator.#ctor(Org.BouncyCastle.Crypto.ISigner)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultSignatureCalculator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultSignatureCalculator.GetResult"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.DefaultSignatureCalculator.Stream"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultSignatureResult"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultSignatureResult.#ctor(Org.BouncyCastle.Crypto.ISigner)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultSignatureResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultSignatureResult.Collect"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultSignatureResult.Collect(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultSignatureResult.Collect(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultSignatureResult.GetMaxResultLength"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultVerifierCalculator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultVerifierCalculator.#ctor(Org.BouncyCastle.Crypto.ISigner)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultVerifierCalculator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultVerifierCalculator.GetResult"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.DefaultVerifierCalculator.Stream"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.DefaultVerifierResult"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultVerifierResult.#ctor(Org.BouncyCastle.Crypto.ISigner)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.DefaultVerifierResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultVerifierResult.IsVerified(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.DefaultVerifierResult.IsVerified(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Operators.GenericKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.GenericKey.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.GenericKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.GenericKey.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.GenericKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Operators.GenericKey.#ctor(System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Operators.GenericKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.GenericKey.AlgorithmIdentifier"></member>
    <member name="P:Org.BouncyCastle.Crypto.Operators.GenericKey.Representation"></member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding">
      <summary>Block cipher padders are expected to conform to this interface.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.AddPadding(System.Byte[],System.Int32)">
      <summary>Add padding to the passed in block.</summary>
      <param name="input">the block to add padding to.</param>
      <param name="inOff">the offset into the block the padding is to start at.</param>
      <returns>the number of bytes of padding added.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.AddPadding(System.Span{System.Byte},System.Int32)">
      <summary>Add padding to the passed in block.</summary>
      <param name="block">the block to add padding to.</param>
      <param name="position">the offset into the block the padding is to start at.</param>
      <returns>the number of bytes of padding added.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.Init(Org.BouncyCastle.Security.SecureRandom)">
      <summary>Initialise the padder.</summary>
      <param name="random">A source of randomness, if any required.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.PadCount(System.Byte[])">
      <summary>Determine the length of padding present in the passed in block.</summary>
      <param name="input">the block to check padding for.</param>
      <returns>the number of bytes of padding present.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.PadCount(System.ReadOnlySpan{System.Byte})">
      <summary>Determine the length of padding present in the passed in block.</summary>
      <param name="block">the block to check padding for.</param>
      <returns>the number of bytes of padding present.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.PaddingName">
      <summary>The name of the algorithm this padder implements.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding">
      <summary>A padder that adds ISO10126-2 padding to a block.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.AddPadding(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.AddPadding(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.Init(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.PadCount(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.PadCount(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.PaddingName"></member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding">
      <summary>
            A padder that adds the padding according to the scheme referenced in ISO 7814-4 - scheme 2 from ISO 9797-1.
            The first byte is 0x80, rest is 0x00
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.AddPadding(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.AddPadding(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.Init(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.PadCount(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.PadCount(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.PaddingName"></member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(Org.BouncyCastle.Crypto.Modes.IBlockCipherMode)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(Org.BouncyCastle.Crypto.Modes.IBlockCipherMode,Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.GetUpdateOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessByte(System.Byte,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding">
      <summary>A padder that adds PKCS7/PKCS5 padding to a block.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding.AddPadding(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding.AddPadding(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding.Init(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding.PadCount(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding.PadCount(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding.PaddingName"></member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.TbcPadding">
      <summary> A padder that adds Trailing-Bit-Compliment padding to a block.</summary>
      <remarks>This padding pads the block out compliment of the last bit of the plain text.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.TbcPadding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.TbcPadding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.TbcPadding.AddPadding(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.TbcPadding.AddPadding(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.TbcPadding.Init(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.TbcPadding.PadCount(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.TbcPadding.PadCount(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Paddings.TbcPadding.PaddingName"></member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.X923Padding">
      <summary>
            A padder that adds X9.23 padding to a block - if a SecureRandom is passed in random padding is assumed,
            otherwise padding with zeros is used.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.X923Padding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.X923Padding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.X923Padding.AddPadding(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.X923Padding.AddPadding(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.X923Padding.Init(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.X923Padding.PadCount(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.X923Padding.PadCount(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Paddings.X923Padding.PaddingName"></member>
    <member name="T:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding">
      <summary> A padder that adds zero byte padding to a block.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding.AddPadding(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding.AddPadding(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding.Init(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding.PadCount(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding.PadCount(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Paddings.ZeroBytePadding.PaddingName"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.AeadParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.AeadParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.AeadParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.AeadParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.AeadParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.AeadParameters.GetAssociatedText"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.AeadParameters.GetNonce"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.AeadParameters.Key"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.AeadParameters.MacSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Blake3Parameters">
      <summary>Blake3 Parameters.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Blake3Parameters.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Blake3Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Blake3Parameters.ClearKey">
      <summary>Clear the key bytes.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Blake3Parameters.Context(System.Byte[])">
      <summary>Create a key parameter.</summary>
      <param name="pContext">the context</param>
      <returns>the parameter</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Blake3Parameters.GetContext">
      <summary>Obtain the salt.</summary>
      <returns>the salt</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Blake3Parameters.GetKey">
      <summary>Obtain the key.</summary>
      <returns>the key</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Blake3Parameters.Key(System.Byte[])">
      <summary>Create a key parameter.</summary>
      <param name="pKey">the key</param>
      <returns>the parameter</returns>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DesEdeParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DesEdeParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.DesEdeKeyLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsReal2Key(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsReal2Key(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsReal3Key(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsReal3Key(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsRealEdeKey(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsRealEdeKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DesParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DesParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DesParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.DesParameters.DesKeyLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.IsWeakKey(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.IsWeakKey(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.IsWeakKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.SetOddParity(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.SetOddParity(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.SetOddParity(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DesParameters.SetOddParity(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DHKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Crypto.Parameters.DHParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Crypto.Parameters.DHParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Crypto.Parameters.DHParameters,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters.AlgorithmOid"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DHKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DHParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DHValidationParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32,System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DHValidationParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DHParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHParameters.G"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHParameters.J"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHParameters.L">
      <summary>The bitlength of the private value.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHParameters.M">
      <summary>The minimum bitlength of the private value.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHParameters.P"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHParameters.Q"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHParameters.ValidationParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DHParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DHParameters,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters.X"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DHParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DHParameters,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters.Y"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DHValidationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHValidationParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DHValidationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DHValidationParameters.Counter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHValidationParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DHValidationParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHValidationParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHValidationParameters.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DHValidationParameters.GetSeed"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DsaKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Crypto.Parameters.DsaParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Crypto.Parameters.DsaParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Security.SecureRandom,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.Certainty"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.DigitalSignatureUsage"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.KeyEstablishmentUsage"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.L"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.N"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.Random"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.UsageIndex"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DsaParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DsaParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaParameters.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameters.G"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameters.P"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameters.Q"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaParameters.ValidationParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DsaParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters.X"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.DsaParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters.Y"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.Counter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.Equals(Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.GetSeed"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters.UsageIndex"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.#ctor(Org.BouncyCastle.Asn1.X9.X9ECParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.Curve"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ECDomainParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.G"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.GetSeed"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.H"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.HInv"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.N"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.ValidatePrivateScalar(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECDomainParameters.ValidatePublicPoint(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters.#ctor(Org.BouncyCastle.Crypto.Parameters.ECDomainParameters,Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters.#ctor(Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters,Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters.DigestParamSet"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters.EncryptionParamSet"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECGost3410Parameters.PublicKeyParamSet"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.ECDomainParameters,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters.DomainParameters"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters.PublicKeyParamSet"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.#ctor(System.String,System.Boolean,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.#ctor(System.String,System.Boolean,Org.BouncyCastle.Crypto.Parameters.ECDomainParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ECKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.Parameters"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECKeyParameters.PublicKeyParamSet"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X9.X9ECParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Crypto.Parameters.ECDomainParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters.Name"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.ECDomainParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters.#ctor(System.String,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters.#ctor(System.String,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.ECDomainParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters.D"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters.GetHashCode"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters.#ctor(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Crypto.Parameters.ECDomainParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters.#ctor(System.String,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters.#ctor(System.String,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Crypto.Parameters.ECDomainParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters.Q"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Ed25519KeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519KeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519KeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.GeneratePublicKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.KeySize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.Sign(Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Algorithm,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters.SignatureSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.#ctor(Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.KeySize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters.Verify(Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Algorithm,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Ed448KeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448KeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448KeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.GeneratePublicKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.KeySize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.Sign(Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Algorithm,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters.SignatureSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.#ctor(Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicPoint)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.KeySize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters.Verify(Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Algorithm,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Crypto.Parameters.ElGamalParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ElGamalKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Crypto.Parameters.ElGamalParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ElGamalParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ElGamalParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ElGamalParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.G"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.L"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ElGamalParameters.P"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.ElGamalParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ElGamalPrivateKeyParameters.X"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.ElGamalParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters.Equals(Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters.Y"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.FpeParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.FpeParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.FpeParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.FpeParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.FpeParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.FpeParameters.GetTweak"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.FpeParameters.Key"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.FpeParameters.Radix"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.FpeParameters.UseInverseFunction"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410KeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410KeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyGenerationParameters.Parameters"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyGenerationParameters.PublicKeyParamSet"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters.Parameters"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters.PublicKeyParamSet"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.A"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.Equals(Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.P"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.Q"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters.ValidationParameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Gost3410PrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410PrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410PrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410PrivateKeyParameters.X"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Gost3410PublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410PublicKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410PublicKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410PublicKeyParameters.Y"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.#ctor(System.Int64,System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.C"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.CL"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.X0"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters.X0L"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.HkdfParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.HkdfParameters.#ctor(System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.HkdfParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.HkdfParameters.DefaultParameters(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.HkdfParameters.GetIkm"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.HkdfParameters.GetInfo"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.HkdfParameters.GetSalt"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.HkdfParameters.SkipExtract"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.HkdfParameters.SkipExtractParameters(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.IesParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.IesParameters.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.IesParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.IesParameters.GetDerivationV"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.IesParameters.GetEncodingV"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.IesParameters.MacKeySize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.IesWithCipherParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.IesWithCipherParameters.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.IesWithCipherParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.IesWithCipherParameters.CipherKeySize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Iso18033KdfParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Iso18033KdfParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Iso18033KdfParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Iso18033KdfParameters.GetSeed"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
      <summary>
            Base constructor - prefix and suffix fixed input data.
            </summary>
      <param name="ki">the KDF seed</param>
      <param name="fixedInputDataCounterPrefix">fixed input data to precede counter</param>
      <param name="fixedInputDataCounterSuffix">fixed input data to follow counter.</param>
      <param name="r">length of the counter in bits.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>
            Base constructor - suffix fixed input data only.
            </summary>
      <param name="ki">the KDF seed</param>
      <param name="fixedInputDataCounterSuffix">fixed input data to follow counter.</param>
      <param name="r">length of the counter in bits</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters.FixedInputData"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters.FixedInputDataCounterPrefix"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters.FixedInputDataCounterSuffix"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters.Ki"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfCounterParameters.R"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.KdfDoublePipelineIterationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfDoublePipelineIterationParameters.CreateWithCounter(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfDoublePipelineIterationParameters.CreateWithoutCounter(System.Byte[],System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfDoublePipelineIterationParameters.FixedInputData"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfDoublePipelineIterationParameters.Ki"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfDoublePipelineIterationParameters.R"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfDoublePipelineIterationParameters.UseCounter"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters.CreateWithCounter(System.Byte[],System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters.CreateWithoutCounter(System.Byte[],System.Byte[],System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters.FixedInputData"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters.Iv"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters.Ki"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters.R"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KdfFeedbackParameters.UseCounter"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.KdfParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfParameters.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.KdfParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfParameters.GetIV"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KdfParameters.GetSharedSecret"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.KeyParameter"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KeyParameter.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.KeyParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KeyParameter.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.KeyParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KeyParameter.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.KeyParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KeyParameter.CopyTo(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KeyParameter.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Byte,``0})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KeyParameter.GetKey"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.KeyParameter.KeyLength"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.KeyParameter.Reverse"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.MgfParameters">
      <remarks>Parameters for mask derivation functions.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MgfParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.MgfParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MgfParameters.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.MgfParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MgfParameters.GetSeed"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MgfParameters.GetSeed(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MgfParameters.GetSeed(System.Span{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.MgfParameters.SeedLength"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters.EphemeralPrivateKey"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters.EphemeralPublicKey"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.MqvPrivateParameters.StaticPrivateKey"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.MqvPublicParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.MqvPublicParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.MqvPublicParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.MqvPublicParameters.EphemeralPublicKey"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.MqvPublicParameters.StaticPublicKey"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.Certainty"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.CountSmallPrimes"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.G"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.LowerSigmaBound"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.Modulus"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32,System.Collections.Generic.IList{Org.BouncyCastle.Math.BigInteger},Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters.PhiN"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters.SmallPrimesList"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ParametersWithID"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithID.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithID.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithID.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithID.GetID"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ParametersWithID.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithIV</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithIV</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithIV</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.CopyIVTo(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.Create``1(Org.BouncyCastle.Crypto.ICipherParameters,System.Int32,``0,System.Buffers.SpanAction{System.Byte,``0})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.GetIV"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.IVLength"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ParametersWithIV.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ParametersWithRandom"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithRandom.#ctor(Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithRandom</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithRandom.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithRandom</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ParametersWithRandom.Parameters"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ParametersWithRandom.Random"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt">
      <summary> Cipher parameters with a fixed salt value associated with them.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt.GetSalt"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ParametersWithSalt.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.ParametersWithSBox"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithSBox.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.ParametersWithSBox</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.ParametersWithSBox.GetSBox"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.ParametersWithSBox.Parameters"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.RC2Parameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RC2Parameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RC2Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RC2Parameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RC2Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RC2Parameters.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RC2Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RC2Parameters.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RC2Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RC2Parameters.EffectiveKeyBits"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.RC5Parameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RC5Parameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RC5Parameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RC5Parameters.Rounds"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.RsaBlindingParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaBlindingParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RsaBlindingParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaBlindingParameters.BlindingFactor"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaBlindingParameters.PublicKey"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.RsaKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaKeyGenerationParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RsaKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaKeyGenerationParameters.Certainty"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaKeyGenerationParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaKeyGenerationParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaKeyGenerationParameters.PublicExponent"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters.#ctor(System.Boolean,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters.Exponent"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters.Modulus"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.#ctor(Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.DP"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.DQ"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.P"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.PublicExponent"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.Q"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.QInv"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.SkeinParameters">
      <summary>
            Parameters for the Skein hash function - a series of byte[] strings identified by integer tags.
            </summary>
      <remarks>
            Parameterised Skein can be used for:
            <ul><li>MAC generation, by providing a <see cref="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">key</see>.</li><li>Randomised hashing, by providing a <see cref="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">nonce</see>.</li><li>A hash function for digital signatures, associating a
            <see cref="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">public key</see> with the message digest.</li><li>A key derivation function, by providing a
            <see cref="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">key identifier</see>.</li><li>Personalised hashing, by providing a
            <see cref="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">recommended format</see> or
            <see cref="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">arbitrary</see> personalisation string.</li></ul></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.SkeinParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.GetKey">
      <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">key parameter</see>, or <code>null</code> if not
            set.
            </summary>
      <returns>The key.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.GetKeyIdentifier">
      <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">key identifier parameter</see>, or
            <code language="cs">null</code> if not set.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.GetNonce">
      <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">nonce parameter</see>, or <code language="cs">null</code> if
            not set.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.GetParameters">
      <summary>
            Obtains a map of type (int) to value (byte[]) for the parameters tracked in this object.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.GetPersonalisation">
      <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">personalisation parameter</see>, or
            <code>null</code> if not set.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.GetPublicKey">
      <summary>
            Obtains the value of the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">public key parameter</see>, or
            <code>null</code> if not set.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_CONFIG">
      <summary>
            The parameter type for the Skein configuration block: 4
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">
      <summary>
            The parameter type for a secret key, supporting MAC or KDF functions: 0
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">
      <summary>
            The parameter type for a key identifier string: 16
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_MESSAGE">
      <summary>
            The parameter type for the message: 48
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">
      <summary>
            The parameter type for a nonce: 20
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_OUTPUT">
      <summary>
            The parameter type for the output transformation: 63
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">
      <summary>
            The parameter type for a personalisation string: 8
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">
      <summary>
            The parameter type for a public key: 12
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder">
      <summary>
            A builder for <see cref="T:Org.BouncyCastle.Crypto.Parameters.SkeinParameters" />.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.#ctor(Org.BouncyCastle.Crypto.Parameters.SkeinParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.#ctor(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.Build">
      <summary>
            Constructs a new <see cref="T:Org.BouncyCastle.Crypto.Parameters.SkeinParameters" /> instance with the parameters provided to this
            builder.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.Set(System.Int32,System.Byte[])">
      <summary>
            Sets a parameters to apply to the Skein hash function.
            </summary>
      <param name="type">the type of the parameter, in the range 5..62.</param>
      <param name="value">the byte sequence of the parameter.</param>
      <remarks>
            Parameter types must be in the range 0,5..62, and cannot use the value 48
            (reserved for message body).
            <p />
            Parameters with type &lt; 48 are processed before
            the message content, parameters with type &gt; 48
            are processed after the message and prior to output.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">
      <summary>
            Sets the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY" /> parameter.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">
      <summary>
            Sets the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER" /> parameter.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">
      <summary>
            Sets the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE" /> parameter.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">
      <summary>
            Sets the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION" /> parameter.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">
      <summary>
            Implements the recommended personalisation format for Skein defined in Section 4.11 of
            the Skein 1.3 specification.
            </summary>
      <param name="date">the date the personalised application of the Skein was defined.</param>
      <param name="emailAddress">the email address of the creation of the personalised application.</param>
      <param name="distinguisher">an arbitrary personalisation string distinguishing the application.</param>
      <remarks>
            The format is <code>YYYYMMDD email@address distinguisher</code>, encoded to a byte
            sequence using UTF-8 encoding.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">
      <summary>
            Sets the <see cref="F:Org.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER" /> parameter.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters">
      <summary>Private parameters for an SM2 key exchange.</summary>
      <remarks>The ephemeralPrivateKey is used to calculate the random point used in the algorithm.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters.#ctor(System.Boolean,Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters.EphemeralPrivateKey"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters.EphemeralPublicPoint"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters.IsInitiator"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters.StaticPrivateKey"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePrivateParameters.StaticPublicPoint"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePublicParameters">
      <summary>Public parameters for an SM2 key exchange.</summary>
      <remarks>In this case the ephemeralPublicKey provides the random point used in the algorithm.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePublicParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePublicParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePublicParameters.EphemeralPublicKey"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.SM2KeyExchangePublicParameters.StaticPublicKey"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters.G"></member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters.N"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters">
      <summary>
            Parameters for tweakable block ciphers.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters.#ctor(Org.BouncyCastle.Crypto.Parameters.KeyParameter,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters.Key">
      <summary>
            Gets the key.
            </summary>
      <value>the key to use, or <code language="cs">null</code> to use the current key.</value>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters.Tweak">
      <summary>
            Gets the tweak value.
            </summary>
      <value>The tweak to use, or <code>null</code> to use the current tweak.</value>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.X25519KeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519KeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519KeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.GeneratePublicKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.GenerateSecret(Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.GenerateSecret(Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.KeySize"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters.SecretSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.X25519PublicKeyParameters.KeySize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.X448KeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448KeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448KeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.GeneratePublicKey"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.GenerateSecret(Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.GenerateSecret(Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.KeySize"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters.SecretSize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.#ctor(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.Encode(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.Encode(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.GetEncoded"></member>
    <member name="F:Org.BouncyCastle.Crypto.Parameters.X448PublicKeyParameters.KeySize"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.BasicEntropySourceProvider"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.BasicEntropySourceProvider.#ctor(Org.BouncyCastle.Security.SecureRandom,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.BasicEntropySourceProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.BasicEntropySourceProvider.Get(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.CryptoApiEntropySourceProvider"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiEntropySourceProvider.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.CryptoApiEntropySourceProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiEntropySourceProvider.#ctor(System.Security.Cryptography.RandomNumberGenerator,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.CryptoApiEntropySourceProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiEntropySourceProvider.Get(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator">
      <summary>
            Uses RandomNumberGenerator.Create() to get randomness generator
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.#ctor(System.Security.Cryptography.RandomNumberGenerator)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.AddSeedMaterial(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.AddSeedMaterial(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.AddSeedMaterial(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.NextBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator.NextBytes(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator.AddSeedMaterial(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator.AddSeedMaterial(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator.AddSeedMaterial(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator.NextBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator.NextBytes(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.EntropyUtilities"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.EntropyUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.EntropyUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.EntropyUtilities.GenerateSeed(Org.BouncyCastle.Crypto.IEntropySource,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.EntropyUtilities.GenerateSeed(Org.BouncyCastle.Crypto.IEntropySource,System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.IRandomGenerator">
      <remarks>Generic interface for objects generating random bytes.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])">
      <summary>Add more seed material to the generator.</summary>
      <param name="seed">A byte array to be mixed into the generator's state.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)">
      <summary>Add more seed material to the generator.</summary>
      <param name="seed">A long value to be mixed into the generator's state.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])">
      <summary>Fill byte array with random values.</summary>
      <param name="bytes">Array to be filled.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Fill byte array with random values.</summary>
      <param name="bytes">Array to receive bytes.</param>
      <param name="start">Index to start filling at.</param>
      <param name="len">Length of segment to fill.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.GenerateSeed(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.GenerateSeed(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.NextBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.NextBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.NextBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.Reseed(System.Byte[])">
      <summary>Force a reseed of the DRBG.</summary>
      <param name="additionalInput">optional additional input</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.SetSeed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.SetSeed(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandom.SetSeed(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.#ctor(Org.BouncyCastle.Crypto.IEntropySourceProvider)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.#ctor(Org.BouncyCastle.Security.SecureRandom,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.BuildCtr(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.BuildHash(Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.BuildHMac(Org.BouncyCastle.Crypto.IMac,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.SetEntropyBitsRequired(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.SetPersonalizationString(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.SetSecurityStrength(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.AddSeedMaterial(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.AddSeedMaterial(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.AddSeedMaterial(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.NextBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.NextBytes(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.X931SecureRandom"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.GenerateSeed(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.GenerateSeed(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.NextBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.NextBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.NextBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.SetSeed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.SetSeed(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandom.SetSeed(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.#ctor(Org.BouncyCastle.Crypto.IEntropySourceProvider)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.#ctor(Org.BouncyCastle.Security.SecureRandom,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.Build(Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Parameters.KeyParameter,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.SetDateTimeVector(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.#ctor(Org.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32,Org.BouncyCastle.Crypto.IEntropySource,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.BlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.Generate(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.Generate(System.Span{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.GenerateWithInput(System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.Reseed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.Reseed(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.#ctor(Org.BouncyCastle.Crypto.IDigest,System.Int32,Org.BouncyCastle.Crypto.IEntropySource,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.BlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.Generate(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.Generate(System.Span{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.GenerateWithInput(System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.Reseed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.Reseed(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.#ctor(Org.BouncyCastle.Crypto.IMac,System.Int32,Org.BouncyCastle.Crypto.IEntropySource,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.BlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.Generate(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.Generate(System.Span{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.GenerateWithInput(System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.Reseed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.Reseed(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg"></member>
    <member name="P:Org.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.BlockSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.Generate(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.Generate(System.Span{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.GenerateWithInput(System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.Reseed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.Reseed(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IDsa,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.DsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IDsa,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.Signers.IDsaEncoding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.DsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.GetOrder"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaDigestSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.DsaSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.DsaSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaSigner.#ctor(Org.BouncyCastle.Crypto.Signers.IDsaKCalculator)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.DsaSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.DsaSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaSigner.CalculateE(Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaSigner.InitSecureRandom(System.Boolean,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.DsaSigner.kCalculator"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.DsaSigner.key"></member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.DsaSigner.Order"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.DsaSigner.random"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.DsaSigner.VerifySignature(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.ECDsaSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.ECDsaSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.#ctor(Org.BouncyCastle.Crypto.Signers.IDsaKCalculator)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.ECDsaSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.CalculateE(Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.CreateBasePointMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.GetDenominator(System.Int32,Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.InitSecureRandom(System.Boolean,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.kCalculator"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.key"></member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.Order"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.random"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECDsaSigner.VerifySignature(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.ECGost3410Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer.CreateBasePointMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer.Order"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECGost3410Signer.VerifySignature(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.ECNRSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECNRSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.ECNRSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.ECNRSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECNRSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECNRSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.ECNRSigner.Order"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.ECNRSigner.VerifySignature(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519ctxSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.Ed25519phSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519phSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Ed25519Signer"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.Ed25519Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed25519Signer.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Ed448phSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.Ed448phSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448phSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Ed448Signer"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.Ed448Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Ed448Signer.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Ed448Signer.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.GenericSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.GenericSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.GenericSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.#ctor(Org.BouncyCastle.Crypto.IDsa,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Gost3410Signer"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410Signer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.Gost3410Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Gost3410Signer.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410Signer.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410Signer.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Gost3410Signer.Order"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Gost3410Signer.VerifySignature(System.Byte[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator.InitAdditionalInput0(Org.BouncyCastle.Crypto.Macs.HMac)">
      <summary>Supports use of additional input.</summary>
      <param name="hmac0">The <see cref="T:Org.BouncyCastle.Crypto.Macs.HMac" /> to which the additional input should be added.</param>
      <remarks>
            RFC 6979 3.6. Additional data may be added to the input of HMAC [..]. A use case may be a protocol that
            requires a non-deterministic signature algorithm on a system that does not have access to a high-quality
            random source. It suffices that the additional data[..] is non-repeating(e.g., a signature counter or a
            monotonic clock) to ensure "random-looking" signatures are indistinguishable, in a cryptographic way, from
            plain (EC)DSA signatures.
            <para />
            By default there is no additional input. Override this method to supply additional input, bearing in mind
            that this calculator may be used for many signatures.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator.IsDeterministic"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.HMacDsaKCalculator.NextK"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.IDsaEncoding">
      <summary>
            An interface for different encoding formats for DSA signatures.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IDsaEncoding.Decode(Org.BouncyCastle.Math.BigInteger,System.Byte[])">
      <summary>Decode the (r, s) pair of a DSA signature.</summary>
      <param name="n">The order of the group that r, s belong to.</param>
      <param name="encoding">An encoding of the (r, s) pair of a DSA signature.</param>
      <returns>The (r, s) of a DSA signature, stored in an array of exactly two elements, r followed by s.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IDsaEncoding.Encode(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>Encode the (r, s) pair of a DSA signature.</summary>
      <param name="n">The order of the group that r, s belong to.</param>
      <param name="r">The r value of a DSA signature.</param>
      <param name="s">The s value of a DSA signature.</param>
      <returns>An encoding of the DSA signature given by the provided (r, s) pair.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IDsaEncoding.Encode(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IDsaEncoding.GetMaxEncodingSize(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.IDsaKCalculator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IDsaKCalculator.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IDsaKCalculator.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.IDsaKCalculator.IsDeterministic"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IDsaKCalculator.NextK"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner">
      <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 2 and 3).
            <p>
            Note: the usual length for the salt is the length of the hash
            function used in bytes.</p></summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Int32)">
      <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
      <param name="cipher">cipher to use.
             </param>
      <param name="digest">digest to sign with.
             </param>
      <param name="saltLength">length of salt in bytes.
             </param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Int32,System.Boolean)">
      <summary>
            Generate a signer with either implicit or explicit trailers for ISO9796-2, scheme 2 or 3.
            </summary>
      <param name="cipher">base cipher to use for signature creation/verification</param>
      <param name="digest">digest to use.</param>
      <param name="saltLength">length of salt in bytes.</param>
      <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GenerateSignature">
      <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GetRecoveredMessage">
      <summary>
            Return a reference to the recoveredMessage message.
            </summary>
      <returns>The full/partial recoveredMessage message.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.HasFullMessage">
      <summary>
            Return true if the full message was recoveredMessage.
            </summary>
      <returns>true on full message recovery, false otherwise, or if not sure.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise the signer.</summary>
      <param name="forSigning">true if for signing, false if for verification.</param>
      <param name="parameters">parameters for signature generation/verification. If the
            parameters are for generation they should be a ParametersWithRandom,
            a ParametersWithSalt, or just an RsaKeyParameters object. If RsaKeyParameters
            are passed in a SecureRandom will be created.
            </param>
      <exception cref="T:System.ArgumentException">if wrong parameter type or a fixed
            salt is passed in which is the wrong length.
            </exception>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Reset">
      <summary> reset the internal state</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Update(System.Byte)">
      <summary> update the internal digest with the byte b</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.UpdateWithRecoveredMessage(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.VerifySignature(System.Byte[])">
      <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer">
      <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 1)</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest)">
      <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
      <param name="cipher">cipher to use.
             </param>
      <param name="digest">digest to sign with.
             </param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Boolean)">
      <summary>
            Generate a signer with either implicit or explicit trailers for ISO9796-2.
            </summary>
      <param name="cipher">base cipher to use for signature creation/verification</param>
      <param name="digest">digest to use.</param>
      <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.GenerateSignature">
      <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.GetRecoveredMessage">
      <summary>
            Return a reference to the recoveredMessage message.
            </summary>
      <returns>The full/partial recoveredMessage message.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.HasFullMessage">
      <summary>
            Return true if the full message was recoveredMessage.
            </summary>
      <returns> true on full message recovery, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.Reset">
      <summary> reset the internal state</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.UpdateWithRecoveredMessage(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2Signer.VerifySignature(System.Byte[])">
      <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.IsoTrailers"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IsoTrailers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.IsoTrailers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IsoTrailers.GetTrailer(Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.IsoTrailers.NoTrailerAvailable(Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_IMPLICIT"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_RIPEMD128"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_RIPEMD160"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_SHA1"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_SHA224"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_SHA256"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_SHA384"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_SHA512"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_SHA512_224"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_SHA512_256"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.IsoTrailers.TRAILER_WHIRLPOOL"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.CheckValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.Decode(Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.DecodeValue(Org.BouncyCastle.Math.BigInteger,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.Encode(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.Encode(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.EncodeValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.EncodeValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.GetMaxEncodingSize(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.PlainDsaEncoding.Instance"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.PssSigner">
      <summary> RSA-PSS as described in Pkcs# 1 v 2.1.
            <p>
            Note: the usual value for the salt length is the number of
            bytes in the hash function.</p></summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.PssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.IDigest,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.PssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.IDigest,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.PssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.IDigest,System.Int32,System.Byte)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.PssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Byte[])">
      <summary>Basic constructor</summary>
      <param name="cipher">the asymmetric cipher to use.</param>
      <param name="digest">the digest to use.</param>
      <param name="salt">the fixed salt to be used.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Int32)">
      <summary>Basic constructor</summary>
      <param name="cipher">the asymmetric cipher to use.</param>
      <param name="digest">the digest to use.</param>
      <param name="saltLen">the length of the salt to use (in bytes).</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Int32,System.Byte)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.PssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.PssSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.CreateRawSigner(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.CreateRawSigner(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.CreateRawSigner(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Crypto.IDigest,System.Int32,System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.Reset"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.PssSigner.TrailerImplicit"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.PssSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.RandomDsaKCalculator"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RandomDsaKCalculator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.RandomDsaKCalculator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RandomDsaKCalculator.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RandomDsaKCalculator.Init(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.RandomDsaKCalculator.IsDeterministic"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RandomDsaKCalculator.NextK"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.RsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.RsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.RsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.RsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IRsa,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.RsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.#ctor(Org.BouncyCastle.Crypto.IRsa,Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.RsaDigestSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.RsaDigestSigner.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.SM2Signer">
      <summary>The SM2 Digital Signature algorithm.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.SM2Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.#ctor(Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.SM2Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.#ctor(Org.BouncyCastle.Crypto.Signers.IDsaEncoding)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.SM2Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.#ctor(Org.BouncyCastle.Crypto.Signers.IDsaEncoding,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.SM2Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.SM2Signer.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.CalculateE(Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.CreateBasePointMultiplier"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.SM2Signer.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.CheckValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.Decode(Org.BouncyCastle.Math.BigInteger,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.DecodeValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Asn1.Asn1Sequence,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.Encode(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.Encode(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.EncodeValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.GetMaxEncodingSize(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding.Instance"></member>
    <member name="T:Org.BouncyCastle.Crypto.Signers.X931Signer"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.X931Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,Org.BouncyCastle.Crypto.IDigest,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Signers.X931Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Signers.X931Signer.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.GenerateSignature"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.GetMaxSignatureSize"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.Reset"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.Update(System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.X931Signer.VerifySignature(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.AlgorithmIdentifierFactory"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.AlgorithmIdentifierFactory.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Utilities.AlgorithmIdentifierFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Utilities.AlgorithmIdentifierFactory.CAST5_CBC"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.AlgorithmIdentifierFactory.GenerateEncryptionAlgID(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Int32,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="F:Org.BouncyCastle.Crypto.Utilities.AlgorithmIdentifierFactory.IDEA_CBC"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper.#ctor(System.Char[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper.ConvertToChars(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper.ConvertToIndexes(System.Char[])"></member>
    <member name="P:Org.BouncyCastle.Crypto.Utilities.BasicAlphabetMapper.Radix"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.CipherFactory"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.CipherFactory.CreateContentCipher(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.CipherKeyGeneratorFactory"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.CipherKeyGeneratorFactory.CreateKeyGenerator(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.DerOtherInfo"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.DerOtherInfo.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.DerOtherInfo.Builder"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.DerOtherInfo.Builder.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Crypto.Utilities.DerOtherInfo.Builder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.DerOtherInfo.Builder.Build"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.DerOtherInfo.Builder.WithSuppPrivInfo(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.DerOtherInfo.Builder.WithSuppPubInfo(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.OpenSshPrivateKeyUtilities"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.OpenSshPrivateKeyUtilities.EncodePrivateKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.OpenSshPrivateKeyUtilities.ParsePrivateKeyBlob(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.OpenSshPublicKeyUtilities"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.OpenSshPublicKeyUtilities.EncodePublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.OpenSshPublicKeyUtilities.ParsePublicKey(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves"></member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves.GetByName(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves.GetByNameLazy(System.String)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of
            the full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves.GetByOid(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves.GetByOidLazy(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up an <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParametersHolder" /> for the curve with the given
            <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
      <remarks>
            Allows accessing the <see cref="T:Org.BouncyCastle.Math.EC.ECCurve">curve</see> without necessarily triggering the creation of
            the full <see cref="T:Org.BouncyCastle.Asn1.X9.X9ECParameters" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves.GetName(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>Look up the name of the curve with the given <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see>.</summary>
      <param name="oid">The <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> for the curve.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves.GetOid(System.String)">
      <summary>Look up the <see cref="T:Org.BouncyCastle.Asn1.DerObjectIdentifier">OID</see> of the curve with the given name.</summary>
      <param name="name">The name of the curve.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Utilities.SshNamedCurves.Names">
      <summary>Enumerate the available curve names in this registry.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Math.BigInteger"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Byte[],System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.Byte[],System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.Int32,System.Random)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.Random)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.ReadOnlySpan{System.Byte})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.Int32,System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.#ctor(System.String,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.BigInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Abs"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Add(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.And(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.AndNot(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Arbitrary(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Math.BigInteger.BitCount"></member>
    <member name="P:Org.BouncyCastle.Math.BigInteger.BitLength"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ClearBit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.CompareTo(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.CompareTo(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Divide(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.DivideAndRemainder(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Equals(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Equals(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.Five"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.FlipBit(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.Four"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Gcd(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.GetLengthofByteArray"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.GetLengthofByteArrayUnsigned"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.GetLengthofUInt32Array"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.GetLengthofUInt32ArrayUnsigned"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.GetLowestSetBit"></member>
    <member name="P:Org.BouncyCastle.Math.BigInteger.IntValue"></member>
    <member name="P:Org.BouncyCastle.Math.BigInteger.IntValueExact"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.IsProbablePrime(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Math.BigInteger.LongValue"></member>
    <member name="P:Org.BouncyCastle.Math.BigInteger.LongValueExact"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Max(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Min(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Mod(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ModInverse(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ModPow(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Multiply(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Negate"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.NextProbablePrime"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Not"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.One"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Or(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Pow(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ProbablePrime(System.Int32,System.Random)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.RabinMillerTest(System.Int32,System.Random)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Remainder(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.SetBit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ShiftLeft(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ShiftRight(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Math.BigInteger.SignValue"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.Six"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Square"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Subtract(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.Ten"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.TestBit(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.Three"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToByteArray"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToByteArray(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToByteArrayUnsigned"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToByteArrayUnsigned(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToString"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToString(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToUInt32ArrayBigEndian(System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToUInt32ArrayBigEndianUnsigned(System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToUInt32ArrayLittleEndian(System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ToUInt32ArrayLittleEndianUnsigned(System.Span{System.UInt32})"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.Two"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ValueOf(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.ValueOf(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Math.BigInteger.Xor(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Math.BigInteger.Zero"></member>
    <member name="T:Org.BouncyCastle.Math.Primes">
      <summary>Utility methods for generating primes and testing for primality.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.Primes.EnhancedMRProbablePrimeTest(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom,System.Int32)">
      <summary>FIPS 186-4 C.3.2 Enhanced Miller-Rabin Probabilistic Primality Test.</summary>
      <param name="candidate">The <see cref="T:Org.BouncyCastle.Math.BigInteger" /> instance to test for primality.</param>
      <param name="random">The source of randomness to use to choose bases.</param>
      <param name="iterations">The number of randomly-chosen bases to perform the test for.</param>
      <returns>An <see cref="T:Org.BouncyCastle.Math.Primes.MROutput" /> instance that can be further queried for details.</returns>
      <remarks>
            Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases. This is an alternative to
            <see cref="M:Org.BouncyCastle.Math.Primes.IsMRProbablePrime(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom,System.Int32)" /> that provides more information about a
            composite candidate, which may be useful when generating or validating RSA moduli.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Math.Primes.GenerateSTRandomPrime(Org.BouncyCastle.Crypto.IDigest,System.Int32,System.Byte[])">
      <summary>FIPS 186-4 C.6 Shawe-Taylor Random_Prime Routine.</summary>
      <param name="hash">The <see cref="T:Org.BouncyCastle.Crypto.IDigest" /> instance to use (as "Hash()"). Cannot be null.</param>
      <param name="length">The length (in bits) of the prime to be generated. Must be at least 2.</param>
      <param name="inputSeed">The seed to be used for the generation of the requested prime. Cannot be null or
            empty.</param>
      <returns>An <see cref="T:Org.BouncyCastle.Math.Primes.STOutput" /> instance containing the requested prime.</returns>
      <remarks>Construct a provable prime number using a hash function.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Math.Primes.HasAnySmallFactors(Org.BouncyCastle.Math.BigInteger)">
      <summary>A fast check for small divisors, up to some implementation-specific limit.</summary>
      <param name="candidate">The <see cref="T:Org.BouncyCastle.Math.BigInteger" /> instance to test for division by small factors.</param>
      <returns>
        <c>true</c> if the candidate is found to have any small factors, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Math.Primes.IsMRProbablePrime(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom,System.Int32)">
      <summary>FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test.</summary>
      <param name="candidate">The <see cref="T:Org.BouncyCastle.Math.BigInteger" /> instance to test for primality.</param>
      <param name="random">The source of randomness to use to choose bases.</param>
      <param name="iterations">The number of randomly-chosen bases to perform the test for.</param>
      <returns>
        <c>false</c> if any witness to compositeness is found amongst the chosen bases (so
            <paramref name="candidate" /> is definitely NOT prime), or else <c>true</c> (indicating primality with some
            probability dependent on the number of iterations that were performed).
            </returns>
      <remarks>Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Math.Primes.IsMRProbablePrimeToBase(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test (to a fixed base).</summary>
      <param name="candidate">The <see cref="T:Org.BouncyCastle.Math.BigInteger" /> instance to test for primality.</param>
      <param name="baseValue">The base value to use for this iteration.</param>
      <returns>
        <c>false</c> if <paramref name="baseValue" /> is a witness to compositeness (so
            <paramref name="candidate" /> is definitely NOT prime), or else <c>true</c>.</returns>
      <remarks>Run a single iteration of the Miller-Rabin algorithm against the specified base.</remarks>
    </member>
    <member name="F:Org.BouncyCastle.Math.Primes.SmallFactorLimit"></member>
    <member name="T:Org.BouncyCastle.Math.Primes.MROutput">
      <summary>Used to return the output from the
            <see cref="M:Org.BouncyCastle.Math.Primes.EnhancedMRProbablePrimeTest(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom,System.Int32)">
            Enhanced Miller-Rabin Probabilistic Primality Test</see></summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.Primes.MROutput.Factor"></member>
    <member name="P:Org.BouncyCastle.Math.Primes.MROutput.IsNotPrimePower"></member>
    <member name="P:Org.BouncyCastle.Math.Primes.MROutput.IsProvablyComposite"></member>
    <member name="T:Org.BouncyCastle.Math.Primes.STOutput">
      <summary>Used to return the output from the <see cref="M:Org.BouncyCastle.Math.Primes.GenerateSTRandomPrime(Org.BouncyCastle.Crypto.IDigest,System.Int32,System.Byte[])">
            Shawe-Taylor Random_Prime Routine</see></summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.Primes.STOutput.Prime"></member>
    <member name="P:Org.BouncyCastle.Math.Primes.STOutput.PrimeGenCounter"></member>
    <member name="P:Org.BouncyCastle.Math.Primes.STOutput.PrimeSeed"></member>
    <member name="T:Org.BouncyCastle.Math.EC.AbstractECLookupTable"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractECLookupTable.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractECLookupTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractECLookupTable.Lookup(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractECLookupTable.LookupVar(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.AbstractECLookupTable.Size"></member>
    <member name="T:Org.BouncyCastle.Math.EC.AbstractF2mCurve"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractF2mCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mCurve.CreatePoint(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mCurve.DecompressPoint(System.Int32,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mCurve.Inverse(System.Int32,System.Int32[],Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.AbstractF2mCurve.IsKoblitz"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mCurve.IsValidFieldElement(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mCurve.RandomFieldElement(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mCurve.RandomFieldElementMult(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.AbstractF2mFieldElement"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mFieldElement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractF2mFieldElement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mFieldElement.HalfTrace"></member>
    <member name="P:Org.BouncyCastle.Math.EC.AbstractF2mFieldElement.HasFastTrace"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mFieldElement.Trace"></member>
    <member name="T:Org.BouncyCastle.Math.EC.AbstractF2mPoint"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractF2mPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractF2mPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.SatisfiesCurveEquation"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.SatisfiesOrder"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.ScaleX(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.ScaleXNegateY(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.ScaleY(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.ScaleYNegateX(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.Subtract(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.Tau"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractF2mPoint.TauPow(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.AbstractFpCurve"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpCurve.#ctor(Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractFpCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpCurve.DecompressPoint(System.Int32,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpCurve.IsValidFieldElement(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpCurve.RandomFieldElement(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpCurve.RandomFieldElementMult(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.AbstractFpFieldElement"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpFieldElement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractFpFieldElement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Math.EC.AbstractFpPoint"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpPoint.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractFpPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpPoint.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.AbstractFpPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.AbstractFpPoint.CompressionYTilde"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpPoint.SatisfiesCurveEquation"></member>
    <member name="M:Org.BouncyCastle.Math.EC.AbstractFpPoint.Subtract(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ECAlgorithms</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.CleanPoint(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve(Org.BouncyCastle.Math.EC.ECCurve)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField(Org.BouncyCastle.Math.Field.IFiniteField)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve(Org.BouncyCastle.Math.EC.ECCurve)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField(Org.BouncyCastle.Math.Field.IFiniteField)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick(Org.BouncyCastle.Math.EC.ECFieldElement[],System.Int32,System.Int32,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.ShamirsTrick(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfMultiplies(Org.BouncyCastle.Math.EC.ECPoint[],Org.BouncyCastle.Math.BigInteger[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.SumOfTwoMultiplies(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECAlgorithms.ValidatePoint(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECCurve">
      <remarks>Base class for an elliptic curve.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.#ctor(Org.BouncyCastle.Math.Field.IFiniteField)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ECCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.A"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.B"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CheckPoint(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CheckPoints(Org.BouncyCastle.Math.EC.ECPoint[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CheckPoints(Org.BouncyCastle.Math.EC.ECPoint[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CloneCurve"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.Cofactor"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Configure"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_AFFINE"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_HOMOGENEOUS"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_JACOBIAN"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_JACOBIAN_CHUDNOVSKY"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_JACOBIAN_MODIFIED"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_LAMBDA_AFFINE"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_LAMBDA_PROJECTIVE"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.COORD_SKEWED"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.CoordinateSystem"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CreateCacheSafeLookupTable(Org.BouncyCastle.Math.EC.ECPoint[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CreateDefaultMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CreatePoint(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CreateRawPoint(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.CreateRawPoint(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.DecodePoint(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.DecodePoint(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.DecompressPoint(System.Int32,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Equals(Org.BouncyCastle.Math.EC.ECCurve)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.Field"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.FieldSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.FromBigInteger(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.GetAllCoordinateSystems"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.GetEndomorphism"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.GetMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.GetPreCompInfo(Org.BouncyCastle.Math.EC.ECPoint,System.String)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.ImportPoint(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.Infinity"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.IsValidFieldElement(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_a"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_b"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_cofactor"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_coord"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_endomorphism"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_field"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_multiplier"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.m_order"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.NormalizeAll(Org.BouncyCastle.Math.EC.ECPoint[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.NormalizeAll(Org.BouncyCastle.Math.EC.ECPoint[],System.Int32,System.Int32,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECCurve.Order"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Precompute(Org.BouncyCastle.Math.EC.ECPoint,System.String,Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.RandomFieldElement(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.RandomFieldElementMult(Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.SupportsCoordinateSystem(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.ValidatePoint(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECCurve.Config"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.Config.coord"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Config.Create"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.Config.endomorphism"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.Config.multiplier"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECCurve.Config.outer"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Config.SetCoordinateSystem(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Config.SetEndomorphism(Org.BouncyCastle.Math.EC.Endo.ECEndomorphism)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECCurve.Config.SetMultiplier(Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECFieldElement"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ECFieldElement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Add(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.AddOne"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECFieldElement.BitLength"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Divide(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.EncodeTo(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.EncodeTo(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Equals(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECFieldElement.FieldName"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECFieldElement.FieldSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.GetEncodedLength"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Invert"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECFieldElement.IsOne"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECFieldElement.IsZero"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Multiply(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.MultiplyMinusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.MultiplyPlusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Negate"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Sqrt"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Square"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.SquareMinusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.SquarePlusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.SquarePow(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.Subtract(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.TestBitZero"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.ToBigInteger"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECFieldElement.ToString"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECLookupTable"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECLookupTable.Lookup(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECLookupTable.LookupVar(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECLookupTable.Size"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECPoint"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ECPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Add(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.AffineXCoord"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.AffineYCoord"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.CheckNormalized"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.CompressionYTilde"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.CreateScaledPoint(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.Curve"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.CurveCoordinateSystem"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Detach"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECPoint.EMPTY_ZS"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.EncodeTo(System.Boolean,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.EncodeTo(System.Boolean,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Equals(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetDetachedPoint"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetEncoded(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetEncodedLength(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetInitialZCoords(Org.BouncyCastle.Math.EC.ECCurve)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetZCoord(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.GetZCoords"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.IsInfinity"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.IsNormalized"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.IsValid"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECPoint.m_curve"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECPoint.m_preCompTable"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECPoint.m_x"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECPoint.m_y"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ECPoint.m_zs"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Multiply(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Negate"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Normalize"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.RawXCoord"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.RawYCoord"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.RawZCoords"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.SatisfiesCurveEquation"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.SatisfiesOrder"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.ScaleX(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.ScaleXNegateY(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.ScaleY(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.ScaleYNegateX(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Subtract(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.ThreeTimes"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.TimesPow2(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.ToString"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.Twice"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPoint.TwicePlus(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.XCoord"></member>
    <member name="P:Org.BouncyCastle.Math.EC.ECPoint.YCoord"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECPointBase"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointBase.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ECPointBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointBase.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ECPointBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointBase.EncodeTo(System.Boolean,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointBase.EncodeTo(System.Boolean,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointBase.GetEncoded(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointBase.GetEncodedLength(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointBase.Multiply(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ECPointMap"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ECPointMap.Map(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.F2mCurve"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.F2mCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.F2mCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.F2mCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.F2mCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.CloneCurve"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.CreateCacheSafeLookupTable(Org.BouncyCastle.Math.EC.ECPoint[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.CreateDefaultMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.CreateRawPoint(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.CreateRawPoint(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement[])"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mCurve.FieldSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.FromBigInteger(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mCurve.Infinity"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.IsTrinomial"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mCurve.K1"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mCurve.K2"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mCurve.K3"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mCurve.M"></member>
    <member name="F:Org.BouncyCastle.Math.EC.F2mCurve.m_infinity"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mCurve.SupportsCoordinateSystem(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.F2mFieldElement"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Add(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.AddOne"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.BitLength"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.CheckFieldElements(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Divide(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Equals(Org.BouncyCastle.Math.EC.F2mFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.FieldName"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.FieldSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.GetHashCode"></member>
    <member name="F:Org.BouncyCastle.Math.EC.F2mFieldElement.Gnb"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Invert"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.IsOne"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.IsZero"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.K1"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.K2"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.K3"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.M"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Multiply(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.MultiplyMinusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.MultiplyPlusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Negate"></member>
    <member name="F:Org.BouncyCastle.Math.EC.F2mFieldElement.Ppb"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mFieldElement.Representation"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Sqrt"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Square"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.SquareMinusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.SquarePlusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.SquarePow(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.Subtract(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.TestBitZero"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mFieldElement.ToBigInteger"></member>
    <member name="F:Org.BouncyCastle.Math.EC.F2mFieldElement.Tpb"></member>
    <member name="T:Org.BouncyCastle.Math.EC.F2mPoint"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mPoint.Add(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mPoint.CompressionYTilde"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mPoint.Detach"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mPoint.Negate"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mPoint.Twice"></member>
    <member name="M:Org.BouncyCastle.Math.EC.F2mPoint.TwicePlus(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.F2mPoint.YCoord"></member>
    <member name="T:Org.BouncyCastle.Math.EC.FpCurve"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.FpCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.FpCurve</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.CloneCurve"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.CreateRawPoint(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.CreateRawPoint(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement[])"></member>
    <member name="P:Org.BouncyCastle.Math.EC.FpCurve.FieldSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.FromBigInteger(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.ImportPoint(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.FpCurve.Infinity"></member>
    <member name="F:Org.BouncyCastle.Math.EC.FpCurve.m_infinity"></member>
    <member name="F:Org.BouncyCastle.Math.EC.FpCurve.m_q"></member>
    <member name="F:Org.BouncyCastle.Math.EC.FpCurve.m_r"></member>
    <member name="P:Org.BouncyCastle.Math.EC.FpCurve.Q"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpCurve.SupportsCoordinateSystem(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.FpFieldElement"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Add(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.AddOne"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Divide(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Equals(Org.BouncyCastle.Math.EC.FpFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.FpFieldElement.FieldName"></member>
    <member name="P:Org.BouncyCastle.Math.EC.FpFieldElement.FieldSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Invert"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModAdd(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModDouble(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModHalf(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModHalfAbs(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModInverse(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModMult(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModReduce(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ModSubtract(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Multiply(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.MultiplyMinusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.MultiplyPlusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Negate"></member>
    <member name="P:Org.BouncyCastle.Math.EC.FpFieldElement.Q"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Sqrt"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Square"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.SquareMinusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.SquarePlusProduct(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.Subtract(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpFieldElement.ToBigInteger"></member>
    <member name="T:Org.BouncyCastle.Math.EC.FpPoint"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Add(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.CalculateJacobianModifiedW(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Detach"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.DoubleProductFromSquares(Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement,Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Eight(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Four(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.GetJacobianModifiedW"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.GetZCoord(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Negate"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Three(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.ThreeTimes"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.TimesPow2(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Twice"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.TwiceJacobianModified(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.TwicePlus(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.FpPoint.Two(Org.BouncyCastle.Math.EC.ECFieldElement)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ScaleXNegateYPointMap"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleXNegateYPointMap.#ctor(Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ScaleXNegateYPointMap</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleXNegateYPointMap.Map(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ScaleXNegateYPointMap.scale"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ScaleXPointMap"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleXPointMap.#ctor(Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ScaleXPointMap</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleXPointMap.Map(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ScaleXPointMap.scale"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ScaleYNegateXPointMap"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleYNegateXPointMap.#ctor(Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ScaleYNegateXPointMap</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleYNegateXPointMap.Map(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ScaleYNegateXPointMap.scale"></member>
    <member name="T:Org.BouncyCastle.Math.EC.ScaleYPointMap"></member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleYPointMap.#ctor(Org.BouncyCastle.Math.EC.ECFieldElement)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.ScaleYPointMap</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.ScaleYPointMap.Map(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.ScaleYPointMap.scale"></member>
    <member name="T:Org.BouncyCastle.Math.EC.SimpleLookupTable"></member>
    <member name="M:Org.BouncyCastle.Math.EC.SimpleLookupTable.#ctor(Org.BouncyCastle.Math.EC.ECPoint[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.SimpleLookupTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.SimpleLookupTable.Lookup(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.SimpleLookupTable.LookupVar(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.SimpleLookupTable.Size"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.ECEndomorphism"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ECEndomorphism.HasEfficientPointMap"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ECEndomorphism.PointMap"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo.Endomorphism"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo.m_endomorphism"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo.m_mappedPoint"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo.MappedPoint"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.EndoUtilities"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.EndoUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Endo.EndoUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.EndoUtilities.DecomposeScalar(Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.EndoUtilities.MapPoint(Org.BouncyCastle.Math.EC.Endo.ECEndomorphism,Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.EndoUtilities.PRECOMP_NAME"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism.DecomposeScalar(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism.DecomposeScalar(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism.HasEfficientPointMap"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism.m_parameters"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism.m_pointMap"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeAEndomorphism.PointMap"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters.I"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters.Lambda"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters.m_i"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters.m_lambda"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters.m_splitParams"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeAParameters.SplitParams"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism.DecomposeScalar(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism.HasEfficientPointMap"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism.m_parameters"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism.m_pointMap"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism.PointMap"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters.Beta"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters.Lambda"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters.m_beta"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters.m_lambda"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters.m_splitParams"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters.SplitParams"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.#ctor(Org.BouncyCastle.Math.BigInteger[],Org.BouncyCastle.Math.BigInteger[],Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.Bits"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.G1"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.G2"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.m_bits"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.m_g1"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.m_g2"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.m_v1A"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.m_v1B"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.m_v2A"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.m_v2B"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.V1A"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.V1B"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.V2A"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters.V2B"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier.CheckResult(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier.Multiply(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier.MultiplyPositive(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier.Multiply(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.FixedPointCombMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.FixedPointCombMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.FixedPointCombMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.FixedPointCombMultiplier.MultiplyPositive(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.LookupTable"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.m_lookupTable"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.m_offset"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.m_width"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.Offset"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.Width"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities.GetCombSize(Org.BouncyCastle.Math.EC.ECCurve)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities.GetFixedPointPreCompInfo(Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities.PRECOMP_NAME"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities.Precompute(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.GlvMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.GlvMultiplier.#ctor(Org.BouncyCastle.Math.EC.ECCurve,Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.GlvMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.GlvMultiplier.curve"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.GlvMultiplier.glvEndomorphism"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.GlvMultiplier.MultiplyPositive(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback.Precompute(Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier.MultiplyPositive(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.ConfWidth"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.IsPromoted"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_confWidth"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_preComp"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_preCompNeg"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_twice"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_width"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.PreComp"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.PreCompNeg"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.Twice"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.Width"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.ConfigureBasepoint(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GenerateCompactNaf(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GenerateCompactWindowNaf(System.Int32,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GenerateJsf(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GenerateNaf(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GenerateWindowNaf(System.Int32,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetNafWeight(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWNafPreCompInfo(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWNafPreCompInfo(Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.PRECOMP_NAME"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.Precompute(Org.BouncyCastle.Math.EC.ECPoint,System.Int32,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities.PrecomputeWithPointMap(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.EC.ECPointMap,Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo,System.Boolean)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.MultiplyPositive(Org.BouncyCastle.Math.EC.ECPoint,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo.m_preComp"></member>
    <member name="P:Org.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo.PreComp"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc7748.X25519"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.CalculateAgreement(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.CalculateAgreement(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.GeneratePublicKey(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.GeneratePublicKey(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc7748.X25519.PointSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.Precompute"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.ScalarMult(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.ScalarMult(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.ScalarMultBase(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519.ScalarMultBase(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc7748.X25519.ScalarSize"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Add(System.Int32[],System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.AddOne(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.AddOne(System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Apm(System.Int32[],System.Int32[],System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.AreEqual(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.AreEqualVar(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Carry(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.CMov(System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.CMov(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.CNegate(System.Int32,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Copy(System.Int32[],System.Int32,System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Copy(System.ReadOnlySpan{System.Int32},System.Span{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Create"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.CreateTable(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.CSwap(System.Int32,System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Decode(System.Byte[],System.Int32,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Decode(System.Byte[],System.Int32,System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Decode(System.Byte[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Decode(System.ReadOnlySpan{System.Byte},System.Span{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Decode(System.ReadOnlySpan{System.UInt32},System.Span{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Decode(System.UInt32[],System.Int32,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Encode(System.Int32[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Encode(System.Int32[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Encode(System.Int32[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Encode(System.Int32[],System.UInt32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Encode(System.ReadOnlySpan{System.Int32},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Encode(System.ReadOnlySpan{System.Int32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Inv(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Inv(System.ReadOnlySpan{System.Int32},System.Span{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.InvVar(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.InvVar(System.ReadOnlySpan{System.Int32},System.Span{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.IsOne(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.IsOneVar(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.IsZero(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.IsZeroVar(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Mul(System.Int32[],System.Int32,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Mul(System.Int32[],System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Negate(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Normalize(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Normalize(System.Span{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.One(System.Int32[])"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Size"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Sqr(System.Int32[],System.Int32,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Sqr(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.SqrtRatioVar(System.Int32[],System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Sub(System.Int32[],System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.SubOne(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X25519Field.Zero(System.Int32[])"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc7748.X448"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.CalculateAgreement(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.CalculateAgreement(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.GeneratePublicKey(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.GeneratePublicKey(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc7748.X448.PointSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.Precompute"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.ScalarMult(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.ScalarMult(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.ScalarMultBase(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448.ScalarMultBase(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc7748.X448.ScalarSize"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc7748.X448Field"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Add(System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Add(System.UInt32[],System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.AddOne(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.AddOne(System.UInt32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.AreEqual(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.AreEqualVar(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Carry(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.CMov(System.Int32,System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.CMov(System.Int32,System.UInt32[],System.Int32,System.UInt32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.CNegate(System.Int32,System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Copy(System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Copy(System.UInt32[],System.Int32,System.UInt32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Create"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.CreateTable(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.CSwap(System.Int32,System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Decode(System.Byte[],System.Int32,System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Decode(System.Byte[],System.Int32,System.UInt32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Decode(System.Byte[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Decode(System.ReadOnlySpan{System.Byte},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Decode(System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Decode(System.UInt32[],System.Int32,System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Encode(System.ReadOnlySpan{System.UInt32},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Encode(System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Encode(System.UInt32[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Encode(System.UInt32[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Encode(System.UInt32[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Encode(System.UInt32[],System.UInt32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Inv(System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Inv(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.InvVar(System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.InvVar(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.IsOne(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.IsOneVar(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.IsZero(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.IsZeroVar(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Mul(System.UInt32[],System.UInt32,System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Mul(System.UInt32[],System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Negate(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Normalize(System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Normalize(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.One(System.UInt32[])"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Size"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Sqr(System.UInt32[],System.Int32,System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Sqr(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.SqrtRatioVar(System.UInt32[],System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Sub(System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{System.UInt32},System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Sub(System.UInt32[],System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.SubOne(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc7748.X448Field.Zero(System.UInt32[])"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519">
      <summary>
            A low-level implementation of the Ed25519, Ed25519ctx, and Ed25519ph instantiations of the Edwards-Curve Digital
            Signature Algorithm specified in <a href="https://www.rfc-editor.org/rfc/rfc8032">RFC 8032</a>.
            </summary>
      <remarks>
            The implementation strategy is mostly drawn from <a href="https://ia.cr/2012/309">
            Mike Hamburg, "Fast and compact elliptic-curve cryptography"</a>, notably the "signed multi-comb" algorithm (for
            scalar multiplication by a fixed point), the "half Niels coordinates" (for precomputed points), and the
            "extensible coordinates" (for accumulators). Standard
            <a href="https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html">extended coordinates</a> are used during
            precomputations, needing only a single extra point addition formula.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.CreatePrehash"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.EncodePublicPoint(Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.EncodePublicPoint(Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.GeneratePublicKey(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.GeneratePublicKey(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.GeneratePublicKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.GeneratePublicKey(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Precompute"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PrehashSize"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicKeySize"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.SecretKeySize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Sign(System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Sign(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Sign(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Sign(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.SignatureSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.SignPrehash(System.Byte[],System.Int32,System.Byte[],Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.SignPrehash(System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.SignPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.SignPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyFull(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyFull(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyFullExport(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyFullExport(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyPartial(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyPartial(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyPartialExport(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.ValidatePublicKeyPartialExport(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Verify(System.Byte[],System.Int32,Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint,System.Byte[],System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Verify(System.Byte[],System.Int32,Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Verify(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Verify(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.VerifyPrehash(System.Byte[],System.Int32,Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint,System.Byte[],Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.VerifyPrehash(System.Byte[],System.Int32,Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint,System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.VerifyPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.VerifyPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.Algorithm"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PublicPoint"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc8032.Ed448">
      <summary>
            A low-level implementation of the Ed448 and Ed448ph instantiations of the Edwards-Curve Digital Signature
            Algorithm specified in <a href="https://www.rfc-editor.org/rfc/rfc8032">RFC 8032</a>.
            </summary>
      <remarks>
            The implementation uses the "signed mult-comb" algorithm (for scalar multiplication by a fixed point) from
            <a href="https://ia.cr/2012/309">Mike Hamburg, "Fast and compact elliptic-curve cryptography"</a>. Standard
            <a href="https://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html">projective coordinates</a> are used
            for most point arithmetic.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.CreatePrehash"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.EncodePublicPoint(Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicPoint,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.EncodePublicPoint(Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicPoint,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.GeneratePrivateKey(Org.BouncyCastle.Security.SecureRandom,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.GeneratePublicKey(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.GeneratePublicKey(System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.GeneratePublicKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.GeneratePublicKey(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Precompute"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PrehashSize"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicKeySize"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.SecretKeySize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Sign(System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Sign(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.SignatureSize"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.SignPrehash(System.Byte[],System.Int32,System.Byte[],Org.BouncyCastle.Crypto.IXof,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.SignPrehash(System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.SignPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],Org.BouncyCastle.Crypto.IXof,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.SignPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyFull(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyFull(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyFullExport(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyFullExport(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyPartial(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyPartial(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyPartialExport(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.ValidatePublicKeyPartialExport(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Verify(System.Byte[],System.Int32,Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicPoint,System.Byte[],System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Verify(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.VerifyPrehash(System.Byte[],System.Int32,Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicPoint,System.Byte[],Org.BouncyCastle.Crypto.IXof)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.VerifyPrehash(System.Byte[],System.Int32,Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicPoint,System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.VerifyPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],Org.BouncyCastle.Crypto.IXof)"></member>
    <member name="M:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.VerifyPrehash(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.Algorithm"></member>
    <member name="T:Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PublicPoint"></member>
    <member name="T:Org.BouncyCastle.Math.Field.FiniteFields"></member>
    <member name="M:Org.BouncyCastle.Math.Field.FiniteFields.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Math.Field.FiniteFields</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Math.Field.FiniteFields.GetBinaryExtensionField(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Math.Field.FiniteFields.GetPrimeField(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Math.Field.IExtensionField"></member>
    <member name="P:Org.BouncyCastle.Math.Field.IExtensionField.Degree"></member>
    <member name="P:Org.BouncyCastle.Math.Field.IExtensionField.Subfield"></member>
    <member name="T:Org.BouncyCastle.Math.Field.IFiniteField"></member>
    <member name="P:Org.BouncyCastle.Math.Field.IFiniteField.Characteristic"></member>
    <member name="P:Org.BouncyCastle.Math.Field.IFiniteField.Dimension"></member>
    <member name="T:Org.BouncyCastle.Math.Field.IPolynomial"></member>
    <member name="P:Org.BouncyCastle.Math.Field.IPolynomial.Degree"></member>
    <member name="M:Org.BouncyCastle.Math.Field.IPolynomial.GetExponentsPresent"></member>
    <member name="T:Org.BouncyCastle.Math.Field.IPolynomialExtensionField"></member>
    <member name="P:Org.BouncyCastle.Math.Field.IPolynomialExtensionField.MinimalPolynomial"></member>
    <member name="T:Org.BouncyCastle.Ocsp.BasicOcspResp">
      <remarks>
        <code>
            BasicOcspResponse ::= SEQUENCE {
            	tbsResponseData		ResponseData,
            	signatureAlgorithm	AlgorithmIdentifier,
            	signature			BIT STRING,
            	certs				[0] EXPLICIT SEQUENCE OF Certificate OPTIONAL
            }
            </code>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.#ctor(Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.BasicOcspResp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetCertificates">
      <returns>The certificates, if any, associated with the response.</returns>
      <exception cref="T:Org.BouncyCastle.Ocsp.OcspException">In the event of an encoding error.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetCerts"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetEncoded">
      <returns>The ASN.1 encoded representation of this object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetSignature"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetTbsResponseData">
      <returns>The DER encoding of the tbsResponseData field.</returns>
      <exception cref="T:Org.BouncyCastle.Ocsp.OcspException">In the event of an encoding error.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspResp.ProducedAt"></member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspResp.ResponderId"></member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspResp.ResponseExtensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspResp.Responses"></member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspResp.SignatureAlgName"></member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspResp.SignatureAlgOid"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.Verify(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Verify the signature against the tbsResponseData object we contain.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspResp.Version"></member>
    <member name="T:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.BasicOcspRespGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.#ctor(Org.BouncyCastle.Ocsp.RespID)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.BasicOcspRespGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(Org.BouncyCastle.Ocsp.CertificateID,Org.BouncyCastle.Ocsp.CertificateStatus)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(Org.BouncyCastle.Ocsp.CertificateID,Org.BouncyCastle.Ocsp.CertificateStatus,Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(Org.BouncyCastle.Ocsp.CertificateID,Org.BouncyCastle.Ocsp.CertificateStatus,System.DateTime,System.Nullable{System.DateTime},Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(Org.BouncyCastle.Ocsp.CertificateID,Org.BouncyCastle.Ocsp.CertificateStatus,System.Nullable{System.DateTime},Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.Generate(Org.BouncyCastle.Crypto.ISignatureFactory,Org.BouncyCastle.X509.X509Certificate[],System.DateTime)">
      <summary>
            Generate the signed response using the passed in signature calculator.
            </summary>
      <param name="signatureCalculatorFactory">Implementation of signing calculator factory.</param>
      <param name="chain">The certificate chain associated with the response signer.</param>
      <param name="producedAt">"produced at" date.</param>
      <returns></returns>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.Generate(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate[],System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.Generate(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate[],System.DateTime,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.SetResponseExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.SignatureAlgNames"></member>
    <member name="T:Org.BouncyCastle.Ocsp.CertificateID"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.#ctor(Org.BouncyCastle.Asn1.Ocsp.CertID)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.CertificateID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.#ctor(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.CertificateID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.#ctor(Org.BouncyCastle.Crypto.IDigestFactory,Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.CertificateID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.#ctor(System.String,Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.CertificateID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.DeriveCertificateID(Org.BouncyCastle.Ocsp.CertificateID,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Ocsp.CertificateID.DigestSha1"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.Equals(Org.BouncyCastle.Ocsp.CertificateID)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.GetIssuerKeyHash"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.GetIssuerNameHash"></member>
    <member name="P:Org.BouncyCastle.Ocsp.CertificateID.HashAlgOid"></member>
    <member name="F:Org.BouncyCastle.Ocsp.CertificateID.HashSha1"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.MatchesIssuer(Org.BouncyCastle.Crypto.IDigestFactory,Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.MatchesIssuer(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="P:Org.BouncyCastle.Ocsp.CertificateID.SerialNumber"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Ocsp.CertificateStatus"></member>
    <member name="M:Org.BouncyCastle.Ocsp.CertificateStatus.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.CertificateStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Ocsp.CertificateStatus.Good"></member>
    <member name="T:Org.BouncyCastle.Ocsp.OcspException"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Ocsp.OcspReq"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.#ctor(Org.BouncyCastle.Asn1.Ocsp.OcspRequest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspReq</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspReq</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspReq</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetCertificates"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetCerts"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetRequestList"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetSignature"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetTbsRequest"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReq.IsSigned"></member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReq.RequestExtensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReq.RequestorName"></member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReq.SignatureAlgOid"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.Verify(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReq.Version"></member>
    <member name="T:Org.BouncyCastle.Ocsp.OcspReqGenerator"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspReqGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.AddRequest(Org.BouncyCastle.Ocsp.CertificateID)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.AddRequest(Org.BouncyCastle.Ocsp.CertificateID,Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.Generate"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.Generate(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate[])"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.Generate(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate[],Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.SetRequestExtensions(Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.SetRequestorName(Org.BouncyCastle.Asn1.X509.GeneralName)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.SetRequestorName(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReqGenerator.SignatureAlgNames"></member>
    <member name="T:Org.BouncyCastle.Ocsp.OcspResp"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.#ctor(Org.BouncyCastle.Asn1.Ocsp.OcspResponse)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspResp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspResp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspResp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.GetResponseObject"></member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspResp.Status"></member>
    <member name="T:Org.BouncyCastle.Ocsp.OCSPRespGenerator"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OCSPRespGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OCSPRespGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OCSPRespGenerator.Generate(System.Int32,System.Object)"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OCSPRespGenerator.InternalError"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OCSPRespGenerator.MalformedRequest"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OCSPRespGenerator.SigRequired"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OCSPRespGenerator.Successful"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OCSPRespGenerator.TryLater"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OCSPRespGenerator.Unauthorized"></member>
    <member name="T:Org.BouncyCastle.Ocsp.OcspRespStatus"></member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspRespStatus.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.OcspRespStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Ocsp.OcspRespStatus.InternalError"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OcspRespStatus.MalformedRequest"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OcspRespStatus.SigRequired"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OcspRespStatus.Successful"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OcspRespStatus.TryLater"></member>
    <member name="F:Org.BouncyCastle.Ocsp.OcspRespStatus.Unauthorized"></member>
    <member name="T:Org.BouncyCastle.Ocsp.Req"></member>
    <member name="M:Org.BouncyCastle.Ocsp.Req.#ctor(Org.BouncyCastle.Asn1.Ocsp.Request)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.Req</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.Req.GetCertID"></member>
    <member name="M:Org.BouncyCastle.Ocsp.Req.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.Req.SingleRequestExtensions"></member>
    <member name="T:Org.BouncyCastle.Ocsp.RespData"></member>
    <member name="M:Org.BouncyCastle.Ocsp.RespData.#ctor(Org.BouncyCastle.Asn1.Ocsp.ResponseData)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.RespData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.RespData.GetResponderId"></member>
    <member name="M:Org.BouncyCastle.Ocsp.RespData.GetResponses"></member>
    <member name="M:Org.BouncyCastle.Ocsp.RespData.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.RespData.ProducedAt"></member>
    <member name="P:Org.BouncyCastle.Ocsp.RespData.ResponseExtensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.RespData.Version"></member>
    <member name="T:Org.BouncyCastle.Ocsp.RespID"></member>
    <member name="M:Org.BouncyCastle.Ocsp.RespID.#ctor(Org.BouncyCastle.Asn1.Ocsp.ResponderID)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.RespID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.RespID.#ctor(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.RespID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.RespID.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.RespID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.RespID.Equals(Org.BouncyCastle.Ocsp.RespID)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.RespID.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Ocsp.RespID.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Ocsp.RespID.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Ocsp.RevokedStatus">
      <summary>Wrapper for the RevokedInfo object</summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.RevokedStatus.#ctor(Org.BouncyCastle.Asn1.Ocsp.RevokedInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.RevokedStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.RevokedStatus.#ctor(System.DateTime)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.RevokedStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.RevokedStatus.#ctor(System.DateTime,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.RevokedStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Ocsp.RevokedStatus.HasRevocationReason"></member>
    <member name="P:Org.BouncyCastle.Ocsp.RevokedStatus.RevocationReason">
      <summary>Return the revocation reason, if there is one.</summary>
      <returns>The revocation reason, if available.</returns>
      <remarks>This field is optional; test for it with <see cref="P:Org.BouncyCastle.Ocsp.RevokedStatus.HasRevocationReason" /> first.</remarks>
      <exception cref="T:System.InvalidOperationException">If no revocation reason is available.</exception>
    </member>
    <member name="P:Org.BouncyCastle.Ocsp.RevokedStatus.RevocationTime"></member>
    <member name="T:Org.BouncyCastle.Ocsp.SingleResp"></member>
    <member name="M:Org.BouncyCastle.Ocsp.SingleResp.#ctor(Org.BouncyCastle.Asn1.Ocsp.SingleResponse)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.SingleResp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.SingleResp.GetCertID"></member>
    <member name="M:Org.BouncyCastle.Ocsp.SingleResp.GetCertStatus"></member>
    <member name="M:Org.BouncyCastle.Ocsp.SingleResp.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.SingleResp.NextUpdate"></member>
    <member name="P:Org.BouncyCastle.Ocsp.SingleResp.SingleExtensions"></member>
    <member name="P:Org.BouncyCastle.Ocsp.SingleResp.ThisUpdate"></member>
    <member name="T:Org.BouncyCastle.Ocsp.UnknownStatus"></member>
    <member name="M:Org.BouncyCastle.Ocsp.UnknownStatus.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Ocsp.UnknownStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.OpenSsl.IPasswordFinder"></member>
    <member name="M:Org.BouncyCastle.OpenSsl.IPasswordFinder.GetPassword"></member>
    <member name="T:Org.BouncyCastle.OpenSsl.MiscPemGenerator"></member>
    <member name="M:Org.BouncyCastle.OpenSsl.MiscPemGenerator.#ctor(System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.MiscPemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.MiscPemGenerator.#ctor(System.Object,System.String,System.Char[],Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.MiscPemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.MiscPemGenerator.Generate"></member>
    <member name="T:Org.BouncyCastle.OpenSsl.PemException"></member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.PemException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.PemException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.PemException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.PemException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.OpenSsl.PemReader"></member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.PemReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader,Org.BouncyCastle.OpenSsl.IPasswordFinder)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.PemReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.ReadObject"></member>
    <member name="T:Org.BouncyCastle.OpenSsl.PemWriter">
      <remarks>General purpose writer for OpenSSL PEM objects.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemWriter.#ctor(System.IO.TextWriter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.PemWriter</parameter>
          </include>
        </markup>
      </summary>
      <param name="writer">The TextWriter object to write the output to.</param>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemWriter.WriteObject(System.Object)"></member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemWriter.WriteObject(System.Object,System.String,System.Char[],Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.OpenSsl.Pkcs8Generator"></member>
    <member name="M:Org.BouncyCastle.OpenSsl.Pkcs8Generator.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.Pkcs8Generator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.Pkcs8Generator.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.OpenSsl.Pkcs8Generator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.Pkcs8Generator.Generate"></member>
    <member name="P:Org.BouncyCastle.OpenSsl.Pkcs8Generator.IterationCount"></member>
    <member name="P:Org.BouncyCastle.OpenSsl.Pkcs8Generator.Password"></member>
    <member name="F:Org.BouncyCastle.OpenSsl.Pkcs8Generator.PbeSha1_2DES"></member>
    <member name="F:Org.BouncyCastle.OpenSsl.Pkcs8Generator.PbeSha1_3DES"></member>
    <member name="F:Org.BouncyCastle.OpenSsl.Pkcs8Generator.PbeSha1_RC2_128"></member>
    <member name="F:Org.BouncyCastle.OpenSsl.Pkcs8Generator.PbeSha1_RC2_40"></member>
    <member name="F:Org.BouncyCastle.OpenSsl.Pkcs8Generator.PbeSha1_RC4_128"></member>
    <member name="F:Org.BouncyCastle.OpenSsl.Pkcs8Generator.PbeSha1_RC4_40"></member>
    <member name="P:Org.BouncyCastle.OpenSsl.Pkcs8Generator.SecureRandom"></member>
    <member name="T:Org.BouncyCastle.Operators.CmsContentEncryptorBuilder"></member>
    <member name="M:Org.BouncyCastle.Operators.CmsContentEncryptorBuilder.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Operators.CmsContentEncryptorBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Operators.CmsContentEncryptorBuilder.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Operators.CmsContentEncryptorBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Operators.CmsContentEncryptorBuilder.Build"></member>
    <member name="T:Org.BouncyCastle.Operators.CmsKeyTransRecipientInfoGenerator"></member>
    <member name="M:Org.BouncyCastle.Operators.CmsKeyTransRecipientInfoGenerator.#ctor(Org.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber,Org.BouncyCastle.Crypto.IKeyWrapper)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Operators.CmsKeyTransRecipientInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Operators.CmsKeyTransRecipientInfoGenerator.#ctor(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.IKeyWrapper)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Operators.CmsKeyTransRecipientInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Operators.CmsKeyTransRecipientInfoGenerator.#ctor(System.Byte[],Org.BouncyCastle.Crypto.IKeyWrapper)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Operators.CmsKeyTransRecipientInfoGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Operators.Utilities.DefaultDigestAlgorithmFinder"></member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.DefaultDigestAlgorithmFinder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Operators.Utilities.DefaultDigestAlgorithmFinder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.DefaultDigestAlgorithmFinder.Find(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.DefaultDigestAlgorithmFinder.Find(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.DefaultDigestAlgorithmFinder.Find(System.String)"></member>
    <member name="F:Org.BouncyCastle.Operators.Utilities.DefaultDigestAlgorithmFinder.Instance"></member>
    <member name="T:Org.BouncyCastle.Operators.Utilities.DefaultSignatureAlgorithmFinder"></member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.DefaultSignatureAlgorithmFinder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Operators.Utilities.DefaultSignatureAlgorithmFinder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.DefaultSignatureAlgorithmFinder.Find(System.String)"></member>
    <member name="F:Org.BouncyCastle.Operators.Utilities.DefaultSignatureAlgorithmFinder.Instance"></member>
    <member name="T:Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder">
      <summary>
            Base interface for a finder of digest algorithm identifiers used with signatures.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder.Find(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
            Find the digest algorithm identifier that matches with the passed in digest name.
            </summary>
      <param name="digestOid">the OID of the digest algorithm of interest.</param>
      <returns>an algorithm identifier for the digest signature.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder.Find(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
      <summary>
            Find the digest algorithm identifier that matches with the passed in signature algorithm identifier.
            </summary>
      <param name="signatureAlgorithm">the signature algorithm of interest.</param>
      <returns>an algorithm identifier for the corresponding digest.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.IDigestAlgorithmFinder.Find(System.String)">
      <summary>
            Find the digest algorithm identifier that matches with the passed in digest name.
            </summary>
      <param name="digestName">the name of the digest algorithm of interest.</param>
      <returns>an algorithm identifier for the digest signature.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Operators.Utilities.ISignatureAlgorithmFinder"></member>
    <member name="M:Org.BouncyCastle.Operators.Utilities.ISignatureAlgorithmFinder.Find(System.String)"></member>
    <member name="T:Org.BouncyCastle.Pkcs.AsymmetricKeyEntry"></member>
    <member name="M:Org.BouncyCastle.Pkcs.AsymmetricKeyEntry.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.AsymmetricKeyEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.AsymmetricKeyEntry.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.AsymmetricKeyEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.AsymmetricKeyEntry.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.AsymmetricKeyEntry.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Pkcs.AsymmetricKeyEntry.Key"></member>
    <member name="T:Org.BouncyCastle.Pkcs.EncryptedPrivateKeyInfoFactory"></member>
    <member name="M:Org.BouncyCastle.Pkcs.EncryptedPrivateKeyInfoFactory.CreateEncryptedPrivateKeyInfo(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Char[],System.Byte[],System.Int32,Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.EncryptedPrivateKeyInfoFactory.CreateEncryptedPrivateKeyInfo(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Char[],System.Byte[],System.Int32,Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.EncryptedPrivateKeyInfoFactory.CreateEncryptedPrivateKeyInfo(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Char[],System.Byte[],System.Int32,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.EncryptedPrivateKeyInfoFactory.CreateEncryptedPrivateKeyInfo(System.String,System.Char[],System.Byte[],System.Int32,Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.EncryptedPrivateKeyInfoFactory.CreateEncryptedPrivateKeyInfo(System.String,System.Char[],System.Byte[],System.Int32,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest">
      <remarks>
             A class for verifying and creating Pkcs10 Certification requests.
             </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(Org.BouncyCastle.Crypto.ISignatureFactory,Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
      <param name="signatureFactory">The factory for signature calculators to sign the PKCS#10 request with.</param>
      <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
      <param name="publicKey">Public Key to be included in cert reqest.</param>
      <param name="attributes">ASN1Set of Attributes.</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(System.String,Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
      <param name="signatureAlgorithm">Name of Sig Alg.</param>
      <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
      <param name="publicKey">Public Key to be included in cert reqest.</param>
      <param name="attributes">ASN1Set of Attributes.</param>
      <param name="signingKey">Matching Private key for nominated (above) public key to be used to sign the request.</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.GetPublicKey">
      <summary>
            Get the public key.
            </summary>
      <returns>The public key.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.GetRequestedExtensions">
      <summary>
            Returns X509Extensions if the Extensions Request attribute can be found and returns the extensions block.
            </summary>
      <returns>X509Extensions block or null if one cannot be found.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.Verify">
      <summary>
            Verify Pkcs10 Cert Request is valid.
            </summary>
      <returns>true = valid.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.Verify(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.Verify(Org.BouncyCastle.Crypto.IVerifierFactory)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.Verify(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)"></member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned">
      <remarks>
             A class for creating and verifying Pkcs10 Certification requests (this is an extension on <see cref="T:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest" />).
             The requests are made using delay signing. This is useful for situations where
             the private key is in another environment and not directly accessible (e.g. HSM)
             So the first step creates the request, then the signing is done outside this
             object and the signature is then used to complete the request.
             </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(System.String,Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary>
            Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
            </summary>
      <param name="signatureAlgorithm">Name of Sig Alg.</param>
      <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
      <param name="publicKey">Public Key to be included in cert reqest.</param>
      <param name="attributes">ASN1Set of Attributes.</param>
      <remarks>
            After the object is constructed use the <see cref="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.GetDataToSign" /> and finally the
            SignRequest methods to finalize the request.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(System.String,Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.Asn1Set,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.GetDataToSign"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.SignRequest(Org.BouncyCastle.Asn1.DerBitString)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.SignRequest(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs12Entry"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Entry.#ctor(System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs12Entry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkcs.Pkcs12Entry.BagAttributeKeys"></member>
    <member name="P:Org.BouncyCastle.Pkcs.Pkcs12Entry.Item(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs12Store"></member>
    <member name="P:Org.BouncyCastle.Pkcs.Pkcs12Store.Aliases"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.ContainsAlias(System.String)"></member>
    <member name="P:Org.BouncyCastle.Pkcs.Pkcs12Store.Count"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.DeleteEntry(System.String)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.GetCertificate(System.String)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.GetCertificateAlias(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.GetCertificateChain(System.String)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.GetKey(System.String)"></member>
    <member name="F:Org.BouncyCastle.Pkcs.Pkcs12Store.IgnoreUselessPasswordProperty"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.IsCertificateEntry(System.String)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.IsEntryOfType(System.String,System.Type)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.IsKeyEntry(System.String)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.Load(System.IO.Stream,System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.LoadKeyBag(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo,Org.BouncyCastle.Asn1.Asn1Set)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.LoadPkcs8ShroudedKeyBag(Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo,Org.BouncyCastle.Asn1.Asn1Set,System.Char[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.Save(System.IO.Stream,System.Char[],Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.SetCertificateEntry(System.String,Org.BouncyCastle.Pkcs.X509CertificateEntry)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Store.SetKeyEntry(System.String,Org.BouncyCastle.Pkcs.AsymmetricKeyEntry,Org.BouncyCastle.Pkcs.X509CertificateEntry[])"></member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder.Build"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder.SetCertAlgorithm(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder.SetKeyAlgorithm(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder.SetKeyAlgorithm(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder.SetReverseCertificates(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12StoreBuilder.SetUseDerEncoding(System.Boolean)"></member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs12Utilities"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Utilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs12Utilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[],System.Char[])"></member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfo">
      <summary>
            A holding class for a PKCS#8 encrypted private key info object that allows for its decryption.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfo.#ctor(Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo)">
      <summary>
            Base constructor from a PKCS#8 EncryptedPrivateKeyInfo object.
            </summary>
      <param name="encryptedPrivateKeyInfo">A PKCS#8 EncryptedPrivateKeyInfo object.</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfo.#ctor(System.Byte[])">
      <summary>
            Base constructor from a BER encoding of a PKCS#8 EncryptedPrivateKeyInfo object.
            </summary>
      <param name="encryptedPrivateKeyInfo">A BER encoding of a PKCS#8 EncryptedPrivateKeyInfo objects.</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfo.DecryptPrivateKeyInfo(Org.BouncyCastle.Crypto.IDecryptorBuilderProvider)">
      <summary>
            Get a decryptor from the passed in provider and decrypt the encrypted private key info, returning the result.
            </summary>
      <param name="inputDecryptorProvider">A provider to query for decryptors for the object.</param>
      <returns>The decrypted private key info structure.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfo.GetEncoded">
      <summary>
            Return a binary ASN.1 encoding of the EncryptedPrivateKeyInfo structure in this object.
            </summary>
      <returns>A byte array containing the encoded object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfo.GetEncryptedData">
      <summary>
            Returns a copy of the encrypted data in this structure.
            </summary>
      <returns>Return a copy of the encrypted data in this object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfo.ToAsn1Structure">
      <summary>
            Returns the underlying ASN.1 structure inside this object.
            </summary>
      <returns>Return the EncryptedPrivateKeyInfo structure in this object.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfoBuilder"></member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfoBuilder.#ctor(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfoBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfoBuilder.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfoBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs8EncryptedPrivateKeyInfoBuilder.Build(Org.BouncyCastle.Crypto.ICipherBuilder)">
      <summary>
            Create the encrypted private key info using the passed in encryptor.
            </summary>
      <param name="encryptor">The encryptor to use.</param>
      <returns>An encrypted private key info containing the original private key info.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Pkcs.PkcsException">
      <summary>Base exception for PKCS related issues.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pkcs.PkcsIOException">
      <summary>Base exception for parsing related issues in the PKCS namespace.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsIOException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsIOException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsIOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsIOException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsIOException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsIOException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.PkcsIOException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.PkcsIOException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pkcs.PrivateKeyInfoFactory"></member>
    <member name="M:Org.BouncyCastle.Pkcs.PrivateKeyInfoFactory.CreatePrivateKeyInfo(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.PrivateKeyInfoFactory.CreatePrivateKeyInfo(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.Asn1Set)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.PrivateKeyInfoFactory.CreatePrivateKeyInfo(System.Char[],Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.PrivateKeyInfoFactory.CreatePrivateKeyInfo(System.Char[],System.Boolean,Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo)"></member>
    <member name="T:Org.BouncyCastle.Pkcs.X509CertificateEntry"></member>
    <member name="M:Org.BouncyCastle.Pkcs.X509CertificateEntry.#ctor(Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.X509CertificateEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.X509CertificateEntry.#ctor(Org.BouncyCastle.X509.X509Certificate,System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.Asn1Encodable})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkcs.X509CertificateEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkcs.X509CertificateEntry.Certificate"></member>
    <member name="M:Org.BouncyCastle.Pkcs.X509CertificateEntry.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pkcs.X509CertificateEntry.GetHashCode"></member>
    <member name="T:Org.BouncyCastle.Pkix.CertStatus"></member>
    <member name="M:Org.BouncyCastle.Pkix.CertStatus.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.CertStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.CertStatus.RevocationDate">
      <summary>
            Returns the revocationDate.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.CertStatus.Status">
      <summary>
            Returns the certStatus.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Pkix.CertStatus.Undetermined"></member>
    <member name="F:Org.BouncyCastle.Pkix.CertStatus.Unrevoked"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixAttrCertChecker"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertChecker.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixAttrCertChecker</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertChecker.Check(Org.BouncyCastle.X509.X509V2AttributeCertificate,Org.BouncyCastle.Pkix.PkixCertPath,Org.BouncyCastle.Pkix.PkixCertPath,System.Collections.Generic.ICollection{System.String})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertChecker.Clone"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertChecker.GetSupportedExtensions"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixAttrCertPathBuilder"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertPathBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixAttrCertPathBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertPathBuilder.Build(Org.BouncyCastle.Pkix.PkixBuilderParameters)"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixAttrCertPathValidator"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertPathValidator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixAttrCertPathValidator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertPathValidator.Validate(Org.BouncyCastle.Pkix.PkixCertPath,Org.BouncyCastle.Pkix.PkixParameters)"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixBuilderParameters">
      <summary>
            Summary description for PkixBuilderParameters.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.#ctor(System.Collections.Generic.ISet{Org.BouncyCastle.Pkix.TrustAnchor},Org.BouncyCastle.Utilities.Collections.ISelector{Org.BouncyCastle.X509.X509Certificate})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixBuilderParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.#ctor(System.Collections.Generic.ISet{Org.BouncyCastle.Pkix.TrustAnchor},Org.BouncyCastle.Utilities.Collections.ISelector{Org.BouncyCastle.X509.X509Certificate},Org.BouncyCastle.Utilities.Collections.ISelector{Org.BouncyCastle.X509.X509V2AttributeCertificate})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixBuilderParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.Clone"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.GetExcludedCerts">
      <summary>
            Excluded certificates are not used for building a certification path.
            </summary>
      <returns>the excluded certificates.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.GetInstance(Org.BouncyCastle.Pkix.PkixParameters)"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixBuilderParameters.MaxPathLength"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.SetExcludedCerts(System.Collections.Generic.ISet{Org.BouncyCastle.X509.X509Certificate})">
      <summary>
            Sets the excluded certificates which are not used for building a
            certification path. If the <code language="cs">ISet</code> is <code>null</code> an
            empty set is assumed.
            </summary>
      <param name="excludedCerts">The excluded certificates to set.</param>
      <remarks>
            The given set is cloned to protect it against subsequent modifications.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.SetParams(Org.BouncyCastle.Pkix.PkixParameters)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.ToString"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPath">
      <summary>
            CertPath implementation for X.509 certificates.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.X509.X509Certificate})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPath</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPath</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.#ctor(System.IO.Stream,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPath</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPath.Certificates">
      <summary>
            Returns the list of certificates in this certification
            path.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPath.Encodings"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.GetEncoded(System.String)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.GetHashCode"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPathBuilder"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilder.Build(Org.BouncyCastle.Pkix.PkixBuilderParameters)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilder.Build(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Pkix.PkixBuilderParameters,System.Collections.Generic.IList{Org.BouncyCastle.X509.X509Certificate})"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPathBuilderException"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilderException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathBuilderException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathBuilderException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilderException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathBuilderException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilderException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathBuilderException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPathBuilderResult"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilderResult.#ctor(Org.BouncyCastle.Pkix.PkixCertPath,Org.BouncyCastle.Pkix.TrustAnchor,Org.BouncyCastle.Pkix.PkixPolicyNode,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathBuilderResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathBuilderResult.CertPath"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilderResult.ToString"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPathChecker"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathChecker</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.Check(Org.BouncyCastle.X509.X509Certificate,System.Collections.Generic.ISet{System.String})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.Clone"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.GetSupportedExtensions"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.Init(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.IsForwardCheckingSupported"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPathValidator">
      <summary>
            CertPathValidatorSpi implementation for X.509 Certificate validation a la RFC
            3280.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathValidator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidator.Validate(Org.BouncyCastle.Pkix.PkixCertPath,Org.BouncyCastle.Pkix.PkixParameters)"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPathValidatorException"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception,System.Int32)">
      <summary>
            Creates a <code language="cs">PkixCertPathValidatorException</code> with the specified
            detail message, cause, certification path, and index.
            </summary>
      <param name="message">the detail message (or <code>null</code> if none)</param>
      <param name="innerException">the cause (or <code>null</code> if none)</param>
      <param name="index">the index of the certificate in the certification path that</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.Index">
      <summary> eturns the index of the certificate in the certification path that caused the exception to be
            thrown.</summary>
      <returns>The index that has been set, or -1 if none has been set.</returns>
      <remarks>
            Note that the list of certificates in a <see cref="T:Org.BouncyCastle.Pkix.PkixCertPath" /> is zero based. If no index has been set,
            -1 is returned.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.m_index"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCertPathValidatorResult"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorResult.#ctor(Org.BouncyCastle.Pkix.TrustAnchor,Org.BouncyCastle.Pkix.PkixPolicyNode,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCertPathValidatorResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorResult.Clone"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathValidatorResult.PolicyTree"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathValidatorResult.SubjectPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorResult.ToString"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathValidatorResult.TrustAnchor"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixCrlUtilities"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCrlUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixCrlUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCrlUtilities.FindCrls(Org.BouncyCastle.Utilities.Collections.ISelector{Org.BouncyCastle.X509.X509Crl},Org.BouncyCastle.Pkix.PkixParameters)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCrlUtilities.FindCrls(Org.BouncyCastle.Utilities.Collections.ISelector{Org.BouncyCastle.X509.X509Crl},Org.BouncyCastle.Pkix.PkixParameters,System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCrlUtilities.FindCrls(Org.BouncyCastle.X509.Store.X509CrlStoreSelector,Org.BouncyCastle.Pkix.PkixParameters)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCrlUtilities.FindCrls(Org.BouncyCastle.X509.Store.X509CrlStoreSelector,Org.BouncyCastle.Pkix.PkixParameters,System.DateTime)"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixNameConstraintValidator"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixNameConstraintValidator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.AddExcludedSubtree(Org.BouncyCastle.Asn1.X509.GeneralSubtree)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.checkExcluded(Org.BouncyCastle.Asn1.X509.GeneralName)">
      <exception cref="T:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException" />
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.CheckExcludedDN(Org.BouncyCastle.Asn1.Asn1Sequence)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.CheckExcludedName(Org.BouncyCastle.Asn1.X509.GeneralName)">
      <exception cref="T:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException" />
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.checkPermitted(Org.BouncyCastle.Asn1.X509.GeneralName)">
      <exception cref="T:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException" />
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.CheckPermittedDN(Org.BouncyCastle.Asn1.Asn1Sequence)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.CheckPermittedName(Org.BouncyCastle.Asn1.X509.GeneralName)">
      <exception cref="T:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException" />
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.IntersectEmptyPermittedSubtree(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.IntersectPermittedSubtree(Org.BouncyCastle.Asn1.Asn1Sequence)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.ToString"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixNameConstraintValidatorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pkix.PkixParameters">
      <summary>
            Summary description for PkixParameters.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.#ctor(System.Collections.Generic.ISet{Org.BouncyCastle.Pkix.TrustAnchor})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.AddCertPathChecker(Org.BouncyCastle.Pkix.PkixCertPathChecker)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.AddStoreAttrCert(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.AddStoreCert(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.AddStoreCrl(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl})"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixParameters.ChainValidityModel"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.Clone"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.Date"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetAttrCertCheckers"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetCertPathCheckers"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetInitialPolicies"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetNecessaryACAttributes"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetProhibitedACAttributes"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetStoresAttrCert"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetStoresCert"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetStoresCrl"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetTargetConstraintsAttrCert"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetTargetConstraintsCert"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetTrustAnchors"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetTrustedACIssuers"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsAdditionalLocationsEnabled"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsAnyPolicyInhibited"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsExplicitPolicyRequired"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsPolicyMappingInhibited"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsPolicyQualifiersRejected"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsRevocationEnabled"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsUseDeltasEnabled"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixParameters.PkixValidityModel"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetAdditionalLocationsEnabled(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetAttrCertCheckers(System.Collections.Generic.ISet{Org.BouncyCastle.Pkix.PkixAttrCertChecker})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetAttrStoresCert(System.Collections.Generic.IList{Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate}})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetCertPathCheckers(System.Collections.Generic.IList{Org.BouncyCastle.Pkix.PkixCertPathChecker})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetInitialPolicies(System.Collections.Generic.ISet{System.String})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetNecessaryACAttributes(System.Collections.Generic.ISet{System.String})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetParams(Org.BouncyCastle.Pkix.PkixParameters)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetProhibitedACAttributes(System.Collections.Generic.ISet{System.String})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetStoresAttrCert(System.Collections.Generic.IList{Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate}})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetStoresCert(System.Collections.Generic.IList{Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate}})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetStoresCrl(System.Collections.Generic.IList{Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl}})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetTargetConstraintsAttrCert(Org.BouncyCastle.Utilities.Collections.ISelector{Org.BouncyCastle.X509.X509V2AttributeCertificate})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetTargetConstraintsCert(Org.BouncyCastle.Utilities.Collections.ISelector{Org.BouncyCastle.X509.X509Certificate})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetTrustAnchors(System.Collections.Generic.ISet{Org.BouncyCastle.Pkix.TrustAnchor})"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetTrustedACIssuers(System.Collections.Generic.ISet{Org.BouncyCastle.Pkix.TrustAnchor})"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.ValidityModel"></member>
    <member name="T:Org.BouncyCastle.Pkix.PkixPolicyNode">
      <summary>
            Summary description for PkixPolicyNode.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixPolicyNode.#ctor(System.Collections.Generic.IEnumerable{Org.BouncyCastle.Pkix.PkixPolicyNode},System.Int32,System.Collections.Generic.ISet{System.String},Org.BouncyCastle.Pkix.PkixPolicyNode,System.Collections.Generic.ISet{Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo},System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pkix.PkixPolicyNode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixPolicyNode.AddChild(Org.BouncyCastle.Pkix.PkixPolicyNode)"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.Children"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixPolicyNode.Clone"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixPolicyNode.Copy"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.Depth"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.ExpectedPolicies"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.HasChildren"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.IsCritical"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixPolicyNode.mChildren"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixPolicyNode.mCritical"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixPolicyNode.mDepth"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixPolicyNode.mExpectedPolicies"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixPolicyNode.mParent"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixPolicyNode.mPolicyQualifiers"></member>
    <member name="F:Org.BouncyCastle.Pkix.PkixPolicyNode.mValidPolicy"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.Parent"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.PolicyQualifiers"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixPolicyNode.RemoveChild(Org.BouncyCastle.Pkix.PkixPolicyNode)"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixPolicyNode.ToString"></member>
    <member name="M:Org.BouncyCastle.Pkix.PkixPolicyNode.ToString(System.String)"></member>
    <member name="P:Org.BouncyCastle.Pkix.PkixPolicyNode.ValidPolicy"></member>
    <member name="T:Org.BouncyCastle.Pkix.TrustAnchor">
      <summary>
            A trust anchor or most-trusted Certification Authority (CA).
            
            This class represents a "most-trusted CA", which is used as a trust anchor
            for validating X.509 certification paths. A most-trusted CA includes the
            public key of the CA, the CA's name, and any constraints upon the set of
            paths which may be validated using this key. These parameters can be
            specified in the form of a trusted X509Certificate or as individual
            parameters.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.TrustAnchor.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])">
      <summary>
            Creates an instance of <c>TrustAnchor</c> where the
            most-trusted CA is specified as an X500Principal and public key.
            </summary>
      <param name="caPrincipal">the name of the most-trusted CA as X509Name</param>
      <param name="pubKey">the public key of the most-trusted CA</param>
      <param name="nameConstraints">
            a byte array containing the ASN.1 DER encoding of a NameConstraints extension to
            be used for checking name constraints. Only the value of the extension is included,
            not the OID or criticality flag. Specify <c>null</c> to omit the parameter.
            </param>
      <remarks>
        <p>
            Name constraints are an optional parameter, and are intended to be used
            as additional constraints when validating an X.509 certification path.
            </p>
        <p>
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they
            would appear in the NameConstraints structure defined in RFC 2459
            and X.509. The ASN.1 notation for this structure is supplied in the
            documentation for the other constructors.
            </p>
        <p>
            Note that the name constraints byte array supplied here is cloned to
            protect against subsequent modifications.
            </p>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
            if <c>caPrincipal</c> or <c>pubKey</c> is null
            </exception>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.TrustAnchor.#ctor(Org.BouncyCastle.X509.X509Certificate,System.Byte[])">
      <summary>
             Creates an instance of TrustAnchor with the specified X509Certificate and
             optional name constraints, which are intended to be used as additional
             constraints when validating an X.509 certification path.
            	The name constraints are specified as a byte array. This byte array
            	should contain the DER encoded form of the name constraints, as they
            	would appear in the NameConstraints structure defined in RFC 2459 and
            	X.509. The ASN.1 definition of this structure appears below.
            	
            	<pre>
            	NameConstraints ::= SEQUENCE {
            		permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
            		excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
            	   
             GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
             
            		GeneralSubtree ::= SEQUENCE {
            		base                    GeneralName,
            		minimum         [0]     BaseDistance DEFAULT 0,
            		maximum         [1]     BaseDistance OPTIONAL }
            		
            		BaseDistance ::= INTEGER (0..MAX)
            
            		GeneralName ::= CHOICE {
            		otherName                       [0]     OtherName,
            		rfc822Name                      [1]     IA5String,
            		dNSName                         [2]     IA5String,
            		x400Address                     [3]     ORAddress,
            		directoryName                   [4]     Name,
            		ediPartyName                    [5]     EDIPartyName,
            		uniformResourceIdentifier       [6]     IA5String,
            		iPAddress                       [7]     OCTET STRING,
            		registeredID                    [8]     OBJECT IDENTIFIER}
            	</pre>
            	
            	Note that the name constraints byte array supplied is cloned to protect
            	against subsequent modifications.
             </summary>
      <param name="trustedCert">a trusted X509Certificate</param>
      <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
             NameConstraints extension to be used for checking name
             constraints. Only the value of the extension is included, not
             the OID or criticality flag. Specify null to omit the
             parameter.</param>
      <exception cref="T:System.ArgumentNullException">if the specified X509Certificate is null</exception>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.TrustAnchor.#ctor(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])">
      <summary>
            Creates an instance of <code>TrustAnchor</code> where the most-trusted
            CA is specified as a distinguished name and public key. Name constraints
            are an optional parameter, and are intended to be used as additional
            constraints when validating an X.509 certification path.
            <br />
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they would
            appear in the NameConstraints structure defined in RFC 2459 and X.509.
            </summary>
      <param name="caName">the X.500 distinguished name of the most-trusted CA in RFC
            2253 string format</param>
      <param name="pubKey">the public key of the most-trusted CA</param>
      <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
            NameConstraints extension to be used for checking name
            constraints. Only the value of the extension is included, not 
            the OID or criticality flag. Specify null to omit the 
            parameter.</param>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.CA">
      <summary>
            Returns the name of the most-trusted CA as an X509Name.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.CAName">
      <summary>
            Returns the name of the most-trusted CA in RFC 2253 string format.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.CAPublicKey">
      <summary>
            Returns the public key of the most-trusted CA.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.GetNameConstraints"></member>
    <member name="M:Org.BouncyCastle.Pkix.TrustAnchor.ToString">
      <summary>
            Returns a formatted string describing the <code>TrustAnchor</code>.
            </summary>
      <returns>a formatted string describing the <code>TrustAnchor</code></returns>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.TrustedCert">
      <summary>
            Returns the most-trusted CA certificate.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.#ctor(System.Int32,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],Org.BouncyCastle.Pqc.Asn1.CmcePublicKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.Alpha"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.Asn1GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.C"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.Delta"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.G"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.PublicKey"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.S"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.ToAsn1Primitive"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePrivateKey.Version"></member>
    <member name="T:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.CmcePublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.CmcePublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.Asn1GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.T"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.CmcePublicKey.ToAsn1Primitive"></member>
    <member name="T:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.#ctor(System.Int32,System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.#ctor(System.Int32,System.Byte[],System.Byte[],System.Byte[],Org.BouncyCastle.Pqc.Asn1.KyberPublicKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.GetHpk"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.GetNonce"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.GetS"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.PublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.KyberPrivateKey.Version"></member>
    <member name="T:Org.BouncyCastle.Pqc.Asn1.KyberPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPublicKey.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.KyberPublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPublicKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPublicKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.KyberPublicKey.Rho"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.KyberPublicKey.T"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.KyberPublicKey.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.gmss"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.gmssWithSha1"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.gmssWithSha224"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.gmssWithSha256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.gmssWithSha384"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.gmssWithSha512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Dilithium3_ECDSA_brainpoolP256r1_SHA256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Dilithium3_ECDSA_P256_SHA256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Dilithium3_Ed25519"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Dilithium3_RSA_PKCS15_SHA256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Dilithium5_ECDSA_brainpoolP384r1_SHA384"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Dilithium5_ECDSA_P384_SHA384"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Dilithium5_Ed448"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Falcon512_ECDSA_brainpoolP256r1_SHA256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Falcon512_ECDSA_P256_SHA256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.id_Falcon512_Ed25519"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.mcEliece"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.mcElieceCca2"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.mcElieceFujisaki"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.mcElieceKobara_Imai"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.mcEliecePointcheval"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.newHope"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.qTESLA"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.qTESLA_p_I"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.qTESLA_p_III"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.rainbow"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.rainbowWithSha1"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.rainbowWithSha224"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.rainbowWithSha256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.rainbowWithSha384"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.rainbowWithSha512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.sphincs256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.sphincs256_with_BLAKE512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.sphincs256_with_SHA3_512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.sphincs256_with_SHA512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHA256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHA256ph"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHA512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHA512ph"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHAKE128"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHAKE128ph"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHAKE256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_mt_SHAKE256ph"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHA256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHA256ph"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHA512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHA512ph"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHAKE128"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHAKE128ph"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHAKE256"></member>
    <member name="F:Org.BouncyCastle.Pqc.Asn1.PqcObjectIdentifiers.xmss_SHAKE256ph"></member>
    <member name="T:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.#ctor(System.Int32,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.#ctor(System.Int32,System.Byte[],System.Byte[],Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.GetSkprf"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.GetSkseed"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.PublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.ToAsn1Object"></member>
    <member name="P:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPrivateKey.Version"></member>
    <member name="T:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey.GetPkroot"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey.GetPkseed"></member>
    <member name="M:Org.BouncyCastle.Pqc.Asn1.SphincsPlusPublicKey.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.IKemParameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.IMessageSigner">
      <summary>Base interface for a PQC signature algorithm.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.IMessageSigner.GenerateSignature(System.Byte[])">
      <summary>Sign a message.</summary>
      <param name="message">the message to be signed.</param>
      <returns>the signature of the message.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.IMessageSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)">
      <summary>Initialise this instance for signature generation or verification.</summary>
      <param name="forSigning">true if we are generating a signature, false otherwise.</param>
      <param name="param">parameters for signature generation or verification.</param>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.IMessageSigner.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Verify a purported signature for a message.</summary>
      <param name="message">the message supposedly signed.</param>
      <param name="signature">the purported signature to verify.</param>
      <returns>true if and only if the signature verified against the message.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.bike128"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.bike192"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.bike256"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.L"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.LByte"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.Name"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.NbIter"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.R"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.RByte"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.T"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.Tau"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters.W"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters,System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters.GetH0"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters.GetH1"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikePrivateKeyParameters.GetSigma"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Bike.BikePublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikePublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Bike.BikeParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Bike.BikePublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Bike.BikePublicKeyParameters.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.M"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece348864fr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece348864r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece460896fr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece460896r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece6688128fr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece6688128r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece6960119fr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece6960119r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece8192128fr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.mceliece8192128r3"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.Mu"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.N"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.Name"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.Nu"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters.T"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters.GetPrivateKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePrivateKeyParameters.ReconstructPublicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Cmce.CmceParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Cmce.CmcePublicKeyParameters.GetPublicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters.Dilithium2"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters.Dilithium2Aes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters.Dilithium3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters.Dilithium3Aes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters.Dilithium5"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters.Dilithium5Aes"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters,System.Byte[],Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.GetPublicKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.K"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.Rho"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.S1"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.S2"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.T0"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.T1"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPrivateKeyParameters.Tr"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumParameters,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters.GetRho"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumPublicKeyParameters.GetT1"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumSigner"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.DilithiumSigner.VerifySignature(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.Symmetric"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.Symmetric.Stream128BlockBytes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Dilithium.Symmetric.Stream256BlockBytes"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.K"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.kyber1024"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.kyber1024_aes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.kyber512"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.kyber512_aes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.kyber768"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.kyber768_aes"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.Name"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters.SessionKeySize"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetHpk"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetNonce"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetRho"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetS"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPrivateKeyParameters.GetT"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberParameters,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters.GetRho"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.KyberPublicKeyParameters.GetT"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Crystals.Kyber.Symmetric"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters.falcon_1024"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters.falcon_512"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters.LogN"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters.Name"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters.NonceLength"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters.GetG"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters.GetSpolyBigF"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPrivateKeyParameters.GetSpolyLittleF"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Falcon.FalconParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconPublicKeyParameters.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconSigner"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Falcon.FalconSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Falcon.FalconSigner.VerifySignature(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.#ctor(System.Int32,System.Int32,System.Int32,System.Int16[],Org.BouncyCastle.Crypto.IDigest,Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoMatrixGenerator)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.CipherTextSize"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.kem_dec(System.Byte[],System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.kem_enc(System.Byte[],System.Byte[],System.Byte[],Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.kem_keypair(System.Byte[],System.Byte[],Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.PrivateKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.PublicKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoEngine.SessionKeySize"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKEMGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoMatrixGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoMatrixGenerator.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoMatrixGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.B"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.CdfTable"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.D"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.Digest"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.Engine"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem1344aes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem1344shake"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem19888r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem19888shaker3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem31296r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem31296shaker3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem43088r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem43088shaker3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem640aes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem640shake"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem976aes"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.frodokem976shake"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.MGen"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.N"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters.Name"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPrivateKeyParameters.GetPrivateKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Frodo.FrodoPublicKeyParameters.GetPublicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyPairGenerator.GenerateKeyPairWithSeed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.Delta"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.hqc128"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.hqc192"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.hqc256"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.K"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.N"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.N1"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.N1n2Bytes"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.N2"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.NBytes"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.SaltSizeBytes"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.Sha512Bytes"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.W"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.We"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters.Wr"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPrivateKeyParameters.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPrivateKeyParameters.PrivateKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Hqc.HqcParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPublicKeyParameters.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Hqc.HqcPublicKeyParameters.PublicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.Composer"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Boolean(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Build"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Bytes(Org.BouncyCastle.Utilities.IEncodable)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Bytes(Org.BouncyCastle.Utilities.IEncodable[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Bytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Bytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Bytes2(System.Byte[][])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Bytes2(System.Byte[][],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Compose"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.Pad(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.PadUntil(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.U16Str(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.U32Str(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Composer.U64Str(System.Int64)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.Hss"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Hss.GenerateHssKeyPair(Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyGenerationParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Hss.GenerateSignature(Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Hss.GenerateSignature(System.Int32,Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Hss.IncrementIndex(Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Hss.RangeTestKeys(Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Hss.VerifySignature(Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters,Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyGenerationParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters[],Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyGenerationParameters.Depth"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyGenerationParameters.GetLmsParameters(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.#ctor(System.Int32,System.Collections.Generic.IList{Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters},System.Collections.Generic.IList{Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature},System.Int64,System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.Clone"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.ExtractKeyShard(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GenerateLmsContext"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GenerateSignature(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetIndex"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetInstance(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetKeys"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetLmsParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.GetUsagesRemaining"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.IndexLimit"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.IsShard"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.L"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPrivateKeyParameters.UpdateHierarchy(System.Collections.Generic.IList{Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters},System.Collections.Generic.IList{Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature})"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.#ctor(System.Int32,Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.GenerateLmsContext(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.L"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.LmsPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssPublicKeyParameters.Verify(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.#ctor(System.Int32,Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey[],Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.GetInstance(System.Object,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.GetLMinus1"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.GetSignedPubKeys"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.HssSignature.Signature"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.HssSigner"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.HssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.HssSigner.VerifySignature(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.ILmsContextBasedSigner"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.ILmsContextBasedSigner.GenerateLmsContext"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.ILmsContextBasedSigner.GenerateSignature(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.ILmsContextBasedSigner.GetUsagesRemaining"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.ILmsContextBasedVerifier"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.ILmsContextBasedVerifier.GenerateLmsContext(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.ILmsContextBasedVerifier.Verify(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.Cksm(System.Byte[],System.Int32,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.Coef(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.lm_ots_generate_signature(Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey,System.Byte[][],System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.LMOtsGenerateSignature(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey,System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.LMOtsValidateSignature(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.LMOtsValidateSignatureCalculate(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.LMOtsValidateSignatureCalculate(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOts.LmsOtsGeneratePublicKey(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.DigestOid"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.GetParametersByID(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.ID"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.Ls"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.N"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.P"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.sha256_n32_w1"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.sha256_n32_w2"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.sha256_n32_w4"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.sha256_n32_w8"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.SigLen"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters.W"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters,System.Byte[],System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey.GetSignatureContext(Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,System.Byte[][])"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey.I"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey.MasterSecret"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey.Parameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey.Q"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters,System.Byte[],System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.I"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.K"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.Parameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey.Q"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.C"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.ParamType"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature.Y"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.Lms"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Lms.GenerateKeys(Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters,System.Int32,System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Lms.GenerateSign(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Lms.GenerateSign(Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Lms.VerifySignature(Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters,Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Lms.VerifySignature(Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters,Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.Lms.VerifySignature(Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters,System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPrivateKey,Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Byte[][])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsPublicKey,System.Object,Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.AlgorithmName"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.BlockUpdate(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.BlockUpdate(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.C"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.DoFinal(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.DoFinal(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.GetByteLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.GetDigestSize"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.GetQ"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.PublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.Reset"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.Signature"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext.Update(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsException"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.DigestOid"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.GetParametersByID(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.H"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.ID"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.lms_sha256_n32_h10"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.lms_sha256_n32_h15"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.lms_sha256_n32_h20"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.lms_sha256_n32_h25"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.lms_sha256_n32_h5"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters.M"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyGenerationParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyGenerationParameters.LmsParameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsKeyParameters.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters.LMOtsParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters.LMSigParameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters,System.Int32,System.Byte[],System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.ExtractKeyShard(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GenerateLmsContext"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GenerateSignature(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetI"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetIndex"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetInstance(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetOtsParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetSigParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPrivateKeyParameters.GetUsagesRemaining"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsParameters,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GenerateLmsContext(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetI"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetInstance(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetLmsParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetOtsParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetSigParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.GetT1"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters.Verify(Org.BouncyCastle.Pqc.Crypto.Lms.LmsContext)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.#ctor(System.Int32,Org.BouncyCastle.Pqc.Crypto.Lms.LMOtsSignature,Org.BouncyCastle.Pqc.Crypto.Lms.LMSigParameters,System.Byte[][])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.GetInstance(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.OtsSignature"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.Q"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.SigParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature.Y"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey.#ctor(Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignature,Org.BouncyCastle.Pqc.Crypto.Lms.LmsPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSignedPubKey.GetSignature"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSigner"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.LmsSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsSigner.VerifySignature(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.LmsUtilities"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsUtilities.ByteArray(System.Byte[],Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsUtilities.ByteArray(System.Byte[],System.Int32,System.Int32,Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsUtilities.CalculateStrength(Org.BouncyCastle.Pqc.Crypto.Lms.LmsParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsUtilities.U16Str(System.Int16,Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.LmsUtilities.U32Str(System.Int32,Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive.#ctor(System.Byte[],System.Byte[],Org.BouncyCastle.Crypto.IDigest)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive.DeriveSeed(System.Boolean,System.Byte[],System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive.I"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive.J"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive.MasterSeed"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Lms.SeedDerive.Q"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemExtractor">
      <summary>
            NTRU secret encapsulation extractor.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemGenerator">
      <summary>
             Encapsulate a secret using NTRU. Returns an <see cref="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruEncapsulation" /> as encapsulation.
             </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyGenerationParameters.GetParameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyParameters.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters.Name"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters.NtruHps2048509"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters.NtruHps2048677"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters.NtruHps4096821"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters.NtruHrss701"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPrivateKeyParameters.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPrivateKeyParameters.PrivateKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Ntru.NtruParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPublicKeyParameters.GetEncoded"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Ntru.NtruPublicKeyParameters.PublicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl.GetEncapsulation"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl.GetSecret"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKemGenerator.SecretWithEncapsulationImpl.IsDestroyed"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.LPR"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.ntrulpr1013"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.ntrulpr1277"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.ntrulpr653"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.ntrulpr761"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.ntrulpr857"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.ntrulpr953"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.P"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters.Q"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePrivateKeyParameters.GetPrivateKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimeParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.NtruLPRimePublicKeyParameters.GetPublicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl.GetEncapsulation"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl.GetSecret"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKemGenerator.SecretWithEncapsulationImpl.IsDestroyed"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.LPR"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.P"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.Q"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.sntrup1013"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.sntrup1277"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.sntrup653"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.sntrup761"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.sntrup857"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters.sntrup953"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePrivateKeyParameters.GetPrivateKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimeParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.NtruPrime.SNtruPrimePublicKeyParameters.GetPublicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.Name"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnic3l1"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnic3l3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnic3l5"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl1fs"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl1full"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl1ur"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl3fs"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl3full"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl3ur"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl5fs"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl5full"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters.picnicl5ur"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPrivateKeyParameters.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicPublicKeyParameters.GetEncoded"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicSigner"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Picnic.PicnicSigner.VerifySignature(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Saber.SaberKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.DefaultKeySize"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.firesaberkem128r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.firesaberkem192r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.firesaberkem256r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.firesaberkem90sr3"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.L"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.lightsaberkem128r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.lightsaberkem192r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.lightsaberkem256r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.lightsaberkem90sr3"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.Name"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.saberkem128r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.saberkem192r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.saberkem256r3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.saberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.ufiresaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.ufiresaberkemr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.ulightsaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.ulightsaberkemr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.usaberkem90sr3"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters.usaberkemr3"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Saber.SaberPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPrivateKeyParameters.GetPrivateKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Saber.SaberParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Saber.SaberPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPublicKeyParameters.GetPublicKey"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Saber.SaberPublicKeyParameters.publicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.Symmetric"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Saber.Symmetric.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Saber.Symmetric</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Saber.Symmetric.ShakeSymmetric"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemExtractor"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemExtractor.#ctor(Org.BouncyCastle.Pqc.Crypto.Sike.SikePrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemExtractor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemExtractor.EncapsulationLength"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemExtractor.ExtractSecret(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemExtractor.ExtractSecret(System.Byte[],System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemGenerator.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKemGenerator.GenerateEncapsulated(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Sike.SikeKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.DefaultKeySize"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.Name"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep434"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep434_compressed"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep503"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep503_compressed"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep610"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep610_compressed"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep751"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters.sikep751_compressed"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikePrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikePrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Sike.SikePrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikePrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikePrivateKeyParameters.GetPrivateKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Sike.SikePublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikePublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.Sike.SikeParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Sike.SikePublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikePublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Sike.SikePublicKeyParameters.GetPublicKey"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Sike.SikePublicKeyParameters.publicKey"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyGenerationParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyGenerationParameters.#ctor(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyGenerationParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyGenerationParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyPairGenerator"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyPairGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyPairGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyPairGenerator.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyPairGenerator.Init(Org.BouncyCastle.Crypto.KeyGenerationParameters)"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyParameters"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusKeyParameters.Parameters"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.GetID(Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.GetParams(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_128f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_128f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_128s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_128s_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_192f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_192f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_192s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_192s_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_256f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_256f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_256s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.haraka_256s_simple"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.ID"></member>
    <member name="P:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.Name"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_128f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_128f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_128s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_128s_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_192f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_192f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_192s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_192s_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_256f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_256f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_256s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.sha2_256s_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_128f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_128f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_128s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_128s_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_192f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_192f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_192s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_192s_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_256f"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_256f_simple"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_256s"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters.shake_256s_simple"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.GetEncodedPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.GetPrf"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.GetPublicKey"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.GetPublicSeed"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.GetRoot"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPrivateKeyParameters.GetSeed"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPublicKeyParameters"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPublicKeyParameters.#ctor(Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusParameters,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPublicKeyParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPublicKeyParameters.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPublicKeyParameters.GetRoot"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusPublicKeyParameters.GetSeed"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusSigner"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusSigner.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusSigner.GenerateSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusSigner.Init(System.Boolean,Org.BouncyCastle.Crypto.ICipherParameters)"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.SphincsPlus.SphincsPlusSigner.VerifySignature(System.Byte[],System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.m_otherInfoBuilder"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.m_random"></member>
    <member name="F:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.m_used"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyU"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyU.#ctor(Org.BouncyCastle.Pqc.Crypto.IKemParameters,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[],System.Byte[],Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyU</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyU.Generate(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyU.GetSuppPrivInfoPartA"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyU.WithSuppPubInfo(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyV"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyV.#ctor(Org.BouncyCastle.Pqc.Crypto.IKemParameters,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[],System.Byte[],Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyV</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyV.Generate"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyV.GetSuppPrivInfoPartB(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator.PartyV.WithSuppPubInfo(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPrivateKeyFactory"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPrivateKeyFactory.CreateKey(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo)">
      <summary> Create a private key parameter from the passed in PKCS8 PrivateKeyInfo object.</summary>
      <param name="keyInfo"> the PrivateKeyInfo object containing the key material</param>
      <returns> a suitable private key parameter</returns>
      <exception cref="T:System.IO.IOException"> on an error decoding the key</exception>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPrivateKeyFactory.CreateKey(System.Byte[])">
      <summary> Create a private key parameter from a PKCS8 PrivateKeyInfo encoding.</summary>
      <param name="privateKeyInfoData"> the PrivateKeyInfo encoding</param>
      <returns> a suitable private key parameter</returns>
      <exception cref="T:System.IO.IOException"> on an error decoding the key</exception>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPrivateKeyFactory.CreateKey(System.IO.Stream)">
      <summary> Create a private key parameter from a PKCS8 PrivateKeyInfo encoding read from a stream</summary>
      <param name="inStr"> the stream to read the PrivateKeyInfo encoding from</param>
      <returns> a suitable private key parameter</returns>
      <exception cref="T:System.IO.IOException"> on an error decoding the key</exception>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPrivateKeyInfoFactory"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPrivateKeyInfoFactory.CreatePrivateKeyInfo(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary> Create a PrivateKeyInfo representation of a private key.</summary>
      <param name="privateKey"> the key to be encoded into the info object.</param>
      <returns> the appropriate PrivateKeyInfo</returns>
      <exception cref="T:System.ArgumentException"> on an error encoding the key</exception>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPrivateKeyInfoFactory.CreatePrivateKeyInfo(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.Asn1Set)">
      <summary> Create a PrivateKeyInfo representation of a private key with attributes.</summary>
      <param name="privateKey"> the key to be encoded into the info object.</param>
      <param name="attributes"> the set of attributes to be included.</param>
      <returns> the appropriate PrivateKeyInfo</returns>
      <exception cref="T:System.ArgumentException"> on an error encoding the key</exception>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPublicKeyFactory"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPublicKeyFactory.CreateKey(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary> Create a public key from the passed in SubjectPublicKeyInfo</summary>
      <param name="keyInfo"> the SubjectPublicKeyInfo containing the key data</param>
      <returns> the appropriate key parameter</returns>
      <exception cref="T:System.IO.IOException"> on an error decoding the key</exception>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPublicKeyFactory.CreateKey(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo,System.Object)">
      <summary> Create a public key from the passed in SubjectPublicKeyInfo</summary>
      <param name="keyInfo"> the SubjectPublicKeyInfo containing the key data</param>
      <param name="defaultParams"> default parameters that might be needed.</param>
      <returns> the appropriate key parameter</returns>
      <exception cref="T:System.IO.IOException"> on an error decoding the key</exception>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPublicKeyFactory.CreateKey(System.Byte[])">
      <summary> Create a public key from a SubjectPublicKeyInfo encoding</summary>
      <param name="keyInfoData"> the SubjectPublicKeyInfo encoding</param>
      <returns> the appropriate key parameter</returns>
      <exception cref="T:System.IO.IOException"> on an error decoding the key</exception>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcPublicKeyFactory.CreateKey(System.IO.Stream)">
      <summary> Create a public key from a SubjectPublicKeyInfo encoding read from a stream</summary>
      <param name="inStr"> the stream to read the SubjectPublicKeyInfo encoding from</param>
      <returns>the appropriate key parameter</returns>
      <exception cref="T:System.IO.IOException"> on an error decoding the key</exception>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcSubjectPublicKeyInfoFactory">
      <summary>
            A factory to produce Public Key Info Objects.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.PqcSubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Create a Subject Public Key Info object for a given public key.
            </summary>
      <param name="publicKey">One of ElGammalPublicKeyParameters, DSAPublicKeyParameter, DHPublicKeyParameters, RsaKeyParameters or ECPublicKeyParameters</param>
      <returns>A subject public key info object.</returns>
      <exception cref="T:System.Exception">Throw exception if object provided is not one of the above.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl.GetEncapsulation"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl.GetSecret"></member>
    <member name="M:Org.BouncyCastle.Pqc.Crypto.Utilities.SecretWithEncapsulationImpl.IsDestroyed"></member>
    <member name="T:Org.BouncyCastle.Security.AgreementUtilities">
      <remarks>
             Utility class for creating IBasicAgreement objects from their names/Oids
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetAlgorithmName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetBasicAgreement(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetBasicAgreement(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetBasicAgreementWithKdf(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetBasicAgreementWithKdf(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetBasicAgreementWithKdf(System.String,System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetRawAgreement(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.AgreementUtilities.GetRawAgreement(System.String)"></member>
    <member name="T:Org.BouncyCastle.Security.CipherUtilities">
      <remarks>
             Cipher Utility class contains methods that can not be specifically grouped into other classes.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Security.CipherUtilities.GetAlgorithmName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.CipherUtilities.GetCipher(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.CipherUtilities.GetCipher(System.String)"></member>
    <member name="T:Org.BouncyCastle.Security.DigestUtilities">
      <remarks>
             Utility class for creating IDigest objects from their names/Oids
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.CalculateDigest(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.CalculateDigest(System.String,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.CalculateDigest(System.String,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.CalculateDigest(System.String,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.DoFinal(Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.DoFinal(Org.BouncyCastle.Crypto.IDigest,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.DoFinal(Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.DoFinal(Org.BouncyCastle.Crypto.IDigest,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.GetAlgorithmName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.GetDigest(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.GetDigest(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.DigestUtilities.GetObjectIdentifier(System.String)">
      <summary>
            Returns a ObjectIdentifier for a given digest mechanism.
            </summary>
      <param name="mechanism">A string representation of the digest meanism.</param>
      <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Security.DotNetUtilities">
      <summary>
            A class containing methods to interface the BouncyCastle world to the .NET Crypto world.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.FromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetDsaKeyPair(System.Security.Cryptography.DSA)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetDsaKeyPair(System.Security.Cryptography.DSAParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetDsaPublicKey(System.Security.Cryptography.DSA)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetDsaPublicKey(System.Security.Cryptography.DSAParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetECDsaKeyPair(System.Security.Cryptography.ECDsa)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetECDsaPublicKey(System.Security.Cryptography.ECDsa)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetECKeyPair(System.String,System.Security.Cryptography.ECParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetECPublicKey(System.String,System.Security.Cryptography.ECParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetKeyPair(System.Security.Cryptography.AsymmetricAlgorithm)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetRsaKeyPair(System.Security.Cryptography.RSA)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetRsaKeyPair(System.Security.Cryptography.RSAParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetRsaPublicKey(System.Security.Cryptography.RSA)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.GetRsaPublicKey(System.Security.Cryptography.RSAParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSA(Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSA(Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure,System.Security.Cryptography.CspParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSA(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSA(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.Security.Cryptography.CspParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSA(Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSA(Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters,System.Security.Cryptography.CspParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSAParameters(Org.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSAParameters(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToRSAParameters(Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToX509Certificate(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
            Create an System.Security.Cryptography.X509Certificate from an X509Certificate Structure.
            </summary>
      <param name="x509Struct"></param>
      <returns>A System.Security.Cryptography.X509Certificate.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Security.DotNetUtilities.ToX509Certificate(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="T:Org.BouncyCastle.Security.EncryptionException"></member>
    <member name="M:Org.BouncyCastle.Security.EncryptionException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.EncryptionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.EncryptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.EncryptionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.EncryptionException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.EncryptionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.EncryptionException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.EncryptionException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.GeneralSecurityException"></member>
    <member name="M:Org.BouncyCastle.Security.GeneralSecurityException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.GeneralSecurityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.GeneralSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.GeneralSecurityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.GeneralSecurityException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.GeneralSecurityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.GeneralSecurityException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.GeneralSecurityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.GeneratorUtilities"></member>
    <member name="M:Org.BouncyCastle.Security.GeneratorUtilities.GetKeyGenerator(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.GeneratorUtilities.GetKeyGenerator(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.GeneratorUtilities.GetKeyPairGenerator(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.GeneratorUtilities.GetKeyPairGenerator(System.String)"></member>
    <member name="T:Org.BouncyCastle.Security.InvalidKeyException"></member>
    <member name="M:Org.BouncyCastle.Security.InvalidKeyException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidKeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.InvalidKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidKeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.InvalidKeyException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidKeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.InvalidKeyException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidKeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.InvalidParameterException"></member>
    <member name="M:Org.BouncyCastle.Security.InvalidParameterException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidParameterException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.InvalidParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidParameterException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.InvalidParameterException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidParameterException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.InvalidParameterException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.InvalidParameterException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.JksStore"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.JksStore</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Security.JksStore.Aliases"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.ContainsAlias(System.String)"></member>
    <member name="P:Org.BouncyCastle.Security.JksStore.Count"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.DeleteEntry(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.GetCertificate(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.GetCertificateAlias(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.GetCertificateChain(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.GetCreationDate(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.GetKey(System.String,System.Char[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.GetKey(System.String,System.ReadOnlySpan{System.Char})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.IsCertificateEntry(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.IsKeyEntry(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.JksStore.Load(System.IO.Stream,System.Char[])">
      <remarks>WARNING: If <paramref name="password" /> is <c>null</c>, no integrity check is performed.</remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.Load(System.IO.Stream,System.ReadOnlySpan{System.Char})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.LoadUnchecked(System.IO.Stream)">
      <summary>Load without any integrity check.</summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.Probe(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.Save(System.IO.Stream,System.Char[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.Save(System.IO.Stream,System.ReadOnlySpan{System.Char})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.SetCertificateEntry(System.String,Org.BouncyCastle.X509.X509Certificate)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.SetKeyEntry(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Char[],Org.BouncyCastle.X509.X509Certificate[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.SetKeyEntry(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.ReadOnlySpan{System.Char},Org.BouncyCastle.X509.X509Certificate[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Security.JksStore.SetKeyEntry(System.String,System.Byte[],Org.BouncyCastle.X509.X509Certificate[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Security.KeyException"></member>
    <member name="M:Org.BouncyCastle.Security.KeyException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.KeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.KeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.KeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.KeyException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.KeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.KeyException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.KeyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.MacUtilities">
      <remarks>
             Utility class for creating HMac object from their names/Oids
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Security.MacUtilities.CalculateMac(System.String,Org.BouncyCastle.Crypto.ICipherParameters,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.MacUtilities.DoFinal(Org.BouncyCastle.Crypto.IMac)"></member>
    <member name="M:Org.BouncyCastle.Security.MacUtilities.DoFinal(Org.BouncyCastle.Crypto.IMac,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.MacUtilities.GetAlgorithmName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.MacUtilities.GetMac(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.MacUtilities.GetMac(System.String)"></member>
    <member name="T:Org.BouncyCastle.Security.ParameterUtilities"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.CreateKeyParameter(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.CreateKeyParameter(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.CreateKeyParameter(System.String,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.CreateKeyParameter(System.String,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.GenerateParameters(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.GenerateParameters(System.String,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.GetCanonicalAlgorithmName(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.GetCipherParameters(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.GetCipherParameters(System.String,Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Asn1.Asn1Object)"></member>
    <member name="M:Org.BouncyCastle.Security.ParameterUtilities.WithRandom(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Security.PasswordException"></member>
    <member name="M:Org.BouncyCastle.Security.PasswordException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.PasswordException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.PasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.PasswordException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.PasswordException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.PasswordException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.PasswordException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.PasswordException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.PbeUtilities">
      <summary></summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.CreateEngine(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.CreateEngine(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.CreateEngine(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateAlgorithmParameters(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[],System.Int32,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateAlgorithmParameters(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateAlgorithmParameters(System.String,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateCipherParameters(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Char[],Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateCipherParameters(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Char[],System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateCipherParameters(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateCipherParameters(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Char[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateCipherParameters(System.String,System.Char[],Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GenerateCipherParameters(System.String,System.Char[],System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GetEncodingName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.GetObjectIdentifier(System.String)">
      <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
      <param name="mechanism">A string representation of the encoding.</param>
      <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.IsOpenSsl(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.IsPbeAlgorithm(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.IsPkcs12(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.IsPkcs5Scheme1(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.PbeUtilities.IsPkcs5Scheme2(System.String)"></member>
    <member name="T:Org.BouncyCastle.Security.PrivateKeyFactory"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.CreateKey(Org.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.CreateKey(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.CreateKey(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.DecryptKey(System.Char[],Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.DecryptKey(System.Char[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.DecryptKey(System.Char[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.EncryptKey(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Char[],System.Byte[],System.Int32,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.Security.PrivateKeyFactory.EncryptKey(System.String,System.Char[],System.Byte[],System.Int32,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="T:Org.BouncyCastle.Security.PublicKeyFactory"></member>
    <member name="M:Org.BouncyCastle.Security.PublicKeyFactory.CreateKey(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)"></member>
    <member name="M:Org.BouncyCastle.Security.PublicKeyFactory.CreateKey(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.PublicKeyFactory.CreateKey(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Security.SecureRandom"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SecureRandom</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.#ctor(Org.BouncyCastle.Crypto.Prng.IRandomGenerator)">
      <summary>Use the specified instance of IRandomGenerator as random source.</summary>
      <param name="generator">The source to generate all random bytes from.</param>
      <remarks>
            This constructor performs no seeding of either the <c>IRandomGenerator</c> or the
            constructed <c>SecureRandom</c>. It is the responsibility of the client to provide
            proper seed material as necessary/appropriate for the given <c>IRandomGenerator</c>
            implementation.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.#ctor(Org.BouncyCastle.Crypto.Prng.IRandomGenerator,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SecureRandom</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.GenerateSeed(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.GenerateSeed(System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Security.SecureRandom.generator"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String)">
      <summary>
            Create and auto-seed an instance based on the given algorithm.
            </summary>
      <param name="algorithm">e.g. "SHA256PRNG"</param>
      <remarks>Equivalent to GetInstance(algorithm, true)</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.GetInstance(System.String,System.Boolean)">
      <summary>
            Create an instance based on the given algorithm, with optional auto-seeding
            </summary>
      <param name="algorithm">e.g. "SHA256PRNG"</param>
      <param name="autoSeed">If true, the instance will be auto-seeded.</param>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.GetNextBytes(Org.BouncyCastle.Security.SecureRandom,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.Next"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.Next(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.Next(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.NextBytes(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.NextDouble"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.NextInt"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.NextLong"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Security.SecureRandom.SetSeed(System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Security.SecurityUtilityException"></member>
    <member name="M:Org.BouncyCastle.Security.SecurityUtilityException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SecurityUtilityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecurityUtilityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SecurityUtilityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecurityUtilityException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SecurityUtilityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SecurityUtilityException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SecurityUtilityException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.SignatureException"></member>
    <member name="M:Org.BouncyCastle.Security.SignatureException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SignatureException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SignatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SignatureException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SignatureException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SignatureException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.SignatureException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.SignatureException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.SignerUtilities">
      <summary>
             Signer Utility class contains methods that can not be specifically grouped into other classes.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Security.SignerUtilities.Algorithms"></member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.GetDefaultX509Parameters(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.GetDefaultX509Parameters(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.GetEncodingName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.GetObjectIdentifier(System.String)">
      <summary>
            Returns an ObjectIdentifier for a given encoding.
            </summary>
      <param name="mechanism">A string representation of the encoding.</param>
      <returns>A DerObjectIdentifier, null if the OID is not available.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.GetSigner(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.GetSigner(System.String)"></member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.InitSigner(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Security.SignerUtilities.InitSigner(System.String,System.Boolean,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="T:Org.BouncyCastle.Security.WrapperUtilities">
      <remarks>
             Utility class for creating IWrapper objects from their names/Oids
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Security.WrapperUtilities.GetAlgorithmName(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.WrapperUtilities.GetWrapper(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Security.WrapperUtilities.GetWrapper(System.String)"></member>
    <member name="T:Org.BouncyCastle.Security.Certificates.CertificateEncodingException"></member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateEncodingException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateEncodingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateEncodingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateEncodingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateEncodingException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateEncodingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateEncodingException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateEncodingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.Certificates.CertificateException"></member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.Certificates.CertificateExpiredException"></member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateExpiredException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateExpiredException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateExpiredException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateExpiredException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateExpiredException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateExpiredException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateExpiredException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException"></member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.Certificates.CertificateParsingException"></member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateParsingException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateParsingException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CertificateParsingException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CertificateParsingException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Security.Certificates.CrlException"></member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CrlException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CrlException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CrlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CrlException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CrlException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CrlException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Security.Certificates.CrlException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Security.Certificates.CrlException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.AbstractTlsClient">
      <summary>Base class for a TLS client.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.AbstractTlsClient</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.AllowUnexpectedServerExtension(System.Int32,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.CheckForUnexpectedServerExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetAllowedClientCertificateTypes"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetAllowedServerCertificateTypes"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetAuthentication"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetCertificateAuthorities"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetCertificateStatusRequest"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetClientExtensions">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetClientSupplementalData">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetDHGroupVerifier"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetEarlyKeyShareGroups"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetExternalPsks"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetMultiCertStatusRequest">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2" /> (or null).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetNamedGroupRoles"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetNewConnectionID">
      <summary>RFC 9146 DTLS connection ID.</summary>
      <returns>The connection ID to use.</returns>
      <remarks>
            The default <see cref="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetClientExtensions" /> implementation calls this to get the connection_id extension
            the client will send. As future communication doesn't include the connection IDs length, this should either
            be fixed-length or include the connection ID's length. (see explanation in RFC 9146 4. "cid:")
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetProtocolNames"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetProtocolVersions"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetPskIdentity">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetSessionToResume"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetSniServerNames"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetSrpConfigVerifier"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetSrpIdentity">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetSupportedGroups(System.Collections.Generic.IList{System.Int32})">
      <summary>The default <see cref="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetClientExtensions" /> implementation calls this to determine which named
            groups to include in the supported_groups extension for the ClientHello.</summary>
      <param name="namedGroupRoles">The <see cref="T:Org.BouncyCastle.Tls.NamedGroupRole">named group roles</see> for which there should
            be at least one supported group. By default this is inferred from the offered cipher suites and signature
            algorithms.</param>
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Int32" />. See <see cref="T:Org.BouncyCastle.Tls.NamedGroup" /> for group constants.
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetSupportedSignatureAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetSupportedSignatureAlgorithmsCert"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.GetTrustedCAIndication"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.Init(Org.BouncyCastle.Tls.TlsClientContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.IsFallback"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsClient.m_cipherSuites"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsClient.m_context"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsClient.m_protocolVersions"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsClient.m_supportedGroups"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsClient.m_supportedSignatureAlgorithms"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsClient.m_supportedSignatureAlgorithmsCert"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.NotifyHandshakeBeginning">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.NotifyNewSessionTicket(Org.BouncyCastle.Tls.NewSessionTicket)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.NotifySelectedCipherSuite(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.NotifySelectedPsk(Org.BouncyCastle.Tls.TlsPsk)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.NotifyServerVersion(Org.BouncyCastle.Tls.ProtocolVersion)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.NotifySessionID(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.NotifySessionToResume(Org.BouncyCastle.Tls.TlsSession)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.ProcessServerExtensions(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.ProcessServerSupplementalData(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SupplementalDataEntry})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsClient.ShouldUseCompatibilityMode"></member>
    <member name="T:Org.BouncyCastle.Tls.AbstractTlsKeyExchange">
      <summary>Base class for supporting a TLS key exchange implementation.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.AbstractTlsKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.GenerateServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.GetClientCertificateTypes"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.Init(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.m_context"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.m_keyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.ProcessClientCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.RequiresCertificateVerify"></member>
    <member name="P:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.SkipClientCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.SkipServerCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchange.SkipServerKeyExchange"></member>
    <member name="T:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory">
      <summary>Base class for supporting a TLS key exchange factory implementation.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateDHanonKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateDheKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateDheKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateDHKeyExchange(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateECDHanonKeyExchangeClient(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateECDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateECDheKeyExchangeClient(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateECDheKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateECDHKeyExchange(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreatePskKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentity,Org.BouncyCastle.Tls.TlsDHGroupVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreatePskKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentityManager,Org.BouncyCastle.Tls.Crypto.TlsDHConfig,Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateRsaKeyExchange(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateSrpKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsSrpIdentity,Org.BouncyCastle.Tls.TlsSrpConfigVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory.CreateSrpKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.TlsSrpLoginParameters)"></member>
    <member name="T:Org.BouncyCastle.Tls.AbstractTlsPeer">
      <summary>Base class for a TLS client or server.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.AbstractTlsPeer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.AllowLegacyResumption"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.Cancel">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.AbstractTlsPeer.Crypto"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetHandshakeResendTimeMillis"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetHandshakeTimeoutMillis"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetHeartbeat"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetHeartbeatPolicy"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetKeyExchangeFactory">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetMaxCertificateChainLength"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetMaxHandshakeMessageSize"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetProtocolVersions"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetPskKeyExchangeModes"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetSupportedCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.GetSupportedVersions">
      <summary>Get the <see cref="T:Org.BouncyCastle.Tls.ProtocolVersion" /> values that are supported by this peer.</summary>
      <returns>an array of supported <see cref="T:Org.BouncyCastle.Tls.ProtocolVersion" /> values.</returns>
      <remarks>
            WARNING: Mixing DTLS and TLS versions in the returned array is currently NOT supported. Use a separate
            (sub-)class for each case.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Tls.AbstractTlsPeer.IgnoreCorruptDtlsRecords"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.NotifyAlertRaised(System.Int16,System.Int16,System.String,System.Exception)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.NotifyAlertReceived(System.Int16,System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.NotifyCloseHandle(Org.BouncyCastle.Tls.TlsCloseable)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.NotifyConnectionClosed"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.NotifyHandshakeBeginning">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.NotifyHandshakeComplete">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.NotifySecureRenegotiation(System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.RequiresCloseNotify"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.RequiresExtendedMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.ShouldCheckSigAlgOfPeerCerts"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.ShouldUseExtendedMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.ShouldUseExtendedPadding"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsPeer.ShouldUseGmtUnixTime"></member>
    <member name="T:Org.BouncyCastle.Tls.AbstractTlsServer">
      <summary>Base class for a TLS server.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.AbstractTlsServer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.AllowCertificateStatus"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.AllowEncryptThenMac"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.AllowMultiCertStatus"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.AllowTruncatedHmac"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.AllowTrustedCAIndication"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetAllowedClientCertificateTypes"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetCertificateRequest"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetCertificateStatus"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetDetailMessageNoCipherSuite"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetDHConfig"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetECDHConfig"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetExternalPsk(System.Collections.Generic.IList{Org.BouncyCastle.Tls.PskIdentity})"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetMaximumNegotiableCurveBits"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetMaximumNegotiableFiniteFieldBits"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetNewConnectionID">
      <summary>RFC 9146 DTLS connection ID.</summary>
      <returns>The connection ID to use.</returns>
      <remarks>
            This method will be called if a connection_id extension was sent by the client.
            If the return value is non-null, the server will send this connection ID to the client to use in future packets.
            As future communication doesn't include the connection IDs length, this should either be fixed-length
            or include the connection ID's length. (see explanation in RFC 9146 4. "cid:")
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetNewSessionID"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetNewSessionTicket"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetProtocolNames"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetProtocolVersions"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetPskIdentityManager"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetSelectedCipherSuite"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetServerExtensions"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetServerExtensionsForConnection(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetServerSupplementalData"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetServerVersion"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetSessionToResume(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetSrpLoginParameters"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.GetSupportedGroups"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.Init(Org.BouncyCastle.Tls.TlsServerContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.IsSelectableCipherSuite(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int16})"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_certificateStatusRequest"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_cipherSuites"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_clientExtensions"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_clientProtocolNames"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_clientSentECPointFormats"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_context"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_encryptThenMACOffered"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_maxFragmentLengthOffered"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_offeredCipherSuites"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_protocolVersions"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_selectedCipherSuite"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_selectedProtocolName"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_serverExtensions"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_statusRequestV2"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_truncatedHMacOffered"></member>
    <member name="F:Org.BouncyCastle.Tls.AbstractTlsServer.m_trustedCAKeys"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.NotifyClientCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.NotifyClientVersion(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.NotifyFallback(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.NotifyHandshakeBeginning"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.NotifyOfferedCipherSuites(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.NotifySession(Org.BouncyCastle.Tls.TlsSession)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.PreferLocalCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.PreferLocalClientCertificateTypes"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.ProcessClientExtensions(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.ProcessClientSupplementalData(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SupplementalDataEntry})"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.SelectCipherSuite(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.SelectDH(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.SelectDHDefault(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.SelectECDH(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.SelectECDHDefault(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.SelectProtocolName"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.SelectProtocolName(System.Collections.Generic.IList{Org.BouncyCastle.Tls.ProtocolName},System.Collections.Generic.IList{Org.BouncyCastle.Tls.ProtocolName})"></member>
    <member name="M:Org.BouncyCastle.Tls.AbstractTlsServer.ShouldSelectProtocolNameEarly"></member>
    <member name="T:Org.BouncyCastle.Tls.AlertDescription">
      <summary>RFC 5246 7.2.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AlertDescription.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.AlertDescription</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.access_denied">
      <summary>A valid certificate was received, but when access control was applied, the sender decided not to
            proceed with negotiation.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.bad_certificate">
      <summary>A certificate was corrupt, contained signatures that did not verify correctly, etc.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.bad_certificate_hash_value">
      <summary>This alert is sent by servers when a certificate hash does not match a client provided
            certificate_hash.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.bad_certificate_status_response">
      <summary>This alert is sent by clients that receive an invalid certificate status response (see Section 3.6
            ).</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.bad_record_mac">
      <summary>This alert is returned if a record is received with an incorrect MAC.</summary>
      <remarks>
            This alert also MUST be returned if an alert is sent because a TLSCiphertext decrypted in an invalid way:
            either it wasn't an even multiple of the block length, or its padding values, when checked, weren't
            correct. This message is always fatal and should never be observed in communication between proper
            implementations (except when messages were corrupted in the network).
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.certificate_expired">
      <summary>A certificate has expired or is not currently valid.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.certificate_required">
      <summary>Sent by servers when a client certificate is desired but none was provided by the client.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.certificate_revoked">
      <summary>A certificate was revoked by its signer.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.certificate_unknown">
      <summary>Some other (unspecified) issue arose in processing the certificate, rendering it unacceptable.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.certificate_unobtainable">
      <summary>This alert is sent by servers who are unable to retrieve a certificate chain from the URL supplied
            by the client(see Section 3.3).</summary>
      <remarks>
            This message MAY be fatal - for example if client authentication is required by the server for the
            handshake to continue and the server is unable to retrieve the certificate chain, it may send a fatal
            alert.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.close_notify">
      <summary>This message notifies the recipient that the sender will not send any more messages on this
            connection.</summary>
      <remarks>
            Note that as of TLS 1.1, failure to properly close a connection no longer requires that a session not be
            resumed. This is a change from TLS 1.0 ("The session becomes unresumable if any connection is terminated
            without proper close_notify messages with level equal to warning.") to conform with widespread
            implementation practice.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.decode_error">
      <summary>A message could not be decoded because some field was out of the specified range or the length of
            the message was incorrect.</summary>
      <remarks>
            This message is always fatal and should never be observed in communication between proper
            implementations (except when messages were corrupted in the network).
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.decompression_failure">
      <summary>The decompression function received improper input (e.g., data that would expand to excessive
            length).</summary>
      <remarks>
            This message is always fatal and should never be observed in communication between proper implementations.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.decrypt_error">
      <summary>A handshake cryptographic operation failed, including being unable to correctly verify a signature
            or validate a Finished message.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.decryption_failed">
      <remarks>
            This alert was used in some earlier versions of TLS, and may have permitted certain attacks against the CBC
            mode [CBCATT]. It MUST NOT be sent by compliant implementations.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.export_restriction">
      <remarks>
            This alert was used in some earlier versions of TLS. It MUST NOT be sent by compliant implementations.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AlertDescription.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.AlertDescription.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.handshake_failure">
      <summary>Reception of a handshake_failure alert message indicates that the sender was unable to negotiate
            an acceptable set of security parameters given the options available.</summary>
      <remarks>
            This is a fatal error.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.illegal_parameter">
      <summary>A field in the handshake was out of range or inconsistent with other fields.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.inappropriate_fallback">
      <summary>If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the highest protocol version
            supported by the server is higher than the version indicated in ClientHello.client_version, the server MUST
            respond with a fatal inappropriate_fallback alert[..].</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.insufficient_security">
      <summary>Returned instead of handshake_failure when a negotiation has failed specifically because the
            server requires ciphers more secure than those supported by the client.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.internal_error">
      <summary>An internal error unrelated to the peer or the correctness of the protocol (such as a memory
            allocation failure) makes it impossible to continue.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.missing_extension">
      <summary>Sent by endpoints that receive a handshake message not containing an extension that is mandatory
            to send for the offered TLS version or other negotiated parameters.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.no_application_protocol">
      <summary>In the event that the server supports no protocols that the client advertises, then the server
            SHALL respond with a fatal "no_application_protocol" alert.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.no_certificate">
      <remarks>
            This alert was used in SSLv3 but not any version of TLS. It MUST NOT be sent by compliant implementations.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.no_renegotiation">
      <summary>Sent by the client in response to a hello request or by the server in response to a client hello
            after initial handshaking.</summary>
      <remarks>
            Either of these would normally lead to renegotiation; when that is not appropriate, the recipient should
            respond with this alert. At that point, the original requester can decide whether to proceed with the
            connection. One case where this would be appropriate is where a server has spawned a process to satisfy a
            request; the process might receive security parameters (key length, authentication, etc.) at startup, and
            it might be difficult to communicate changes to these parameters after that point. This message is always a
            warning.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.protocol_version">
      <summary>The protocol version the client has attempted to negotiate is recognized but not supported.
            </summary>
      <remarks>
            (For example, old protocol versions might be avoided for security reasons.) This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.record_overflow">
      <summary>A TLSCiphertext record was received that had a length more than 2^14+2048 bytes, or a record
            decrypted to a TLSCompressed record with more than 2^14+1024 bytes.</summary>
      <remarks>
            This message is always fatal and should never be observed in communication between proper implementations
            (except when messages were corrupted in the network).
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.unexpected_message">
      <summary>An inappropriate message was received.</summary>
      <remarks>
            This alert is always fatal and should never be observed in communication between proper implementations.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.unknown_ca">
      <summary>A valid certificate chain or partial chain was received, but the certificate was not accepted
            because the CA certificate could not be located or couldn't be matched with a known, trusted CA.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.unknown_psk_identity">
      <summary>If the server does not recognize the PSK identity, it MAY respond with an "unknown_psk_identity"
            alert message.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.unrecognized_name">
      <summary>This alert is sent by servers that receive a server_name extension request, but do not recognize
            the server name.</summary>
      <remarks>
            This message MAY be fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.unsupported_certificate">
      <summary>A certificate was of an unsupported type.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.unsupported_extension">
      <summary>Sent by clients that receive an extended server hello containing an extension that they did not
            put in the corresponding client hello.</summary>
      <remarks>
            This message is always fatal.
            </remarks>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertDescription.user_canceled">
      <summary>This handshake is being canceled for some reason unrelated to a protocol failure.</summary>
      <remarks>
            If the user cancels an operation after the handshake is complete, just closing the connection by sending a
            close_notify is more appropriate. This alert should be followed by a close_notify. This message is
            generally a warning.
            </remarks>
    </member>
    <member name="T:Org.BouncyCastle.Tls.AlertLevel">
      <summary>RFC 5246 7.2</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.AlertLevel.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.AlertLevel</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.AlertLevel.fatal"></member>
    <member name="M:Org.BouncyCastle.Tls.AlertLevel.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.AlertLevel.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.AlertLevel.warning"></member>
    <member name="T:Org.BouncyCastle.Tls.BasicTlsPskExternal"></member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskExternal.#ctor(System.Byte[],Org.BouncyCastle.Tls.Crypto.TlsSecret)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.BasicTlsPskExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskExternal.#ctor(System.Byte[],Org.BouncyCastle.Tls.Crypto.TlsSecret,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.BasicTlsPskExternal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.BasicTlsPskExternal.Identity"></member>
    <member name="P:Org.BouncyCastle.Tls.BasicTlsPskExternal.Key"></member>
    <member name="F:Org.BouncyCastle.Tls.BasicTlsPskExternal.m_identity"></member>
    <member name="F:Org.BouncyCastle.Tls.BasicTlsPskExternal.m_key"></member>
    <member name="F:Org.BouncyCastle.Tls.BasicTlsPskExternal.m_prfAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Tls.BasicTlsPskExternal.PrfAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.BasicTlsPskIdentity">
      <summary>A basic PSK Identity holder.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskIdentity.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.BasicTlsPskIdentity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskIdentity.#ctor(System.String,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.BasicTlsPskIdentity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskIdentity.GetPsk"></member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskIdentity.GetPskIdentity"></member>
    <member name="F:Org.BouncyCastle.Tls.BasicTlsPskIdentity.m_identity"></member>
    <member name="F:Org.BouncyCastle.Tls.BasicTlsPskIdentity.m_psk"></member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskIdentity.NotifyIdentityHint(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsPskIdentity.SkipIdentityHint"></member>
    <member name="T:Org.BouncyCastle.Tls.BasicTlsSrpIdentity">
      <summary>A basic SRP Identity holder.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsSrpIdentity.#ctor(System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.BasicTlsSrpIdentity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsSrpIdentity.#ctor(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.BasicTlsSrpIdentity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsSrpIdentity.GetSrpIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.BasicTlsSrpIdentity.GetSrpPassword"></member>
    <member name="F:Org.BouncyCastle.Tls.BasicTlsSrpIdentity.m_identity"></member>
    <member name="F:Org.BouncyCastle.Tls.BasicTlsSrpIdentity.m_password"></member>
    <member name="T:Org.BouncyCastle.Tls.ByteQueue">
      <summary>A queue for bytes. This file could be more optimized.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ByteQueue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ByteQueue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ByteQueue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.AddData(System.Byte[],System.Int32,System.Int32)">
      <summary>Add some data to our buffer.</summary>
      <param name="buf">A byte-array to read data from.</param>
      <param name="off">How many bytes to skip at the beginning of the array.</param>
      <param name="len">How many bytes to read from the array.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.AddData(System.ReadOnlySpan{System.Byte})"></member>
    <member name="P:Org.BouncyCastle.Tls.ByteQueue.Available">
      <returns>The number of bytes which are available in this buffer.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.CopyTo(System.IO.Stream,System.Int32)">
      <summary>Copy some bytes from the beginning of the data to the provided <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">The <see cref="T:System.IO.Stream" /> to copy the bytes to.</param>
      <param name="length">How many bytes to copy.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Read data from the buffer.</summary>
      <param name="buf">The buffer where the read data will be copied to.</param>
      <param name="offset">How many bytes to skip at the beginning of buf.</param>
      <param name="len">How many bytes to read at all.</param>
      <param name="skip">How many bytes from our data to skip.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.Read(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.ReadInt32"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.ReadUint16(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.ReadUint8(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.RemoveData(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Remove data from the buffer.</summary>
      <param name="buf">The buffer where the removed data will be copied to.</param>
      <param name="off">How many bytes to skip at the beginning of buf.</param>
      <param name="len">How many bytes to read at all.</param>
      <param name="skip">How many bytes from our data to skip.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.RemoveData(System.Int32)">
      <summary>Remove some bytes from our data from the beginning.</summary>
      <param name="i">How many bytes to remove.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.RemoveData(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.RemoveData(System.Span{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueue.Shrink"></member>
    <member name="T:Org.BouncyCastle.Tls.ByteQueueInputStream"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ByteQueueInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.AddBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.AddBytes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Tls.ByteQueueInputStream.Available"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.Peek(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.ReadByte"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueInputStream.Skip(System.Int64)"></member>
    <member name="T:Org.BouncyCastle.Tls.ByteQueueOutputStream">
      <summary>OutputStream based on a ByteQueue implementation.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueOutputStream.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ByteQueueOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.ByteQueueOutputStream.Buffer"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueOutputStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueOutputStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.ByteQueueOutputStream.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Tls.CachedInformationType"></member>
    <member name="M:Org.BouncyCastle.Tls.CachedInformationType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CachedInformationType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.CachedInformationType.cert"></member>
    <member name="F:Org.BouncyCastle.Tls.CachedInformationType.cert_req"></member>
    <member name="M:Org.BouncyCastle.Tls.CachedInformationType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.CachedInformationType.GetText(System.Int16)"></member>
    <member name="T:Org.BouncyCastle.Tls.CertChainType">
      <summary>Implementation of the RFC 3546 3.3. CertChainType.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertChainType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertChainType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertChainType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.CertChainType.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.CertChainType.individual_certs"></member>
    <member name="M:Org.BouncyCastle.Tls.CertChainType.IsValid(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.CertChainType.pkipath"></member>
    <member name="T:Org.BouncyCastle.Tls.Certificate">
      <summary>Parsing and encoding of a <i>Certificate</i> struct from RFC 4346.</summary>
      <remarks>
        <pre>
            opaque ASN.1Cert&lt;2^24-1&gt;;
            struct {
              ASN.1Cert certificate_list&lt;0..2^24-1&gt;;
            } Certificate;
            </pre>
      </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCertificate[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Certificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.#ctor(System.Byte[],Org.BouncyCastle.Tls.CertificateEntry[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Certificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.#ctor(System.Int16,System.Byte[],Org.BouncyCastle.Tls.CertificateEntry[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Certificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Certificate.CertificateType"></member>
    <member name="F:Org.BouncyCastle.Tls.Certificate.EmptyChain"></member>
    <member name="F:Org.BouncyCastle.Tls.Certificate.EmptyChainTls13"></member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.Encode(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream,System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.Certificate" /> to a <see cref="T:System.IO.Stream" />, and optionally calculate the
            "end point hash" (per RFC 5929's tls-server-end-point binding).</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="messageOutput">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <param name="endPointHashOutput">the <see cref="T:System.IO.Stream" /> to write the "end point hash" to (or null).
            </param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.GetCertificateAt(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.GetCertificateEntryAt(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.GetCertificateEntryList"></member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.GetCertificateList">
      <returns>an array of <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsCertificate" /> representing a certificate chain.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.GetCertificateRequestContext"></member>
    <member name="P:Org.BouncyCastle.Tls.Certificate.IsEmpty">
      <returns>
        <c>true</c> if this certificate chain contains no certificates, or <c>false</c> otherwise.
            </returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Certificate.Length"></member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.Parse(Org.BouncyCastle.Tls.Certificate.ParseOptions,Org.BouncyCastle.Tls.TlsContext,System.IO.Stream,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.Certificate" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="options">the <see cref="T:Org.BouncyCastle.Tls.Certificate.ParseOptions" /> to apply during parsing.</param>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="messageInput">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <param name="endPointHashOutput">the <see cref="T:System.IO.Stream" /> to write the "end point hash" to (or null).
            </param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.Certificate" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Certificate.ParseOptions"></member>
    <member name="M:Org.BouncyCastle.Tls.Certificate.ParseOptions.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Certificate.ParseOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Certificate.ParseOptions.CertificateType"></member>
    <member name="P:Org.BouncyCastle.Tls.Certificate.ParseOptions.MaxChainLength"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateCompressionAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm.brotli"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm.GetName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm.GetText(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm.IsRecognized(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm.zlib"></member>
    <member name="F:Org.BouncyCastle.Tls.CertificateCompressionAlgorithm.zstd"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateEntry"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateEntry.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCertificate,System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateEntry.Certificate"></member>
    <member name="P:Org.BouncyCastle.Tls.CertificateEntry.Extensions"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateRequest">
      <summary>Parsing and encoding of a <i>CertificateRequest</i> struct from RFC 4346.</summary>
      <remarks>
        <pre>
            struct {
              ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
              DistinguishedName certificate_authorities&lt;3..2^16-1&gt;;
            } CertificateRequest;
            </pre>
            Updated for RFC 5246:
            <pre>
            struct {
              ClientCertificateType certificate_types &lt;1..2 ^ 8 - 1&gt;;
              SignatureAndHashAlgorithm supported_signature_algorithms &lt;2 ^ 16 - 1&gt;;
              DistinguishedName certificate_authorities &lt;0..2 ^ 16 - 1&gt;;
            } CertificateRequest;
            </pre>
            Revised for RFC 8446:
            <pre>
            struct {
              opaque certificate_request_context &lt;0..2 ^ 8 - 1&gt;;
              Extension extensions &lt;2..2 ^ 16 - 1&gt;;
            } CertificateRequest;
            </pre></remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateRequest.#ctor(System.Byte[],System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.X509Name})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateRequest</parameter>
          </include>
        </markup>
      </summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateRequest.#ctor(System.Int16[],System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.X509Name})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateRequest</parameter>
          </include>
        </markup>
      </summary>
      <param name="certificateTypes">see <see cref="T:Org.BouncyCastle.Tls.ClientCertificateType" /> for valid constants.</param>
      <param name="supportedSignatureAlgorithms"></param>
      <param name="certificateAuthorities">an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Asn1.X509.X509Name" />.</param>
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateRequest.CertificateAuthorities">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Asn1.X509.X509Name" />.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateRequest.CertificateTypes">
      <returns>an array of certificate types</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateRequest.Encode(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.CertificateRequest" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateRequest.GetCertificateRequestContext"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateRequest.HasCertificateRequestContext(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateRequest.Parse(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.CertificateRequest" /> from a <see cref="T:System.IO.Stream" /></summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.CertificateRequest" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateRequest.SupportedSignatureAlgorithms">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm" /> (or null before TLS 1.2).
            </returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateRequest.SupportedSignatureAlgorithmsCert">
      <returns>an optional <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm" />. May be non-null from
            TLS 1.3 onwards.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.CertificateStatus"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatus.#ctor(System.Int16,System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatus.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.CertificateStatus" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatus.OcspResponse"></member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatus.OcspResponseList">
      <summary>an <see cref="T:System.Collections.Generic.IList`1" /> of (possibly null) <see cref="T:Org.BouncyCastle.Asn1.Ocsp.OcspResponse" />.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatus.Parse(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.CertificateStatus" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.CertificateStatus" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatus.Response"></member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatus.StatusType"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateStatusRequest">
      <summary>Implementation of the RFC 3546 3.6. CertificateStatusRequest.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatusRequest.#ctor(System.Int16,System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateStatusRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatusRequest.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.CertificateStatusRequest" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatusRequest.OcspStatusRequest"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatusRequest.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.CertificateStatusRequest" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.CertificateStatusRequest" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatusRequest.Request"></member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatusRequest.StatusType"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2">
      <summary>Implementation of the RFC 6961 2.2. CertificateStatusRequestItemV2.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2.#ctor(System.Int16,System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateStatusRequestItemV2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2.OcspStatusRequest"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2.Request"></member>
    <member name="P:Org.BouncyCastle.Tls.CertificateStatusRequestItemV2.StatusType"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateStatusType"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateStatusType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateStatusType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.CertificateStatusType.ocsp"></member>
    <member name="F:Org.BouncyCastle.Tls.CertificateStatusType.ocsp_multi"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateType">
      <summary>RFC 6091</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateType.IsValid(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.CertificateType.OpenPGP"></member>
    <member name="F:Org.BouncyCastle.Tls.CertificateType.RawPublicKey"></member>
    <member name="F:Org.BouncyCastle.Tls.CertificateType.X509"></member>
    <member name="T:Org.BouncyCastle.Tls.CertificateUrl">
      <summary>RFC 3546 3.3</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateUrl.#ctor(System.Int16,System.Collections.Generic.IList{Org.BouncyCastle.Tls.UrlAndHash})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateUrl</parameter>
          </include>
        </markup>
      </summary>
      <param name="type">see <see cref="T:Org.BouncyCastle.Tls.CertChainType" /> for valid constants.</param>
      <param name="urlAndHashList">an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.UrlAndHash" />.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateUrl.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.CertificateUrl" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateUrl.Parse(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.CertificateUrl" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.CertificateUrl" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateUrl.Type">
      <returns>
        <see cref="T:Org.BouncyCastle.Tls.CertChainType" />
      </returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateUrl.UrlAndHashList">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.UrlAndHash" />.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.CertificateVerify"></member>
    <member name="M:Org.BouncyCastle.Tls.CertificateVerify.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CertificateVerify</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateVerify.Algorithm">
      <returns>a <see cref="T:Org.BouncyCastle.Tls.SignatureScheme" /> value.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateVerify.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.CertificateVerify" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.CertificateVerify.Parse(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.CertificateVerify" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.CertificateVerify" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.CertificateVerify.Signature"></member>
    <member name="T:Org.BouncyCastle.Tls.ChangeCipherSpec"></member>
    <member name="M:Org.BouncyCastle.Tls.ChangeCipherSpec.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ChangeCipherSpec</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ChangeCipherSpec.change_cipher_spec"></member>
    <member name="T:Org.BouncyCastle.Tls.ChannelBinding">
      <summary>RFC 5056</summary>
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g.serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ChannelBinding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ChannelBinding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ChannelBinding.tls_exporter"></member>
    <member name="F:Org.BouncyCastle.Tls.ChannelBinding.tls_server_end_point"></member>
    <member name="F:Org.BouncyCastle.Tls.ChannelBinding.tls_unique"></member>
    <member name="F:Org.BouncyCastle.Tls.ChannelBinding.tls_unique_for_telnet"></member>
    <member name="T:Org.BouncyCastle.Tls.CipherSuite">
      <summary>RFC 2246 A.5</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CipherSuite.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CipherSuite</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CipherSuite.IsScsv(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_AES_128_CCM_8_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_AES_128_CCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_EXPORT_WITH_RC4_40_MD5"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_AES_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_DES_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_RC4_128_MD5"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_anon_WITH_SEED_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_DES_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_DSS_WITH_SEED_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_DES_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DH_RSA_WITH_SEED_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_DES_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_DSS_WITH_SEED_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_128_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_256_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_PSK_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_DES_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_DHE_RSA_WITH_SEED_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_anon_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_anon_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_anon_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_anon_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_ECDSA_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDH_RSA_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_PSK_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_ECDHE_RSA_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_FALLBACK_SCSV"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_GOSTR341112_256_WITH_28147_CNT_IMIT"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_NULL_WITH_NULL_NULL"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_DHE_WITH_AES_128_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_DHE_WITH_AES_256_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_128_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_128_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_256_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_256_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_NULL_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_NULL_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_PSK_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_EXPORT_WITH_DES40_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_EXPORT_WITH_RC4_40_MD5"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_PSK_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_128_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_128_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_256_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_256_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_ARIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_ARIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_ARIA_256_CBC_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_ARIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_DES_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_IDEA_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_NULL_MD5"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_NULL_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_NULL_SHA256"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_RC4_128_MD5"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_RC4_128_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_RSA_WITH_SEED_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SM4_CCM_SM3"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SM4_GCM_SM3"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_WITH_AES_128_CBC_SHA"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherSuite.TLS_SRP_SHA_WITH_AES_256_CBC_SHA"></member>
    <member name="T:Org.BouncyCastle.Tls.CipherType">
      <summary>RFC 2246</summary>
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CipherType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CipherType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.CipherType.aead"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherType.block"></member>
    <member name="F:Org.BouncyCastle.Tls.CipherType.stream"></member>
    <member name="T:Org.BouncyCastle.Tls.ClientAuthenticationType"></member>
    <member name="M:Org.BouncyCastle.Tls.ClientAuthenticationType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ClientAuthenticationType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ClientAuthenticationType.anonymous"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientAuthenticationType.certificate_based"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientAuthenticationType.psk"></member>
    <member name="T:Org.BouncyCastle.Tls.ClientCertificateType"></member>
    <member name="M:Org.BouncyCastle.Tls.ClientCertificateType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ClientCertificateType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.dss_ephemeral_dh_RESERVED"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.dss_fixed_dh"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.dss_sign"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.ecdsa_fixed_ecdh"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.ecdsa_sign"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.fortezza_dms_RESERVED"></member>
    <member name="M:Org.BouncyCastle.Tls.ClientCertificateType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.ClientCertificateType.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.gost_sign256"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.gost_sign512"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.rsa_ephemeral_dh_RESERVED"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.rsa_fixed_dh"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.rsa_fixed_ecdh"></member>
    <member name="F:Org.BouncyCastle.Tls.ClientCertificateType.rsa_sign"></member>
    <member name="T:Org.BouncyCastle.Tls.ClientHello"></member>
    <member name="M:Org.BouncyCastle.Tls.ClientHello.#ctor(Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Byte[],System.Byte[],System.Int32[],System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ClientHello</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.ClientHello.BindersSize"></member>
    <member name="P:Org.BouncyCastle.Tls.ClientHello.CipherSuites"></member>
    <member name="P:Org.BouncyCastle.Tls.ClientHello.Cookie"></member>
    <member name="M:Org.BouncyCastle.Tls.ClientHello.Encode(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.ClientHello" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ClientHello.Extensions"></member>
    <member name="M:Org.BouncyCastle.Tls.ClientHello.Parse(System.IO.MemoryStream,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.ClientHello" /> from a <see cref="T:System.IO.MemoryStream" />.</summary>
      <param name="messageInput">the <see cref="T:System.IO.MemoryStream" /> to parse from.</param>
      <param name="dtlsOutput">for DTLS this should be non-null; the input is copied to this
            <see cref="T:System.IO.Stream" />, minus the cookie field.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.ClientHello" /> object.</returns>
      <exception cref="T:Org.BouncyCastle.Tls.TlsFatalAlert" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ClientHello.Random"></member>
    <member name="P:Org.BouncyCastle.Tls.ClientHello.SessionID"></member>
    <member name="P:Org.BouncyCastle.Tls.ClientHello.Version"></member>
    <member name="T:Org.BouncyCastle.Tls.CombinedHash">
      <summary>A combined hash, which implements md5(m) || sha1(m).</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CombinedHash.#ctor(Org.BouncyCastle.Tls.CombinedHash)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CombinedHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CombinedHash.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CombinedHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CombinedHash.CalculateHash"></member>
    <member name="M:Org.BouncyCastle.Tls.CombinedHash.CloneHash"></member>
    <member name="F:Org.BouncyCastle.Tls.CombinedHash.m_context"></member>
    <member name="F:Org.BouncyCastle.Tls.CombinedHash.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.CombinedHash.m_md5"></member>
    <member name="F:Org.BouncyCastle.Tls.CombinedHash.m_sha1"></member>
    <member name="M:Org.BouncyCastle.Tls.CombinedHash.Reset"></member>
    <member name="M:Org.BouncyCastle.Tls.CombinedHash.Update(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.CombinedHash.Update(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.CompressionMethod">
      <summary>RFC 2246 6.1</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.CompressionMethod.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.CompressionMethod</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.CompressionMethod.cls_null"></member>
    <member name="F:Org.BouncyCastle.Tls.CompressionMethod.DEFLATE"></member>
    <member name="T:Org.BouncyCastle.Tls.ConnectionEnd">
      <summary>RFC 2246</summary>
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values(e.g.serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ConnectionEnd.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ConnectionEnd</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ConnectionEnd.client"></member>
    <member name="F:Org.BouncyCastle.Tls.ConnectionEnd.server"></member>
    <member name="T:Org.BouncyCastle.Tls.ContentType">
      <summary>RFC 2246 6.2.1</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ContentType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ContentType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ContentType.alert"></member>
    <member name="F:Org.BouncyCastle.Tls.ContentType.application_data"></member>
    <member name="F:Org.BouncyCastle.Tls.ContentType.change_cipher_spec"></member>
    <member name="M:Org.BouncyCastle.Tls.ContentType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.ContentType.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.ContentType.handshake"></member>
    <member name="F:Org.BouncyCastle.Tls.ContentType.heartbeat"></member>
    <member name="F:Org.BouncyCastle.Tls.ContentType.tls12_cid"></member>
    <member name="T:Org.BouncyCastle.Tls.DatagramReceiver"></member>
    <member name="M:Org.BouncyCastle.Tls.DatagramReceiver.GetReceiveLimit">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DatagramReceiver.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DatagramReceiver.Receive(System.Span{System.Byte},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.DatagramSender"></member>
    <member name="M:Org.BouncyCastle.Tls.DatagramSender.GetSendLimit">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DatagramSender.Send(System.Byte[],System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DatagramSender.Send(System.ReadOnlySpan{System.Byte})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.DatagramTransport">
      <summary>Base interface for an object sending and receiving DTLS data.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.DefaultTlsClient"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsClient.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DefaultTlsClient</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsClient.GetSupportedCipherSuites"></member>
    <member name="T:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner">
      <summary>Container class for generating signatures that carries the signature type, parameters, public key
            certificate and public key's associated signer object.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Tls.Crypto.TlsSigner,Org.BouncyCastle.Tls.Certificate,Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.Certificate"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.GenerateRawSignature(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.GetEffectiveAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.GetStreamSigner"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.m_certificate"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.m_cryptoParams"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.m_signatureAndHashAlgorithm"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.m_signer"></member>
    <member name="P:Org.BouncyCastle.Tls.DefaultTlsCredentialedSigner.SignatureAndHashAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.#ctor">
      <summary>Accept named groups and various standard DH groups with 'P' at least
            <see cref="F:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.DefaultMinimumPrimeBits" /> bits.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Tls.Crypto.DHGroup},System.Int32)">
      <summary>Accept named groups and a custom set of group parameters, subject to a minimum bitlength for 'P'.
            </summary>
      <param name="groups">a <see cref="T:System.Collections.Generic.IList`1">list</see> of acceptable <see cref="T:Org.BouncyCastle.Tls.Crypto.DHGroup" />s.</param>
      <param name="minimumPrimeBits">the minimum bitlength of 'P'.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.#ctor(System.Int32)">
      <summary>Accept named groups and various standard DH groups with 'P' at least the specified number of bits.
            </summary>
      <param name="minimumPrimeBits">the minimum bitlength of 'P'.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.Accept(Org.BouncyCastle.Tls.Crypto.DHGroup)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.AreGroupsEqual(Org.BouncyCastle.Tls.Crypto.DHGroup,Org.BouncyCastle.Tls.Crypto.DHGroup)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.AreParametersEqual(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.CheckGroup(Org.BouncyCastle.Tls.Crypto.DHGroup)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.CheckMinimumPrimeBits(Org.BouncyCastle.Tls.Crypto.DHGroup)"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.DefaultMinimumPrimeBits"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.m_groups"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.m_minimumPrimeBits"></member>
    <member name="P:Org.BouncyCastle.Tls.DefaultTlsDHGroupVerifier.MinimumPrimeBits"></member>
    <member name="T:Org.BouncyCastle.Tls.DefaultTlsHeartbeat"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsHeartbeat.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DefaultTlsHeartbeat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsHeartbeat.GeneratePayload"></member>
    <member name="P:Org.BouncyCastle.Tls.DefaultTlsHeartbeat.IdleMillis"></member>
    <member name="P:Org.BouncyCastle.Tls.DefaultTlsHeartbeat.TimeoutMillis"></member>
    <member name="T:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateDHanonKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateDheKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateDheKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateDHKeyExchange(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateECDHanonKeyExchangeClient(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateECDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateECDheKeyExchangeClient(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateECDheKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateECDHKeyExchange(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreatePskKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentity,Org.BouncyCastle.Tls.TlsDHGroupVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreatePskKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentityManager,Org.BouncyCastle.Tls.Crypto.TlsDHConfig,Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateRsaKeyExchange(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateSrpKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsSrpIdentity,Org.BouncyCastle.Tls.TlsSrpConfigVerifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsKeyExchangeFactory.CreateSrpKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.TlsSrpLoginParameters)"></member>
    <member name="T:Org.BouncyCastle.Tls.DefaultTlsServer"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsServer.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DefaultTlsServer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsServer.GetCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsServer.GetDsaSignerCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsServer.GetECDsaSignerCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsServer.GetRsaEncryptionCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsServer.GetRsaSignerCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsServer.GetSupportedCipherSuites"></member>
    <member name="T:Org.BouncyCastle.Tls.DefaultTlsSrpConfigVerifier"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsSrpConfigVerifier.#ctor">
      <summary>Accept only the group parameters specified in RFC 5054 Appendix A.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsSrpConfigVerifier.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Tls.Crypto.Srp6Group})">
      <summary>Specify a custom set of acceptable group parameters.</summary>
      <param name="groups">an <see cref="T:System.Collections.Generic.IList`1" /> of acceptable <see cref="T:Org.BouncyCastle.Tls.Crypto.Srp6Group" />.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsSrpConfigVerifier.Accept(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsSrpConfigVerifier.AreGroupsEqual(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig,Org.BouncyCastle.Tls.Crypto.Srp6Group)"></member>
    <member name="M:Org.BouncyCastle.Tls.DefaultTlsSrpConfigVerifier.AreParametersEqual(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Tls.DefaultTlsSrpConfigVerifier.m_groups"></member>
    <member name="T:Org.BouncyCastle.Tls.DigitallySigned"></member>
    <member name="M:Org.BouncyCastle.Tls.DigitallySigned.#ctor(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DigitallySigned</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.DigitallySigned.Algorithm">
      <returns>a <see cref="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm" /> (or null before TLS 1.2).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DigitallySigned.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.DigitallySigned" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DigitallySigned.Parse(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.DigitallySigned" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.DigitallySigned" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.DigitallySigned.Signature"></member>
    <member name="T:Org.BouncyCastle.Tls.DtlsClientProtocol"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DtlsClientProtocol</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.CancelSession(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState)"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.Connect(Org.BouncyCastle.Tls.TlsClient,Org.BouncyCastle.Tls.DatagramTransport)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.EstablishSession(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,Org.BouncyCastle.Tls.TlsSession)"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.GenerateCertificateVerify(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,Org.BouncyCastle.Tls.DigitallySigned)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.GenerateClientHello(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.GenerateClientKeyExchange(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.InvalidateSession(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState)"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.PatchClientHelloWithCookie(System.Byte[],System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessCertificateRequest(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessCertificateStatus(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessHelloVerifyRequest(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessNewSessionTicket(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessServerCertificate(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessServerHello(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessServerKeyExchange(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ProcessServerSupplementalData(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ReportServerVersion(Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState,Org.BouncyCastle.Tls.ProtocolVersion)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DtlsClientProtocol.ClientHandshakeState</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.DtlsProtocol"></member>
    <member name="T:Org.BouncyCastle.Tls.DtlsRecordCallback"></member>
    <member name="T:Org.BouncyCastle.Tls.DtlsRecordFlags"></member>
    <member name="F:Org.BouncyCastle.Tls.DtlsRecordFlags.IsNewest">
      <summary>The record is newer (by epoch and sequence number) than any record received previously.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.DtlsRecordFlags.UsesConnectionID">
      <summary>The record includes the (valid) connection ID (RFC 9146) for this connection.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.DtlsRequest"></member>
    <member name="T:Org.BouncyCastle.Tls.DtlsServerProtocol"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DtlsServerProtocol</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.Accept(Org.BouncyCastle.Tls.TlsServer,Org.BouncyCastle.Tls.DatagramTransport)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.Accept(Org.BouncyCastle.Tls.TlsServer,Org.BouncyCastle.Tls.DatagramTransport,Org.BouncyCastle.Tls.DtlsRequest)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.CancelSession(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState)"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.EstablishSession(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,Org.BouncyCastle.Tls.TlsSession)"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ExpectCertificateVerifyMessage(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState)"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.GenerateCertificateRequest(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,Org.BouncyCastle.Tls.CertificateRequest)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.GenerateCertificateStatus(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,Org.BouncyCastle.Tls.CertificateStatus)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.GenerateNewSessionTicket(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,Org.BouncyCastle.Tls.NewSessionTicket)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.InvalidateSession(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState)"></member>
    <member name="F:Org.BouncyCastle.Tls.DtlsServerProtocol.m_verifyRequests"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.NotifyClientCertificate(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,Org.BouncyCastle.Tls.Certificate)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ProcessCertificateVerify(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,System.Byte[],Org.BouncyCastle.Tls.TlsHandshakeHash)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ProcessClientCertificate(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ProcessClientHello(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,Org.BouncyCastle.Tls.ClientHello)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ProcessClientHello(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ProcessClientKeyExchange(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ProcessClientSupplementalData(Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.DtlsServerProtocol.VerifyRequests"></member>
    <member name="T:Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DtlsServerProtocol.ServerHandshakeState</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.DtlsTransport"></member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.Close">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.GetReceiveLimit">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.GetSendLimit">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.Receive(System.Byte[],System.Int32,System.Int32,System.Int32,Org.BouncyCastle.Tls.DtlsRecordCallback)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.Receive(System.Span{System.Byte},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.Receive(System.Span{System.Byte},System.Int32,Org.BouncyCastle.Tls.DtlsRecordCallback)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.ReceivePending(System.Byte[],System.Int32,System.Int32,Org.BouncyCastle.Tls.DtlsRecordCallback)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.ReceivePending(System.Span{System.Byte},Org.BouncyCastle.Tls.DtlsRecordCallback)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.Send(System.Byte[],System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsTransport.Send(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.DtlsVerifier">
      <summary>
            Implements cookie generation/verification for a DTLS server as described in RFC 4347,
            4.2.1. Denial of Service Countermeasures.
            </summary>
      <remarks>
            RFC 4347 4.2.1 additionally recommends changing the secret frequently. This class does not handle that
            internally, so the instance should be replaced instead.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsVerifier.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.DtlsVerifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.DtlsVerifier.VerifyRequest(System.Byte[],System.Byte[],System.Int32,System.Int32,Org.BouncyCastle.Tls.DatagramSender)"></member>
    <member name="T:Org.BouncyCastle.Tls.ECCurveType">
      <summary>RFC 4492 5.4</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ECCurveType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ECCurveType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ECCurveType.explicit_char2"></member>
    <member name="F:Org.BouncyCastle.Tls.ECCurveType.explicit_prime"></member>
    <member name="F:Org.BouncyCastle.Tls.ECCurveType.named_curve"></member>
    <member name="T:Org.BouncyCastle.Tls.ECPointFormat">
      <summary>RFC 4492 5.1.2</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ECPointFormat.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ECPointFormat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ECPointFormat.ansiX962_compressed_char2"></member>
    <member name="F:Org.BouncyCastle.Tls.ECPointFormat.ansiX962_compressed_prime"></member>
    <member name="F:Org.BouncyCastle.Tls.ECPointFormat.uncompressed"></member>
    <member name="T:Org.BouncyCastle.Tls.EncryptionAlgorithm">
      <summary>RFC 2246</summary>
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.EncryptionAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.EncryptionAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_128_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_128_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_128_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_128_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_256_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_256_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_256_CCM_8"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.AES_256_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.ARIA_128_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.ARIA_128_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.ARIA_256_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.ARIA_256_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.CAMELLIA_128_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.CAMELLIA_128_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.CAMELLIA_256_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.CAMELLIA_256_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.CHACHA20_POLY1305"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.cls_3DES_EDE_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.DES_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.DES40_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.IDEA_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.NULL"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.RC2_CBC_40"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.RC4_128"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.RC4_40"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.SEED_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.SM4_CBC"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.SM4_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.EncryptionAlgorithm.SM4_GCM"></member>
    <member name="T:Org.BouncyCastle.Tls.ExporterLabel">
      <summary>RFC 5705</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ExporterLabel.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ExporterLabel</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.client_EAP_encryption"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.client_finished"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.dtls_srtp"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.extended_master_secret"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.key_expansion"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.master_secret"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.server_finished"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.token_binding"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.ttls_challenge"></member>
    <member name="F:Org.BouncyCastle.Tls.ExporterLabel.ttls_keying_material"></member>
    <member name="T:Org.BouncyCastle.Tls.ExtensionType"></member>
    <member name="M:Org.BouncyCastle.Tls.ExtensionType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ExtensionType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.application_layer_protocol_negotiation"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.cached_info"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.cert_type"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.certificate_authorities"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.client_authz"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.client_certificate_type"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.client_certificate_url"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.compress_certificate"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.connection_id"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.cookie"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.early_data"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.ec_point_formats"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.encrypt_then_mac"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.extended_master_secret"></member>
    <member name="M:Org.BouncyCastle.Tls.ExtensionType.GetName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ExtensionType.GetText(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.heartbeat"></member>
    <member name="M:Org.BouncyCastle.Tls.ExtensionType.IsRecognized(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.key_share"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.max_fragment_length"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.oid_filters"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.padding"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.post_handshake_auth"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.pre_shared_key"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.psk_key_exchange_modes"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.record_size_limit"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.renegotiation_info"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.server_authz"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.server_certificate_type"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.server_name"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.session_ticket"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.signature_algorithms"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.signature_algorithms_cert"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.signed_certificate_timestamp"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.srp"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.status_request"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.status_request_v2"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.supported_groups"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.supported_versions"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.token_binding"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.truncated_hmac"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.trusted_ca_keys"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.use_srtp"></member>
    <member name="F:Org.BouncyCastle.Tls.ExtensionType.user_mapping"></member>
    <member name="T:Org.BouncyCastle.Tls.HandshakeMessageInput"></member>
    <member name="M:Org.BouncyCastle.Tls.HandshakeMessageInput.UpdateHash(Org.BouncyCastle.Tls.Crypto.TlsHash)"></member>
    <member name="T:Org.BouncyCastle.Tls.HandshakeType"></member>
    <member name="M:Org.BouncyCastle.Tls.HandshakeType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.HandshakeType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.certificate"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.certificate_request"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.certificate_status"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.certificate_url"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.certificate_verify"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.client_hello"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.client_key_exchange"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.compressed_certificate"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.encrypted_extensions"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.end_of_early_data"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.finished"></member>
    <member name="M:Org.BouncyCastle.Tls.HandshakeType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.HandshakeType.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.hello_request"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.hello_retry_request"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.hello_verify_request"></member>
    <member name="M:Org.BouncyCastle.Tls.HandshakeType.IsRecognized(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.key_update"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.message_hash"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.new_session_ticket"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.server_hello"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.server_hello_done"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.server_key_exchange"></member>
    <member name="F:Org.BouncyCastle.Tls.HandshakeType.supplemental_data"></member>
    <member name="T:Org.BouncyCastle.Tls.HashAlgorithm">
      <summary>RFC 5246 7.4.1.4.1</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.HashAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.HashAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.HashAlgorithm.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.HashAlgorithm.GetOutputSize(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.HashAlgorithm.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.Intrinsic"></member>
    <member name="M:Org.BouncyCastle.Tls.HashAlgorithm.IsPrivate(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.HashAlgorithm.IsRecognized(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.md5"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.none"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.sha1"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.sha224"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.HashAlgorithm.sha512"></member>
    <member name="T:Org.BouncyCastle.Tls.HeartbeatExtension"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatExtension.#ctor(System.Int16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.HeartbeatExtension</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatExtension.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.HeartbeatExtension" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.HeartbeatExtension.Mode"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatExtension.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.HeartbeatExtension" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.HeartbeatExtension" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.HeartbeatMessage"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessage.#ctor(System.Int16,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.HeartbeatMessage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessage.Create(Org.BouncyCastle.Tls.TlsContext,System.Int16,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessage.Create(Org.BouncyCastle.Tls.TlsContext,System.Int16,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessage.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.HeartbeatMessage" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.HeartbeatMessage.PaddingLength"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessage.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.HeartbeatMessage" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.HeartbeatMessage" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.HeartbeatMessage.Payload"></member>
    <member name="P:Org.BouncyCastle.Tls.HeartbeatMessage.Type"></member>
    <member name="T:Org.BouncyCastle.Tls.HeartbeatMessageType">
      <summary>RFC 6520 3.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessageType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.HeartbeatMessageType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessageType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessageType.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.HeartbeatMessageType.heartbeat_request"></member>
    <member name="F:Org.BouncyCastle.Tls.HeartbeatMessageType.heartbeat_response"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMessageType.IsValid(System.Int16)"></member>
    <member name="T:Org.BouncyCastle.Tls.HeartbeatMode"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMode.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.HeartbeatMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMode.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMode.GetText(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.HeartbeatMode.IsValid(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.HeartbeatMode.peer_allowed_to_send"></member>
    <member name="F:Org.BouncyCastle.Tls.HeartbeatMode.peer_not_allowed_to_send"></member>
    <member name="T:Org.BouncyCastle.Tls.IdentifierType">
      <summary>RFC 6066</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.IdentifierType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.IdentifierType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.IdentifierType.cert_sha1_hash"></member>
    <member name="M:Org.BouncyCastle.Tls.IdentifierType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.IdentifierType.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.IdentifierType.key_sha1_hash"></member>
    <member name="F:Org.BouncyCastle.Tls.IdentifierType.pre_agreed"></member>
    <member name="F:Org.BouncyCastle.Tls.IdentifierType.x509_name"></member>
    <member name="T:Org.BouncyCastle.Tls.KeyExchangeAlgorithm">
      <summary>RFC 2246</summary>
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.KeyExchangeAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DH_anon"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DH_anon_EXPORT"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DH_DSS"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DH_DSS_EXPORT"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DH_RSA"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DH_RSA_EXPORT"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DHE_DSS"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DHE_DSS_EXPORT"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DHE_PSK"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DHE_RSA"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.DHE_RSA_EXPORT"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.ECDH_anon"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.ECDH_ECDSA"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.ECDH_RSA"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.ECDHE_ECDSA"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.ECDHE_PSK"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.ECDHE_RSA"></member>
    <member name="M:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.IsAnonymous(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.NULL"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.PSK"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.RSA"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.RSA_EXPORT"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.RSA_PSK"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.SM2"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.SRP"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.SRP_DSS"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyExchangeAlgorithm.SRP_RSA"></member>
    <member name="T:Org.BouncyCastle.Tls.KeyShareEntry"></member>
    <member name="M:Org.BouncyCastle.Tls.KeyShareEntry.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.KeyShareEntry</parameter>
          </include>
        </markup>
      </summary>
      <param name="namedGroup">
        <see cref="P:Org.BouncyCastle.Tls.KeyShareEntry.NamedGroup" />
      </param>
      <param name="keyExchange"></param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.KeyShareEntry.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.KeyShareEntry" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.KeyShareEntry.KeyExchange"></member>
    <member name="P:Org.BouncyCastle.Tls.KeyShareEntry.NamedGroup">
      <returns>
        <see cref="P:Org.BouncyCastle.Tls.KeyShareEntry.NamedGroup" />
      </returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.KeyShareEntry.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.KeyShareEntry" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.KeyShareEntry" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.KeyUpdateRequest">
      <summary>RFC 8446 4.6.3</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.KeyUpdateRequest.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.KeyUpdateRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.KeyUpdateRequest.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.KeyUpdateRequest.GetText(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.KeyUpdateRequest.IsValid(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyUpdateRequest.update_not_requested"></member>
    <member name="F:Org.BouncyCastle.Tls.KeyUpdateRequest.update_requested"></member>
    <member name="T:Org.BouncyCastle.Tls.MacAlgorithm">
      <summary>RFC 2246</summary>
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.MacAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.MacAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.cls_null"></member>
    <member name="M:Org.BouncyCastle.Tls.MacAlgorithm.GetName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.MacAlgorithm.GetText(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.hmac_md5"></member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.hmac_sha1"></member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.hmac_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.hmac_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.hmac_sha512"></member>
    <member name="M:Org.BouncyCastle.Tls.MacAlgorithm.IsHmac(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.md5"></member>
    <member name="F:Org.BouncyCastle.Tls.MacAlgorithm.sha"></member>
    <member name="T:Org.BouncyCastle.Tls.MaxFragmentLength"></member>
    <member name="M:Org.BouncyCastle.Tls.MaxFragmentLength.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.MaxFragmentLength</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.MaxFragmentLength.IsValid(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.MaxFragmentLength.pow2_10"></member>
    <member name="F:Org.BouncyCastle.Tls.MaxFragmentLength.pow2_11"></member>
    <member name="F:Org.BouncyCastle.Tls.MaxFragmentLength.pow2_12"></member>
    <member name="F:Org.BouncyCastle.Tls.MaxFragmentLength.pow2_9"></member>
    <member name="T:Org.BouncyCastle.Tls.NamedGroup">
      <summary>RFC 7919</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.NamedGroup</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.arbitrary_explicit_char2_curves"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.arbitrary_explicit_prime_curves"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.brainpoolP256r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.brainpoolP256r1tls13"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.brainpoolP384r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.brainpoolP384r1tls13"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.brainpoolP512r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.brainpoolP512r1tls13"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.CanBeNegotiated(System.Int32,Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.curveSM2"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.ffdhe2048"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.ffdhe3072"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.ffdhe4096"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.ffdhe6144"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.ffdhe8192"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.GC256A"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.GC256B"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.GC256C"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.GC256D"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.GC512A"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.GC512B"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.GC512C"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetCurveBits(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetCurveName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetFiniteFieldBits(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetFiniteFieldName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetMaximumChar2CurveBits"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetMaximumCurveBits"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetMaximumFiniteFieldBits"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetMaximumPrimeCurveBits"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetStandardName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.GetText(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.IsChar2Curve(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.IsPrimeCurve(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.IsPrivate(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.IsValid(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.RefersToAnECDHCurve(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.RefersToAnECDSACurve(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.RefersToAnXDHCurve(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.RefersToASpecificCurve(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.RefersToASpecificFiniteField(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroup.RefersToASpecificGroup(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp160k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp160r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp160r2"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp192k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp192r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp224k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp224r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp256k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp256r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp384r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.secp521r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect163k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect163r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect163r2"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect193r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect193r2"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect233k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect233r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect239k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect283k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect283r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect409k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect409r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect571k1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.sect571r1"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.x25519"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroup.x448"></member>
    <member name="T:Org.BouncyCastle.Tls.NamedGroupRole">
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.NamedGroupRole.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.NamedGroupRole</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroupRole.dh"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroupRole.ecdh"></member>
    <member name="F:Org.BouncyCastle.Tls.NamedGroupRole.ecdsa"></member>
    <member name="T:Org.BouncyCastle.Tls.NameType"></member>
    <member name="M:Org.BouncyCastle.Tls.NameType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.NameType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.NameType.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.NameType.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.NameType.host_name"></member>
    <member name="M:Org.BouncyCastle.Tls.NameType.IsRecognized(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.NameType.IsValid(System.Int16)"></member>
    <member name="T:Org.BouncyCastle.Tls.NewSessionTicket"></member>
    <member name="M:Org.BouncyCastle.Tls.NewSessionTicket.#ctor(System.Int64,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.NewSessionTicket</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.NewSessionTicket.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.NewSessionTicket" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.NewSessionTicket.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.NewSessionTicket" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.NewSessionTicket" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.NewSessionTicket.Ticket"></member>
    <member name="P:Org.BouncyCastle.Tls.NewSessionTicket.TicketLifetimeHint"></member>
    <member name="T:Org.BouncyCastle.Tls.OcspStatusRequest">
      <summary>RFC 3546 3.6</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.OcspStatusRequest.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.Ocsp.ResponderID},Org.BouncyCastle.Asn1.X509.X509Extensions)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.OcspStatusRequest</parameter>
          </include>
        </markup>
      </summary>
      <param name="responderIDList">an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Asn1.Ocsp.ResponderID" />, specifying the list of
            trusted OCSP responders. An empty list has the special meaning that the responders are implicitly known to
            the server - e.g., by prior arrangement.</param>
      <param name="requestExtensions">OCSP request extensions. A null value means that there are no extensions.
            </param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.OcspStatusRequest.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.OcspStatusRequest" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.OcspStatusRequest.Parse(System.IO.Stream)">
      <summary>Parse an <see cref="T:Org.BouncyCastle.Tls.OcspStatusRequest" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>an <see cref="T:Org.BouncyCastle.Tls.OcspStatusRequest" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.OcspStatusRequest.RequestExtensions">
      <returns>OCSP request extensions.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.OcspStatusRequest.ResponderIDList">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Asn1.Ocsp.ResponderID" />.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.OfferedPsks"></member>
    <member name="M:Org.BouncyCastle.Tls.OfferedPsks.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Tls.PskIdentity})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.OfferedPsks</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.OfferedPsks.Binders"></member>
    <member name="P:Org.BouncyCastle.Tls.OfferedPsks.BindersSize"></member>
    <member name="M:Org.BouncyCastle.Tls.OfferedPsks.Encode(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.OfferedPsks.GetIndexOfIdentity(Org.BouncyCastle.Tls.PskIdentity)"></member>
    <member name="P:Org.BouncyCastle.Tls.OfferedPsks.Identities"></member>
    <member name="M:Org.BouncyCastle.Tls.OfferedPsks.Parse(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.PrfAlgorithm">
      <summary>RFC 5246</summary>
      <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to depend on the
            particular values (e.g. serialization).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.PrfAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.PrfAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.PrfAlgorithm.GetName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.PrfAlgorithm.GetText(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.PrfAlgorithm.ssl_prf_legacy"></member>
    <member name="F:Org.BouncyCastle.Tls.PrfAlgorithm.tls_prf_legacy"></member>
    <member name="F:Org.BouncyCastle.Tls.PrfAlgorithm.tls_prf_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.PrfAlgorithm.tls_prf_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.PrfAlgorithm.tls13_hkdf_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.PrfAlgorithm.tls13_hkdf_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.PrfAlgorithm.tls13_hkdf_sm3"></member>
    <member name="T:Org.BouncyCastle.Tls.ProtocolName">
      <summary>RFC 7301 Represents a protocol name for use with ALPN.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Acme_Tls_1"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.AsRawBytes(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.AsUtf8Encoding(System.String)"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Coap"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Dns_Over_Quic"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Dns_Over_Tls"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.ProtocolName" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.Equals(System.Object)"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Ftp"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.GetBytes"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.GetUtf8Decoding"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Http_1_1"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Http_2_Tcp"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Http_2_Tls"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Http_3"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Imap"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Irc"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.ManageSieve"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Nntp_Reading"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Nntp_Transit"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Ntske_1"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Oasis_Mqtt"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolName.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.ProtocolName" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.ProtocolName" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Pop3"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Smb_2"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Spdy_1"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Spdy_2"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Spdy_3"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Stun_Nat_Discovery"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Stun_Turn"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Sun_Rpc"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.WebRtc"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.WebRtc_Confidential"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Xmpp_Client"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolName.Xmpp_Server"></member>
    <member name="T:Org.BouncyCastle.Tls.ProtocolVersion"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.Contains(Org.BouncyCastle.Tls.ProtocolVersion[],Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.DownTo(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.DTLSv10"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.DTLSv12"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.DTLSv13"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.Equals(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.Tls.ProtocolVersion.FullVersion"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.Get(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetEarliestDtls(Org.BouncyCastle.Tls.ProtocolVersion[])"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetEarliestTls(Org.BouncyCastle.Tls.ProtocolVersion[])"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetEquivalentTlsVersion"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetLatestDtls(Org.BouncyCastle.Tls.ProtocolVersion[])"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetLatestTls(Org.BouncyCastle.Tls.ProtocolVersion[])"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetNextVersion"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.GetPreviousVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.ProtocolVersion.IsDtls"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.IsEarlierVersionOf(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.IsEqualOrEarlierVersionOf(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.IsEqualOrLaterVersionOf(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.IsLaterVersionOf(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="P:Org.BouncyCastle.Tls.ProtocolVersion.IsSsl"></member>
    <member name="P:Org.BouncyCastle.Tls.ProtocolVersion.IsTls"></member>
    <member name="P:Org.BouncyCastle.Tls.ProtocolVersion.MajorVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.ProtocolVersion.MinorVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.ProtocolVersion.Name"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.Only"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.SSLv3"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.TLSv10"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.TLSv11"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.TLSv12"></member>
    <member name="F:Org.BouncyCastle.Tls.ProtocolVersion.TLSv13"></member>
    <member name="M:Org.BouncyCastle.Tls.ProtocolVersion.ToString"></member>
    <member name="T:Org.BouncyCastle.Tls.PskIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.PskIdentity.#ctor(System.Byte[],System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.PskIdentity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.PskIdentity.Encode(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.PskIdentity.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Tls.PskIdentity.GetEncodedLength"></member>
    <member name="M:Org.BouncyCastle.Tls.PskIdentity.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Tls.PskIdentity.Identity"></member>
    <member name="P:Org.BouncyCastle.Tls.PskIdentity.ObfuscatedTicketAge"></member>
    <member name="M:Org.BouncyCastle.Tls.PskIdentity.Parse(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Tls.PskKeyExchangeMode"></member>
    <member name="M:Org.BouncyCastle.Tls.PskKeyExchangeMode.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.PskKeyExchangeMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.PskKeyExchangeMode.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.PskKeyExchangeMode.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.PskKeyExchangeMode.psk_dhe_ke"></member>
    <member name="F:Org.BouncyCastle.Tls.PskKeyExchangeMode.psk_ke"></member>
    <member name="T:Org.BouncyCastle.Tls.PskTlsClient"></member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsClient.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto,Org.BouncyCastle.Tls.TlsPskIdentity)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.PskTlsClient</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsClient.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.PskTlsClient</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsClient.GetAuthentication">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsClient.GetPskIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsClient.GetSupportedCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsClient.GetSupportedVersions"></member>
    <member name="F:Org.BouncyCastle.Tls.PskTlsClient.m_pskIdentity"></member>
    <member name="T:Org.BouncyCastle.Tls.PskTlsServer"></member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsServer.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto,Org.BouncyCastle.Tls.TlsPskIdentityManager)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.PskTlsServer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsServer.GetCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsServer.GetPskIdentityManager"></member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsServer.GetRsaEncryptionCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsServer.GetSupportedCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.PskTlsServer.GetSupportedVersions"></member>
    <member name="F:Org.BouncyCastle.Tls.PskTlsServer.m_pskIdentityManager"></member>
    <member name="T:Org.BouncyCastle.Tls.RecordFormat"></member>
    <member name="M:Org.BouncyCastle.Tls.RecordFormat.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.RecordFormat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.RecordFormat.FragmentOffset"></member>
    <member name="F:Org.BouncyCastle.Tls.RecordFormat.LengthOffset"></member>
    <member name="F:Org.BouncyCastle.Tls.RecordFormat.TypeOffset"></member>
    <member name="F:Org.BouncyCastle.Tls.RecordFormat.VersionOffset"></member>
    <member name="T:Org.BouncyCastle.Tls.RecordPreview"></member>
    <member name="P:Org.BouncyCastle.Tls.RecordPreview.ContentLimit"></member>
    <member name="P:Org.BouncyCastle.Tls.RecordPreview.RecordSize"></member>
    <member name="T:Org.BouncyCastle.Tls.SecurityParameters"></member>
    <member name="M:Org.BouncyCastle.Tls.SecurityParameters.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SecurityParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ApplicationProtocol"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.BaseKeyClient"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.BaseKeyServer"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.CipherSuite"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ClientCertificateType"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ClientCertTypes"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ClientRandom"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ClientServerNames"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ClientSigAlgs"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ClientSigAlgsCert"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ClientSupportedGroups"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ConnectionIDLocal"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ConnectionIDPeer"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.EarlyExporterMasterSecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.EarlySecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.Entity"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ExporterMasterSecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.HandshakeSecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.IsApplicationProtocolSet"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.IsEncryptThenMac"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.IsExtendedMasterSecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.IsExtendedPadding"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.IsResumedSession"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.IsSecureRenegotiation"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.IsTruncatedHmac"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.KeyExchangeAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.LocalCertificate"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.LocalVerifyData"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.MasterSecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.MaxFragmentLength"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.NegotiatedVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.PeerCertificate"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.PeerVerifyData"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.PrfAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.PrfCryptoHashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.PrfHashLength"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.PskIdentity"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ServerCertificateType"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ServerRandom"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ServerSigAlgs"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ServerSigAlgsCert"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.ServerSupportedGroups"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.SessionHash"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.SessionID"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.SrpIdentity"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.StatusRequestVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.TlsServerEndPoint"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.TlsUnique"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.TrafficSecretClient"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.TrafficSecretServer"></member>
    <member name="P:Org.BouncyCastle.Tls.SecurityParameters.VerifyDataLength"></member>
    <member name="T:Org.BouncyCastle.Tls.ServerHello"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerHello.#ctor(Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Byte[],System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ServerHello</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ServerHello.#ctor(System.Byte[],System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ServerHello</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerHello.CipherSuite"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerHello.Encode(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.ServerHello" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerHello.Extensions"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerHello.IsHelloRetryRequest"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerHello.Parse(System.IO.MemoryStream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.ServerHello" /> from a <see cref="T:System.IO.MemoryStream" />.</summary>
      <param name="input">the <see cref="T:System.IO.MemoryStream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.ServerHello" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerHello.Random"></member>
    <member name="P:Org.BouncyCastle.Tls.ServerHello.SessionID"></member>
    <member name="P:Org.BouncyCastle.Tls.ServerHello.Version"></member>
    <member name="T:Org.BouncyCastle.Tls.ServerName">
      <summary>RFC 6066 3. Server Name Indication</summary>
      <remarks>
            Current implementation uses this guidance: "For backward compatibility, all future data structures associated
            with new NameTypes MUST begin with a 16-bit length field. TLS MAY treat provided server names as opaque data
            and pass the names and types to the application.". RFC 6066 specifies ASCII encoding for host_name (possibly
            using A-labels for IDNs), but note that the previous version (RFC 4366) specified UTF-8 encoding (see RFC 6066
            Appendix A). For maximum compatibility, it is recommended that client code tolerate receiving UTF-8 from the
            peer, but only generate ASCII itself.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ServerName.#ctor(System.Int16,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ServerName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ServerName.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.ServerName" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerName.NameData"></member>
    <member name="P:Org.BouncyCastle.Tls.ServerName.NameType"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerName.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.ServerName" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.ServerName" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.ServerNameList"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerNameList.#ctor(System.Collections.Generic.IList{Org.BouncyCastle.Tls.ServerName})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ServerNameList</parameter>
          </include>
        </markup>
      </summary>
      <param name="serverNameList">an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.ServerName" />.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ServerNameList.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.ServerNameList" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to .</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.ServerNameList.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.ServerNameList" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.ServerNameList" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerNameList.ServerNames">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.ServerName" />.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.ServerOnlyTlsAuthentication"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerOnlyTlsAuthentication.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ServerOnlyTlsAuthentication</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.ServerOnlyTlsAuthentication.GetClientCredentials(Org.BouncyCastle.Tls.CertificateRequest)"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerOnlyTlsAuthentication.NotifyServerCertificate(Org.BouncyCastle.Tls.TlsServerCertificate)"></member>
    <member name="T:Org.BouncyCastle.Tls.ServerSrpParams"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerSrpParams.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Byte[],Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.ServerSrpParams</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerSrpParams.B"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerSrpParams.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.ServerSrpParams" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerSrpParams.G"></member>
    <member name="P:Org.BouncyCastle.Tls.ServerSrpParams.N"></member>
    <member name="M:Org.BouncyCastle.Tls.ServerSrpParams.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.ServerSrpParams" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.ServerSrpParams" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.ServerSrpParams.S"></member>
    <member name="T:Org.BouncyCastle.Tls.SessionParameters"></member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.CipherSuite"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Clear"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Copy"></member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.IsExtendedMasterSecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.LocalCertificate"></member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.MasterSecret"></member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.NegotiatedVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.PeerCertificate"></member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.PskIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.ReadServerExtensions">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.SessionParameters.SrpIdentity"></member>
    <member name="T:Org.BouncyCastle.Tls.SessionParameters.Builder"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SessionParameters.Builder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.Build"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetCipherSuite(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetExtendedMasterSecret(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetLocalCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetMasterSecret(Org.BouncyCastle.Tls.Crypto.TlsSecret)"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetNegotiatedVersion(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetPeerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetPskIdentity(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetServerExtensions(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.SessionParameters.Builder.SetSrpIdentity(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.SignatureAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SignatureAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.anonymous"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.dsa"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.ecdsa"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.ecdsa_brainpoolP256r1tls13_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.ecdsa_brainpoolP384r1tls13_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.ecdsa_brainpoolP512r1tls13_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.ed25519"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.ed448"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAlgorithm.GetClientCertificateType(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAlgorithm.GetName(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAlgorithm.GetText(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.gostr34102012_256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.gostr34102012_512"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAlgorithm.IsRecognized(System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.rsa"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.rsa_pss_pss_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.rsa_pss_pss_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.rsa_pss_pss_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.rsa_pss_rsae_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.rsa_pss_rsae_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAlgorithm.rsa_pss_rsae_sha512"></member>
    <member name="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm">
      <summary>RFC 5246 7.4.1.4.1</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.#ctor(System.Int16,System.Int16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SignatureAndHashAlgorithm</parameter>
          </include>
        </markup>
      </summary>
      <param name="hash">
        <see cref="T:Org.BouncyCastle.Tls.HashAlgorithm" />
      </param>
      <param name="signature">
        <see cref="T:Org.BouncyCastle.Tls.SignatureAlgorithm" />
      </param>
    </member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.ecdsa_brainpoolP256r1tls13_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.ecdsa_brainpoolP384r1tls13_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.ecdsa_brainpoolP512r1tls13_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.ed25519"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.ed448"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.GetInstance(System.Int16,System.Int16)"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.gostr34102012_256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.gostr34102012_512"></member>
    <member name="P:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.Hash">
      <returns>
        <see cref="T:Org.BouncyCastle.Tls.HashAlgorithm" />
      </returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.rsa_pss_pss_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.rsa_pss_pss_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.rsa_pss_pss_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.rsa_pss_rsae_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.rsa_pss_rsae_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.rsa_pss_rsae_sha512"></member>
    <member name="P:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.Signature">
      <returns>
        <see cref="T:Org.BouncyCastle.Tls.SignatureAlgorithm" />
      </returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm.ToString"></member>
    <member name="T:Org.BouncyCastle.Tls.SignatureScheme"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SignatureScheme</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ecdsa_brainpoolP256r1tls13_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ecdsa_brainpoolP384r1tls13_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ecdsa_brainpoolP512r1tls13_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ecdsa_secp256r1_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ecdsa_secp384r1_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ecdsa_secp521r1_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ecdsa_sha1"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ed25519"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.ed448"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.From(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.From(System.Int16,System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetCryptoHashAlgorithm(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetCryptoHashAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetHashAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetName(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetNamedGroup(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetSignatureAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetSignatureAndHashAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.GetText(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.IsECDsa(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.IsPrivate(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.SignatureScheme.IsRsaPss(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pkcs1_sha1"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pkcs1_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pkcs1_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pkcs1_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pss_pss_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pss_pss_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pss_pss_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pss_rsae_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pss_rsae_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.rsa_pss_rsae_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.SignatureScheme.sm2sig_sm3"></member>
    <member name="T:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager">
      <summary>An implementation of <see cref="T:Org.BouncyCastle.Tls.TlsSrpIdentityManager" /> that simulates the existence of "unknown"
            identities to obscure the fact that there is no verifier for them.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager.#ctor(Org.BouncyCastle.Tls.Crypto.Srp6Group,Org.BouncyCastle.Tls.Crypto.TlsSrp6VerifierGenerator,Org.BouncyCastle.Tls.Crypto.TlsMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager.GetLoginParameters(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager.GetRfc5054Default(Org.BouncyCastle.Tls.Crypto.TlsCrypto,Org.BouncyCastle.Tls.Crypto.Srp6Group,System.Byte[])">
      <summary>Create a <see cref="T:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager" /> that implements the algorithm from RFC 5054
            2.5.1.3.</summary>
      <param name="crypto">
        <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsCrypto" />
      </param>
      <param name="group">the <see cref="T:Org.BouncyCastle.Tls.Crypto.Srp6Group" /> defining the group that SRP is operating in.</param>
      <param name="seedKey">the secret "seed key" referred to in RFC 5054 2.5.1.3.</param>
      <returns>an instance of <see cref="T:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager" />.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="F:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager.m_group"></member>
    <member name="F:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager.m_mac"></member>
    <member name="F:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager.m_verifierGenerator"></member>
    <member name="T:Org.BouncyCastle.Tls.SrpTlsClient"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto,Org.BouncyCastle.Tls.TlsSrpIdentity)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SrpTlsClient</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Byte[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SrpTlsClient</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.GetAuthentication">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.GetClientExtensions">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.GetSrpIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.GetSupportedCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.GetSupportedVersions"></member>
    <member name="F:Org.BouncyCastle.Tls.SrpTlsClient.m_srpIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsClient.ProcessServerExtensions(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.SrpTlsClient.RequireSrpServerExtension"></member>
    <member name="T:Org.BouncyCastle.Tls.SrpTlsServer"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCrypto,Org.BouncyCastle.Tls.TlsSrpIdentityManager)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SrpTlsServer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.GetCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.GetDsaSignerCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.GetRsaSignerCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.GetSelectedCipherSuite"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.GetSrpLoginParameters"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.GetSupportedCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.GetSupportedVersions"></member>
    <member name="F:Org.BouncyCastle.Tls.SrpTlsServer.m_srpIdentity"></member>
    <member name="F:Org.BouncyCastle.Tls.SrpTlsServer.m_srpIdentityManager"></member>
    <member name="F:Org.BouncyCastle.Tls.SrpTlsServer.m_srpLoginParameters"></member>
    <member name="M:Org.BouncyCastle.Tls.SrpTlsServer.ProcessClientExtensions(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="T:Org.BouncyCastle.Tls.SrtpProtectionProfile"></member>
    <member name="M:Org.BouncyCastle.Tls.SrtpProtectionProfile.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SrtpProtectionProfile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.SrtpProtectionProfile.SRTP_AEAD_AES_128_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.SrtpProtectionProfile.SRTP_AEAD_AES_256_GCM"></member>
    <member name="F:Org.BouncyCastle.Tls.SrtpProtectionProfile.SRTP_AES128_CM_HMAC_SHA1_32"></member>
    <member name="F:Org.BouncyCastle.Tls.SrtpProtectionProfile.SRTP_AES128_CM_HMAC_SHA1_80"></member>
    <member name="F:Org.BouncyCastle.Tls.SrtpProtectionProfile.SRTP_NULL_HMAC_SHA1_32"></member>
    <member name="F:Org.BouncyCastle.Tls.SrtpProtectionProfile.SRTP_NULL_HMAC_SHA1_80"></member>
    <member name="T:Org.BouncyCastle.Tls.SupplementalDataEntry"></member>
    <member name="M:Org.BouncyCastle.Tls.SupplementalDataEntry.#ctor(System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SupplementalDataEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.SupplementalDataEntry.Data"></member>
    <member name="P:Org.BouncyCastle.Tls.SupplementalDataEntry.DataType"></member>
    <member name="T:Org.BouncyCastle.Tls.SupplementalDataType">
      <summary>RFC 4680</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.SupplementalDataType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.SupplementalDataType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.SupplementalDataType.user_mapping_data"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsAuthentication">
      <summary>Base interface to provide TLS authentication credentials.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsAuthentication.GetClientCredentials(Org.BouncyCastle.Tls.CertificateRequest)">
      <summary>Return client credentials in response to server's certificate request.</summary>
      <param name="certificateRequest">details of the certificate request.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.TlsCredentials" /> object or null for no client authentication.</returns>
      <remarks>
            The returned value may be null, or else it MUST implement <em>exactly one</em> of
            <see cref="T:Org.BouncyCastle.Tls.TlsCredentialedAgreement" />, <see cref="T:Org.BouncyCastle.Tls.TlsCredentialedDecryptor" />, or
            <see cref="T:Org.BouncyCastle.Tls.TlsCredentialedSigner" />, depending on the key exchange that was negotiated and the details of
            the <see cref="T:Org.BouncyCastle.Tls.CertificateRequest" />.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsAuthentication.NotifyServerCertificate(Org.BouncyCastle.Tls.TlsServerCertificate)">
      <summary>Called by the protocol handler to report the server certificate.</summary>
      <param name="serverCertificate">the server certificate received.</param>
      <remarks>
            Note: this method is responsible for certificate verification and validation.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsClient"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetAuthentication">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetClientExtensions">
      <returns>(Int32 -&gt; byte[])</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetClientSupplementalData">
      <returns>(SupplementalDataEntry)</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetDHGroupVerifier">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetEarlyKeyShareGroups">
      <summary>If this client is offering TLS 1.3 or higher, this method may be called to determine for which
            groups a key share should be included in the initial ClientHello.</summary>
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.NamedGroup">named group</see> values, possibly empty or
            null.
            </returns>
      <remarks>
            Groups that were not included in the supported_groups extension (by <see cref="M:Org.BouncyCastle.Tls.TlsClient.GetClientExtensions" /> will
            be ignored. The protocol will then add a suitable key_share extension to the ClientHello extensions.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetExternalPsks">
      <summary>Return the <see cref="T:Org.BouncyCastle.Tls.TlsPskExternal">external PSKs</see> to offer in the ClientHello.</summary>
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.TlsPskExternal" /> instances, or null if none should be
            offered.</returns>
      <remarks>This will only be called when TLS 1.3 or higher is amongst the offered protocol versions.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetPskIdentity">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetSessionToResume">
      <summary>Return the session this client wants to resume, if any.</summary>
      <returns>A <see cref="T:Org.BouncyCastle.Tls.TlsSession" /> representing the resumable session to be used for this connection, or
            null to use a new session.</returns>
      <remarks>
            Note that the peer's certificate chain for the session (if any) may need to be periodically revalidated.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetSrpConfigVerifier">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.GetSrpIdentity">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.Init(Org.BouncyCastle.Tls.TlsClientContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.IsFallback"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.NotifyNewSessionTicket(Org.BouncyCastle.Tls.NewSessionTicket)">
      <summary>RFC 5077 3.3. NewSessionTicket Handshake Message</summary>
      <param name="newSessionTicket">The ticket.</param>
      <remarks>
            This method will be called (only) when a NewSessionTicket handshake message is received. The ticket is
            opaque to the client and clients MUST NOT examine the ticket under the assumption that it complies with e.g.
            RFC 5077 4. "Recommended Ticket Construction".
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.NotifySelectedPsk(Org.BouncyCastle.Tls.TlsPsk)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.NotifyServerVersion(Org.BouncyCastle.Tls.ProtocolVersion)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.NotifySessionID(System.Byte[])">
      <summary>Notifies the client of the session_id sent in the ServerHello.</summary>
      <param name="sessionID" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.NotifySessionToResume(Org.BouncyCastle.Tls.TlsSession)">
      <summary>Notifies the client of the session that will be offered in ClientHello for resumption, if any.
            </summary>
      <param name="session">The <see cref="T:Org.BouncyCastle.Tls.TlsSession" /> representing the resumable session to be offered for
            this connection, or null if there is none.</param>
      <remarks>
            This will be either the session returned from {@link #getSessionToResume()} or null if that session was
            unusable. NOTE: the actual negotiated session_id is notified by <see cref="M:Org.BouncyCastle.Tls.TlsClient.NotifySessionID(System.Byte[])" />.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.ProcessServerExtensions(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <summary>The protocol implementation validates that any server extensions received correspond to client
            extensions sent.</summary>
      <param name="serverExtensions">(Int32 -&gt; byte[])</param>
      <remarks>
            If further processing of the server extensions is needed, it can be done in this callback. NOTE: This is
            not called for session resumption handshakes.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SupplementalDataEntry})">
      <param name="serverSupplementalData">(SupplementalDataEntry)</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsClientContext">
      <summary>Marker interface to distinguish a TLS client context.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsClientProtocol"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.#ctor">
      <summary>Constructor for non-blocking mode.</summary>
      <remarks>
            When data is received, use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.OfferInput(System.Byte[])" /> to provide the received ciphertext,
            then use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)" /> to read the corresponding cleartext.<br /><br />
            Similarly, when data needs to be sent, use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.WriteApplicationData(System.Byte[],System.Int32,System.Int32)" />
            to provide the cleartext, then use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)" /> to get the
            corresponding ciphertext.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.#ctor(System.IO.Stream)">
      <summary>Constructor for blocking mode.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> of data to/from the server.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>Constructor for blocking mode.</summary>
      <param name="input">The <see cref="T:System.IO.Stream" /> of data from the server.</param>
      <param name="output">The <see cref="T:System.IO.Stream" /> of data to the server.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.BeginHandshake"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.CleanupHandshake"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Connect(Org.BouncyCastle.Tls.TlsClient)">
      <summary>Initiates a TLS handshake in the role of client.</summary>
      <param name="tlsClient">The <see cref="T:Org.BouncyCastle.Tls.TlsClient" /> to use for the handshake.</param>
      <remarks>
            In blocking mode, this will not return until the handshake is complete. In non-blocking mode, use
            <see cref="M:Org.BouncyCastle.Tls.TlsPeer.NotifyHandshakeComplete" /> to receive a callback when the handshake is complete.
            </remarks>
      <exception cref="T:System.IO.IOException">If in blocking mode and handshake was not successful.</exception>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsClientProtocol.Context"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Handle13HandshakeMessage(System.Int16,Org.BouncyCastle.Tls.HandshakeMessageInput)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.HandleHandshakeMessage(System.Int16,Org.BouncyCastle.Tls.HandshakeMessageInput)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.HandleServerCertificate">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.HandleSupplementalData(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SupplementalDataEntry})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="F:Org.BouncyCastle.Tls.TlsClientProtocol.m_authentication"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsClientProtocol.m_certificateRequest"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsClientProtocol.m_certificateStatus"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsClientProtocol.m_clientAgreements"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsClientProtocol.m_clientHello"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsClientProtocol.m_keyExchange"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsClientProtocol.m_tlsClient"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsClientProtocol.Peer"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Process13HelloRetryRequest(Org.BouncyCastle.Tls.ServerHello)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Process13ServerHello(Org.BouncyCastle.Tls.ServerHello,System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Process13ServerHelloCoda(Org.BouncyCastle.Tls.ServerHello,System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.ProcessServerHello(Org.BouncyCastle.Tls.ServerHello)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Receive13CertificateRequest(System.IO.MemoryStream,System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Receive13EncryptedExtensions(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Receive13NewSessionTicket(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Receive13ServerCertificate(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Receive13ServerCertificateVerify(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Receive13ServerFinished(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.ReceiveCertificateRequest(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.ReceiveNewSessionTicket(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.ReceiveServerHelloMessage(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Send13ClientHelloRetry">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.SendCertificateVerifyMessage(Org.BouncyCastle.Tls.DigitallySigned)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.SendClientHello">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.SendClientHelloMessage">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.SendClientKeyExchange">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Skip13CertificateRequest">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsClientProtocol.Skip13ServerCertificate">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsCloseable"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsCloseable.Close">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsContext">
      <summary>Base interface for a TLS context implementation.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.ClientSupportedVersions"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.ClientVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.Crypto"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsContext.ExportChannelBinding(System.Int32)">
      <summary>Export the value of the specified channel binding.</summary>
      <param name="channelBinding">A <see cref="T:Org.BouncyCastle.Tls.ChannelBinding" /> constant specifying the channel binding to
            export.</param>
      <returns>A copy of the channel binding data as a <c>byte[]</c>, or null if the binding could not be
            determined.</returns>
      <remarks>
            Only available after the handshake has successfully completed.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsContext.ExportEarlyKeyingMaterial(System.String,System.Byte[],System.Int32)">
      <summary>Export (early data) keying material according to RFC 5705: "Keying Material Exporters for TLS", as
            updated for TLS 1.3 (RFC 8446).</summary>
      <param name="asciiLabel">indicates which application will use the exported keys.</param>
      <param name="context_value">allows the application using the exporter to mix its own data with the TLS PRF
            for the exporter output.</param>
      <param name="length">the number of bytes to generate.</param>
      <returns>a pseudorandom bit string of 'length' bytes generated from the (exporter_)master_secret.</returns>
      <remarks>
            NOTE: for use in settings where an exporter is needed for 0-RTT data.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsContext.ExportKeyingMaterial(System.String,System.Byte[],System.Int32)">
      <summary>Export keying material according to RFC 5705: "Keying Material Exporters for TLS", as updated for
            TLS 1.3 (RFC 8446) when negotiated.</summary>
      <param name="asciiLabel">indicates which application will use the exported keys.</param>
      <param name="context_value">allows the application using the exporter to mix its own data with the TLS PRF
            for the exporter output.</param>
      <param name="length">the number of bytes to generate.</param>
      <returns>a pseudorandom bit string of 'length' bytes generated from the (exporter_)master_secret.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.IsServer">
      <summary>Return true if this context is for a server, false otherwise.</summary>
      <returns>true for a server based context, false for a client based one.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.NonceGenerator"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.ResumableSession">
      <summary>Used to get the resumable session, if any, used by this connection.</summary>
      <returns>A <see cref="T:Org.BouncyCastle.Tls.TlsSession" /> representing the resumable session used by this connection, or null if
            no resumable session available.</returns>
      <remarks>
            Only available after the handshake has successfully completed.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.RsaPreMasterSecretVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.SecurityParameters"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.ServerVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.Session">
      <summary>Used to get the session information for this connection.</summary>
      <returns>A <see cref="T:Org.BouncyCastle.Tls.TlsSession" /> representing the session used by this connection.</returns>
      <remarks>
            Only available after the handshake has successfully completed. Use <see cref="P:Org.BouncyCastle.Tls.TlsSession.IsResumable" />
            to find out if the session is resumable.
            </remarks>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsContext.UserObject"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsCredentialedAgreement">
      <summary>Support interface for generating a secret based on the credentials sent by a TLS peer.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsCredentialedAgreement.GenerateAgreement(Org.BouncyCastle.Tls.Crypto.TlsCertificate)">
      <summary>Calculate an agreed secret based on our credentials and the public key credentials of our peer.
            </summary>
      <param name="peerCertificate">public key certificate of our TLS peer.</param>
      <returns>the agreed secret.</returns>
      <exception cref="T:System.IO.IOException">in case of an exception on generation of the secret.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsCredentialedDecryptor">
      <summary>Base interface for a class that decrypts TLS secrets.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsCredentialedDecryptor.Decrypt(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Byte[])">
      <summary>Decrypt the passed in cipher text using the parameters available.</summary>
      <param name="cryptoParams">the parameters to use for the decryption.</param>
      <param name="ciphertext">the cipher text containing the secret.</param>
      <returns>a TLS secret.</returns>
      <exception cref="T:System.IO.IOException">on a parsing or decryption error.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsCredentialedSigner">
      <summary>Support interface for generating a signature based on our private credentials.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsCredentialedSigner.GenerateRawSignature(System.Byte[])">
      <summary>Generate a signature against the passed in hash.</summary>
      <param name="hash">a message digest calculated across the message the signature is to apply to.</param>
      <returns>an encoded signature.</returns>
      <exception cref="T:System.IO.IOException">if the hash cannot be processed, or there is an issue with the private
            credentials.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsCredentialedSigner.GetStreamSigner">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsCredentialedSigner.SignatureAndHashAlgorithm">
      <summary>Return the algorithm IDs for the signature algorithm and the associated hash it uses.</summary>
      <returns>the full algorithm details for the signature.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsCredentials">
      <summary>Base interface for interfaces/classes carrying TLS credentials.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsCredentials.Certificate">
      <summary>Return the certificate structure representing our identity.</summary>
      <returns>our certificate structure.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsDHanonKeyExchange">
      <summary>(D)TLS DH_anon key exchange.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsDHanonKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsDHanonKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.GenerateServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.GetClientCertificateTypes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.m_agreement"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.m_dhConfig"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.m_dhGroupVerifier"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.ProcessClientCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.ProcessServerKeyExchange(System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHanonKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsDheKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsDheKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsDheKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.GenerateServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.GetClientCertificateTypes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDheKeyExchange.m_agreement"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDheKeyExchange.m_dhConfig"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDheKeyExchange.m_dhGroupVerifier"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDheKeyExchange.m_serverCertificate"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDheKeyExchange.m_serverCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.ProcessServerKeyExchange(System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsDheKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDheKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsDHGroupVerifier">
      <summary>Interface for verifying explicit Diffie-Hellman group parameters.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHGroupVerifier.Accept(Org.BouncyCastle.Tls.Crypto.DHGroup)">
      <summary>Check whether the given DH group is acceptable for use.</summary>
      <param name="dhGroup">the <see cref="T:Org.BouncyCastle.Tls.Crypto.DHGroup" /> to check.</param>
      <returns>true if (and only if) the specified group is acceptable.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsDHKeyExchange">
      <summary>(D)TLS DH key exchange.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsDHKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.GetClientCertificateTypes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDHKeyExchange.m_agreementCredentials"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsDHKeyExchange.m_dhPeerCertificate"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.ProcessClientCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsDHKeyExchange.RequiresCertificateVerify"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.SkipClientCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsDHUtilities"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsDHUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.CreateNamedDHConfig(Org.BouncyCastle.Tls.TlsContext,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.GetDHGroup(Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.GetMinimumFiniteFieldBits(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.GetNamedDHGroup(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.GetNamedGroupForDHParameters(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.GetStandardGroupForDHParameters(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.IsDHCipherSuite(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.ReadDHParameter(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.ReceiveDHConfig(Org.BouncyCastle.Tls.TlsContext,Org.BouncyCastle.Tls.TlsDHGroupVerifier,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.WriteDHConfig(Org.BouncyCastle.Tls.Crypto.TlsDHConfig,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsDHUtilities.WriteDHParameter(Org.BouncyCastle.Math.BigInteger,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsEccUtilities"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsEccUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.CheckPointEncoding(System.Int32,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.CreateNamedECConfig(Org.BouncyCastle.Tls.TlsContext,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.GetMinimumCurveBits(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.IsEccCipherSuite(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.ReceiveECDHConfig(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.WriteECConfig(Org.BouncyCastle.Tls.Crypto.TlsECConfig,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsEccUtilities.WriteNamedECParameters(System.Int32,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange">
      <summary>(D)TLS ECDH_anon key exchange (see RFC 4492).</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsECDHanonKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsECDHanonKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.GenerateEphemeral(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.GenerateServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.GetClientCertificateTypes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.m_agreement"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.m_ecConfig"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.ProcessClientCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.ProcessEphemeral(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.ProcessServerKeyExchange(System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHanonKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsECDheKeyExchange">
      <summary>(D)TLS ECDHE key exchange (see RFC 4492).</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsECDheKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsECDheKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.GenerateEphemeral(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.GenerateServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.GetClientCertificateTypes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDheKeyExchange.m_agreement"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDheKeyExchange.m_ecConfig"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDheKeyExchange.m_serverCertificate"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDheKeyExchange.m_serverCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.ProcessEphemeral(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.ProcessServerKeyExchange(System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsECDheKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDheKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsECDHKeyExchange">
      <summary>(D)TLS ECDH key exchange (see RFC 4492).</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsECDHKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.GetClientCertificateTypes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDHKeyExchange.m_agreementCredentials"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsECDHKeyExchange.m_ecdhPeerCertificate"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.ProcessClientCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsECDHKeyExchange.RequiresCertificateVerify"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.SkipClientCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsECDHKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsException"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsExtensionsUtilities"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddAlpnExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Tls.ProtocolName})">
      <param name="extensions">(Int32 -&gt; byte[])</param>
      <param name="protocolNameList">an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.ProtocolName" />.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddAlpnExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.ProtocolName)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.X509Name})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddClientCertificateUrlExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddCompressCertificateExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddConnectionIDExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddCookieExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddEarlyDataIndication(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddEarlyDataMaxSize(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int64)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddEmptyExtensionData(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddEncryptThenMacExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddExtendedMasterSecretExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddHeartbeatExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.HeartbeatExtension)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddKeyShareClientHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Tls.KeyShareEntry})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddKeyShareHelloRetryRequest(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddKeyShareServerHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.KeyShareEntry)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddMaxFragmentLengthExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddOidFiltersExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddPaddingExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddPostHandshakeAuthExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddPreSharedKeyClientHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.OfferedPsks)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddPreSharedKeyServerHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddPskKeyExchangeModesExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddRecordSizeLimitExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddServerNameExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Tls.ServerName})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddServerNameExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddStatusRequestExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.CertificateStatusRequest)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddStatusRequestV2Extension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Tls.CertificateStatusRequestItemV2})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddSupportedGroupsExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{System.Int32})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddSupportedPointFormatsExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddSupportedVersionsExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.ProtocolVersion[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddSupportedVersionsExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.ProtocolVersion)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddTruncatedHmacExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddTrustedCAKeysExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IList{Org.BouncyCastle.Tls.TrustedAuthority})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.AddTrustedCAKeysExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateAlpnExtensionClient(System.Collections.Generic.IList{Org.BouncyCastle.Tls.ProtocolName})">
      <param name="protocolNameList">an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.ProtocolName" />.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateAlpnExtensionServer(Org.BouncyCastle.Tls.ProtocolName)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateCertificateAuthoritiesExtension(System.Collections.Generic.IList{Org.BouncyCastle.Asn1.X509.X509Name})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionClient(System.Int16[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionServer(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateClientCertificateUrlExtension"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateCompressCertificateExtension(System.Int32[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateConnectionIDExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateCookieExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateEarlyDataIndication"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateEarlyDataMaxSize(System.Int64)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateEmptyExtensionData"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateEncryptThenMacExtension"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateExtendedMasterSecretExtension"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateHeartbeatExtension(Org.BouncyCastle.Tls.HeartbeatExtension)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateKeyShareClientHello(System.Collections.Generic.IList{Org.BouncyCastle.Tls.KeyShareEntry})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateKeyShareHelloRetryRequest(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateKeyShareServerHello(Org.BouncyCastle.Tls.KeyShareEntry)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateMaxFragmentLengthExtension(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateOidFiltersExtension(System.Collections.Generic.IDictionary{Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreatePaddingExtension(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreatePostHandshakeAuthExtension"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreatePreSharedKeyClientHello(Org.BouncyCastle.Tls.OfferedPsks)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreatePreSharedKeyServerHello(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreatePskKeyExchangeModesExtension(System.Int16[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateRecordSizeLimitExtension(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateServerNameExtensionClient(System.Collections.Generic.IList{Org.BouncyCastle.Tls.ServerName})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateServerNameExtensionServer"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateSignatureAlgorithmsCertExtension(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateSignatureAlgorithmsExtension(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateStatusRequestExtension(Org.BouncyCastle.Tls.CertificateStatusRequest)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateStatusRequestV2Extension(System.Collections.Generic.IList{Org.BouncyCastle.Tls.CertificateStatusRequestItemV2})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateSupportedGroupsExtension(System.Collections.Generic.IList{System.Int32})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateSupportedPointFormatsExtension(System.Int16[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateSupportedVersionsExtensionClient(Org.BouncyCastle.Tls.ProtocolVersion[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateSupportedVersionsExtensionServer(Org.BouncyCastle.Tls.ProtocolVersion)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateTruncatedHmacExtension"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateTrustedCAKeysExtensionClient(System.Collections.Generic.IList{Org.BouncyCastle.Tls.TrustedAuthority})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.CreateTrustedCAKeysExtensionServer"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.EnsureExtensionsInitialised(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetAlpnExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.ProtocolName" />.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetAlpnExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetCompressCertificateExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetConnectionIDExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetCookieExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetEarlyDataMaxSize(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetHeartbeatExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetKeyShareClientHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetKeyShareHelloRetryRequest(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetKeyShareServerHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetMaxFragmentLengthExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetOidFiltersExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetPaddingExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetPreSharedKeyClientHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetPreSharedKeyServerHello(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetPskKeyExchangeModesExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetRecordSizeLimitExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetServerNameExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetStatusRequestExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetStatusRequestV2Extension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetSupportedGroupsExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetSupportedPointFormatsExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetSupportedVersionsExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetSupportedVersionsExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.GetTrustedCAKeysExtensionClient(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasClientCertificateUrlExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasEarlyDataIndication(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasEncryptThenMacExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasExtendedMasterSecretExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasPostHandshakeAuthExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasServerNameExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasTruncatedHmacExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.HasTrustedCAKeysExtensionServer(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadAlpnExtensionClient(System.Byte[])">
      <returns>an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.ProtocolName" />.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadAlpnExtensionServer(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadCertificateAuthoritiesExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionClient(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionServer(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadClientCertificateUrlExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadCompressCertificateExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadConnectionIDExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadCookieExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadEarlyDataIndication(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadEarlyDataMaxSize(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadEncryptThenMacExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadExtendedMasterSecretExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadHeartbeatExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadKeyShareClientHello(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadKeyShareHelloRetryRequest(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadKeyShareServerHello(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadMaxFragmentLengthExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadOidFiltersExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadPaddingExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadPostHandshakeAuthExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadPreSharedKeyClientHello(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadPreSharedKeyServerHello(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadPskKeyExchangeModesExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadRecordSizeLimitExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadServerNameExtensionClient(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadServerNameExtensionServer(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadSignatureAlgorithmsCertExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadSignatureAlgorithmsExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadStatusRequestExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadStatusRequestV2Extension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadSupportedGroupsExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadSupportedPointFormatsExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadSupportedVersionsExtensionClient(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadSupportedVersionsExtensionServer(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadTruncatedHmacExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadTrustedCAKeysExtensionClient(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsExtensionsUtilities.ReadTrustedCAKeysExtensionServer(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsFatalAlert"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlert.#ctor(System.Int16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsFatalAlert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlert.#ctor(System.Int16,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsFatalAlert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlert.#ctor(System.Int16,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsFatalAlert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlert.#ctor(System.Int16,System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsFatalAlert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlert.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsFatalAlert</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsFatalAlert.AlertDescription"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlert.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsFatalAlert.m_alertDescription"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsFatalAlertReceived"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlertReceived.#ctor(System.Int16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsFatalAlertReceived</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlertReceived.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsFatalAlertReceived</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsFatalAlertReceived.AlertDescription"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsFatalAlertReceived.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsFatalAlertReceived.m_alertDescription"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsHandshakeHash">
      <summary>Base interface for an object that can calculate a handshake hash.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.CopyBufferTo(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.ForceBuffering"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.ForkPrfHash"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.GetFinalHash(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.NotifyPrfDetermined"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.SealHashAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.StopTracking"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsHandshakeHash.TrackHashAlgorithm(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsHeartbeat"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsHeartbeat.GeneratePayload"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsHeartbeat.IdleMillis"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsHeartbeat.TimeoutMillis"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsKeyExchange">
      <summary>A generic interface for key exchange implementations in (D)TLS.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.GeneratePreMasterSecret">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.GenerateServerKeyExchange">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.GetClientCertificateTypes"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.Init(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.ProcessClientCertificate(Org.BouncyCastle.Tls.Certificate)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.ProcessClientKeyExchange(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsKeyExchange.RequiresCertificateVerify"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.SkipClientCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.SkipServerCredentials">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchange.SkipServerKeyExchange">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsKeyExchangeFactory">
      <summary>Interface for a key exchange factory offering a variety of specific algorithms.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateDHanonKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateDheKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsDHGroupVerifier)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateDheKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateDHKeyExchange(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateECDHanonKeyExchangeClient(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateECDHanonKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateECDheKeyExchangeClient(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateECDheKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateECDHKeyExchange(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreatePskKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentity,Org.BouncyCastle.Tls.TlsDHGroupVerifier)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreatePskKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentityManager,Org.BouncyCastle.Tls.Crypto.TlsDHConfig,Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateRsaKeyExchange(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateSrpKeyExchangeClient(System.Int32,Org.BouncyCastle.Tls.TlsSrpIdentity,Org.BouncyCastle.Tls.TlsSrpConfigVerifier)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsKeyExchangeFactory.CreateSrpKeyExchangeServer(System.Int32,Org.BouncyCastle.Tls.TlsSrpLoginParameters)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsNoCloseNotifyException">
      <summary>This exception will be thrown (only) when the connection is closed by the peer without sending a
            <see cref="F:Org.BouncyCastle.Tls.AlertDescription.close_notify">close_notify</see> warning alert.</summary>
      <remarks>
            If this happens, the TLS protocol cannot rule out truncation of the connection data (potentially
            malicious). It may be possible to check for truncation via some property of a higher level protocol
            built upon TLS, e.g.the Content-Length header for HTTPS.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsNoCloseNotifyException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsNoCloseNotifyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsNoCloseNotifyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsNoCloseNotifyException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsObjectIdentifiers">
      <summary>Object Identifiers associated with TLS extensions.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsObjectIdentifiers.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsObjectIdentifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.TlsObjectIdentifiers.id_pe_tlsfeature">
      <summary>RFC 7633</summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsPeer">
      <summary>Base interface for a (D)TLS endpoint.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.AllowLegacyResumption"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.Cancel">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsPeer.Crypto"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetCipherSuites"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetHandshakeTimeoutMillis">
      <summary>Specify the timeout, in milliseconds, to use for the complete handshake process.</summary>
      <returns>the handshake timeout, in milliseconds.</returns>
      <remarks>
            NOTE: Currently only respected by DTLS protocols. Negative values are not allowed. A timeout of zero means
            an infinite timeout (i.e.the handshake will never time out).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetHeartbeat">
      <summary>Return a <see cref="T:Org.BouncyCastle.Tls.TlsHeartbeat" /> instance that will control the generation of heartbeats
            locally (if permitted by the remote peer), or null to not generate heartbeats. Heartbeats are described in
            RFC 6520.</summary>
      <returns>an instance of <see cref="T:Org.BouncyCastle.Tls.TlsHeartbeat" />.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetHeartbeatPolicy">
      <summary>Return the heartbeat mode applicable to the remote peer. Heartbeats are described in RFC 6520.
            </summary>
      <returns>the <see cref="T:Org.BouncyCastle.Tls.HeartbeatMode" /> value.</returns>
      <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle.Tls.HeartbeatMode" /> for appropriate return values.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetKeyExchangeFactory">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetMaxCertificateChainLength"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetMaxHandshakeMessageSize"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetProtocolVersions"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.GetPskKeyExchangeModes"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsPeer.IgnoreCorruptDtlsRecords">
      <summary>Indicates whether a DTLS connection should ignore corrupt records (bad_record_mac) instead of
            failing the connection.</summary>
      <returns>The value <c>true</c> to ignore corrupt DTLS records, or <c>false</c> to fail the connection.
            </returns>
      <remarks>Called only once at the start of a connection and applies throughout.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.NotifyAlertRaised(System.Int16,System.Int16,System.String,System.Exception)">
      <summary>This method will be called when an alert is raised by the protocol.</summary>
      <param name="alertLevel">
        <see cref="T:Org.BouncyCastle.Tls.AlertLevel" />
      </param>
      <param name="alertDescription">
        <see cref="T:Org.BouncyCastle.Tls.AlertDescription" />
      </param>
      <param name="message">A human-readable message explaining what caused this alert. May be null.</param>
      <param name="cause">The <see cref="T:System.Exception" /> that caused this alert to be raised. May be null.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.NotifyAlertReceived(System.Int16,System.Int16)">
      <summary>This method will be called when an alert is received from the remote peer.</summary>
      <param name="alertLevel">
        <see cref="T:Org.BouncyCastle.Tls.AlertLevel" />
      </param>
      <param name="alertDescription">
        <see cref="T:Org.BouncyCastle.Tls.AlertDescription" />
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.NotifyCloseHandle(Org.BouncyCastle.Tls.TlsCloseable)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.NotifyHandshakeBeginning">
      <summary>Notifies the peer that a new handshake is about to begin.</summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.NotifyHandshakeComplete">
      <summary>Notifies the peer that the handshake has been successfully completed.</summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)">
      <summary>RFC 5746 3.4/3.6. In case this is false, peers may want to terminate the handshake instead of
            continuing; see Section 4.1/4.3 for discussion.</summary>
      <remarks>
            NOTE: TLS 1.3 forbids renegotiation, so this is never called when TLS 1.3 (or later) was negotiated.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.RequiresCloseNotify">
      <remarks>
            This option is provided as a last resort for interoperability with TLS peers that fail to correctly send a
            close_notify alert at end of stream. Implementations SHOULD return true; caution is advised if returning
            false without a full understanding of the implications.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.RequiresExtendedMasterSecret">
      <returns>
        <c>true</c> if the handshake should be aborted when the peer does not negotiate the
            extended_master_secret extension, or <c>false</c> to support legacy interoperability.</returns>
      <remarks>This implementation supports RFC 7627 and will always negotiate the extended_master_secret
            extension where possible. When connecting to a peer that does not offer/accept this extension, it is
            recommended to abort the handshake.This option is provided for interoperability with legacy peers, although
            some TLS features will be disabled in that case (see RFC 7627 5.4).
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.ShouldUseExtendedMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.ShouldUseExtendedPadding">
      <summary>See RFC 5246 6.2.3.2. Controls whether block cipher encryption may randomly add extra padding
            beyond the minimum.</summary>
      <returns>
        <c>true</c> if random extra padding should be added during block cipher encryption, or
            <c>false</c> to always use the minimum amount of required padding.</returns>
      <remarks>
            Note that in configurations where this is known to be potential security risk this setting will be ignored
            (and extended padding disabled). Extra padding is always supported when decrypting received records.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPeer.ShouldUseGmtUnixTime">
      <summary> draft-mathewson-no-gmtunixtime-00 2. "If existing users of a TLS implementation may rely on
            gmt_unix_time containing the current time, we recommend that implementors MAY provide the ability to set
            gmt_unix_time as an option only, off by default.".</summary>
      <returns>
        <c>true</c> if the current time should be used in the gmt_unix_time field of Random, or
            <c>false</c> if gmt_unix_time should contain a cryptographically random value.</returns>
      <remarks>
            NOTE: For a server that has negotiated TLS 1.3 (or later), or a client that has offered TLS 1.3 (or later),
            this is not called and gmt_unix_time is not used.
            </remarks>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsProtocol"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsProtocol</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsProtocol</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsProtocol</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.ADS_MODE_0_N"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.ADS_MODE_0_N_FIRSTONLY"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.ADS_MODE_1_Nsub1"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.AppDataSplitMode"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.ApplicationDataAvailable"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.ApplicationDataLimit"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ApplyMaxFragmentLengthExtension(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.BeginHandshake">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.BlockForHandshake">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.CancelSession"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.CheckReceivedChangeCipherSpec(System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.CleanupHandshake"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Close"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.CloseConnection">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.CloseInput">
      <summary>Should be called in non-blocking mode when the input data reaches EOF.</summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.CompleteHandshake">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.Context"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_CERTIFICATE"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_CERTIFICATE_VERIFY"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_END_OF_EARLY_DATA"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_FINISHED"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_HELLO"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_HELLO_RETRY"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_KEY_EXCHANGE"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_CLIENT_SUPPLEMENTAL_DATA"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_END"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_CERTIFICATE"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_CERTIFICATE_REQUEST"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_CERTIFICATE_STATUS"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_CERTIFICATE_VERIFY"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_ENCRYPTED_EXTENSIONS"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_FINISHED"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_HELLO"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_HELLO_DONE"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_HELLO_RETRY_REQUEST"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_KEY_EXCHANGE"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_SESSION_TICKET"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_SERVER_SUPPLEMENTAL_DATA"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.CS_START"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.EstablishSession(Org.BouncyCastle.Tls.TlsSession)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Flush"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.GetAvailableInputBytes">
      <summary>Gets the amount of received application data.</summary>
      <returns>The number of bytes of available application data.</returns>
      <remarks>A call to <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)" /> is guaranteed to be able to return at least
            this much data.<br /><br />
            Only allowed in non-blocking mode.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.GetAvailableOutputBytes">
      <summary>Gets the amount of encrypted data available to be sent.</summary>
      <returns>The number of bytes of available encrypted data.</returns>
      <remarks>
            A call to <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)" /> is guaranteed to be able to return at least this much
            data. Only allowed in non-blocking mode.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.HandleAlertMessage(System.Int16,System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.HandleAlertWarningMessage(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.HandleChangeCipherSpecMessage">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.HandleClose(System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.HandleException(System.Int16,System.String,System.Exception)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.HandleFailure">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.HandleHandshakeMessage(System.Int16,Org.BouncyCastle.Tls.HandshakeMessageInput)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.InvalidateSession"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.IsClosed"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.IsConnected"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.IsHandshaking"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.IsLegacyConnectionState"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.IsResumableHandshake"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.IsTlsV13ConnectionState"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_blocking"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_clientExtensions"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_connectionState"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_expectSessionTicket"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_inputBuffers"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_outputBuffer"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_receivedChangeCipherSpec"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_retryCookie"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_retryGroup"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_selectedPsk13"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_serverExtensions"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_sessionMasterSecret"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_sessionParameters"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsProtocol.m_tlsSession"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.OfferInput(System.Byte[])">
      <summary>Equivalent to <code>OfferInput(input, 0, input.Length)</code>.</summary>
      <param name="input">The input buffer to offer.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.OfferInput(System.Byte[],System.Int32,System.Int32)">
      <summary>Offer input from an arbitrary source.</summary>
      <param name="input">The input buffer to offer.</param>
      <param name="inputOff">The offset within the input buffer that input begins.</param>
      <param name="inputLen">The number of bytes of input being offered.</param>
      <remarks>Only allowed in non-blocking mode.<br /><br />
            This method will decrypt and process all records that are fully available. If only part of a record is
            available, the buffer will be retained until the remainder of the record is offered.<br /><br />
            If any records containing application data were processed, the decrypted data can be obtained using
            <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)" />. If any records containing protocol data were processed, a
            response may have been generated. You should always check to see if there is any available output after
            calling this method by calling <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.GetAvailableOutputBytes" />.
            </remarks>
      <exception cref="T:System.IO.IOException">If an error occurs while decrypting or processing a record.</exception>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.Peer"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.PreviewInputRecord(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.PreviewOutputRecord"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.PreviewOutputRecord(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Process13FinishedMessage(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ProcessFinishedMessage(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ProcessMaxFragmentLengthExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.RaiseAlertFatal(System.Int16,System.String,System.Exception)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.RaiseAlertWarning(System.Int16,System.String)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ReadApplicationData(System.Byte[],System.Int32,System.Int32)">
      <summary>Read data from the network.</summary>
      <param name="buffer">The buffer where the data will be copied to.</param>
      <param name="offset">The position where the data will be placed in the buffer.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>The number of bytes read.</returns>
      <remarks>
            The method will return immediately, if there is still some data left in the buffer, or block until some
            application data has been read from the network.
            </remarks>
      <exception cref="T:System.IO.IOException">If something goes wrong during reading data.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ReadApplicationData(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves received application data.</summary>
      <param name="buf">The buffer to hold the application data.</param>
      <param name="off">The start offset in the buffer at which the data is written.</param>
      <param name="len">The maximum number of bytes to read.</param>
      <returns>The total number of bytes copied to the buffer. May be less than the length specified if the
            length was greater than the amount of available data.</returns>
      <remarks>
            Use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.GetAvailableInputBytes" /> to check how much application data is currently available. This
            method functions similarly to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />, except that it never blocks. If
            no data is available, nothing will be copied and zero will be returned.<br /><br />
            Only allowed in non-blocking mode.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves encrypted data to be sent.</summary>
      <param name="buffer">The buffer to hold the encrypted data.</param>
      <param name="offset">The start offset in the buffer at which the data is written.</param>
      <param name="length">The maximum number of bytes to read.</param>
      <returns>The total number of bytes copied to the buffer. May be less than the length specified if the
            length was greater than the amount of available data.</returns>
      <remarks>
            Use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.GetAvailableOutputBytes" /> to check how much encrypted data is currently available. This
            method functions similarly to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />, except that it never blocks. If
            no data is available, nothing will be copied and zero will be returned. Only allowed in non-blocking mode.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Receive13KeyUpdate(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.RefuseRenegotiation">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.ResumeHandshake">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SafePreviewRecordHeader(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SafeReadFullRecord(System.Byte[],System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SafeReadRecord">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SafeWriteRecord(System.Int16,System.Byte[],System.Int32,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SafeWriteRecord(System.Int16,System.ReadOnlySpan{System.Byte})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Send13CertificateMessage(Org.BouncyCastle.Tls.Certificate)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Send13CertificateVerifyMessage(Org.BouncyCastle.Tls.DigitallySigned)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Send13FinishedMessage">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.Send13KeyUpdate(System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SendCertificateMessage(Org.BouncyCastle.Tls.Certificate,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SendChangeCipherSpec">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SendChangeCipherSpecMessage">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SendFinishedMessage">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.SendSupplementalDataMessage(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SupplementalDataEntry})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsProtocol.Stream">
      <summary>The secure bidirectional stream for this connection</summary>
      <remarks>Only allowed in blocking mode.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.WriteApplicationData(System.Byte[],System.Int32,System.Int32)">
      <summary>Write some application data.</summary>
      <param name="buffer">The buffer containing application data to send.</param>
      <param name="offset">The offset at which the application data begins</param>
      <param name="count">The number of bytes of application data.</param>
      <remarks>
            Fragmentation is handled internally. Usable in both blocking/non-blocking modes.<br /><br />
            In blocking mode, the output will be automatically sent via the underlying transport. In non-blocking mode,
            call <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)" /> to get the output bytes to send to the peer.<br /><br />
            This method must not be called until after the initial handshake is complete. Attempting to call it earlier
            will result in an <see cref="T:System.InvalidOperationException" />.
            </remarks>
      <exception cref="T:System.InvalidOperationException">If called before the initial handshake has completed.
            </exception>
      <exception cref="T:System.IO.IOException">If connection is already closed, or for encryption or transport errors.
            </exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsProtocol.WriteApplicationData(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsPsk"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsPsk.Identity"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsPsk.Key"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsPsk.PrfAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsPskExternal"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsPskIdentity">
      <summary>Processor interface for a PSK identity.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskIdentity.GetPsk"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskIdentity.GetPskIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskIdentity.NotifyIdentityHint(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskIdentity.SkipIdentityHint"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsPskIdentityManager">
      <summary>Base interface for an object that can process a PSK identity.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskIdentityManager.GetHint"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskIdentityManager.GetPsk(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsPskKeyExchange">
      <summary>(D)TLS PSK key exchange (RFC 4279).</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentity,Org.BouncyCastle.Tls.TlsDHGroupVerifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsPskKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.TlsPskIdentityManager,Org.BouncyCastle.Tls.Crypto.TlsDHConfig,Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsPskKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.GenerateEphemeralDH(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.GenerateEphemeralECDH(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.GenerateOtherSecret(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.GenerateServerKeyExchange"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_agreement"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_dhConfig"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_dhGroupVerifier"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_ecConfig"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_preMasterSecret"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_psk"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_psk_identity_hint"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_pskIdentity"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_pskIdentityManager"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_serverCredentials"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsPskKeyExchange.m_serverEncryptor"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.ProcessEphemeralDH(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.ProcessEphemeralECDH(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.ProcessServerKeyExchange(System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsPskKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsPskKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsRsaKeyExchange">
      <summary>(D)TLS RSA key exchange.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsRsaKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.GetClientCertificateTypes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsRsaKeyExchange.m_preMasterSecret"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsRsaKeyExchange.m_serverCredentials"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsRsaKeyExchange.m_serverEncryptor"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsRsaKeyExchange.SkipServerCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsServer">
      <summary>Interface describing a TLS server endpoint.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetCertificateRequest">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetCertificateStatus">
      <returns>A <see cref="T:Org.BouncyCastle.Tls.CertificateStatus" /> to be sent to the client (or null for none).</returns>
      <remarks>
            This method will be called (only) if the server included an extension of type "status_request" with empty
            "extension_data" in the extended server hello. See <i>RFC 3546 3.6. Certificate Status Request</i>. If a
            non-null <see cref="T:Org.BouncyCastle.Tls.CertificateStatus" /> is returned, it is sent to the client as a handshake message of
            type "certificate_status".
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetCredentials">
      <summary>Return server credentials to use.</summary>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.TlsCredentials" /> object or null for anonymous key exchanges.</returns>
      <remarks>
            The returned value may be null, or else it MUST implement <em>exactly one</em> of
            <see cref="T:Org.BouncyCastle.Tls.TlsCredentialedAgreement" />, <see cref="T:Org.BouncyCastle.Tls.TlsCredentialedDecryptor" />, or
            <see cref="T:Org.BouncyCastle.Tls.TlsCredentialedSigner" />, depending on the key exchange that was negotiated.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetDHConfig">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetECDHConfig">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetExternalPsk(System.Collections.Generic.IList{Org.BouncyCastle.Tls.PskIdentity})">
      <summary>Return the <see cref="T:Org.BouncyCastle.Tls.TlsPskExternal">external PSK</see> to select from the ClientHello.</summary>
      <param name="identities">an <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Org.BouncyCastle.Tls.PskIdentity" /> instances.</param>
      <returns>The <see cref="T:Org.BouncyCastle.Tls.TlsPskExternal" /> corresponding to the selected identity, or null to not select
            any.</returns>
      <remarks>
            WARNING: EXPERIMENTAL FEATURE, UNSTABLE API
            Note that this will only be called when TLS 1.3 or higher is amongst the offered protocol versions, and one
            or more PSKs are actually offered.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetNewSessionID"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetNewSessionTicket">
      <summary>RFC 5077 3.3. NewSessionTicket Handshake Message.</summary>
      <returns>The ticket.</returns>
      <remarks>
            This method will be called (only) if a NewSessionTicket extension was sent by the server. See <i>RFC 5077
            4. Recommended Ticket Construction</i> for recommended format and protection.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetPskIdentityManager">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetSelectedCipherSuite">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetServerExtensions">
      <returns>(Int32 -&gt; byte[])</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetServerExtensionsForConnection(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <param name="serverExtensions">(Int32 -&gt; byte[])</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetServerSupplementalData">
      <returns>(SupplementalDataEntry)</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetServerVersion">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetSessionToResume(System.Byte[])">
      <summary>Return the specified session, if available.</summary>
      <param name="sessionID">the ID of the session to resume.</param>
      <returns>A <see cref="T:Org.BouncyCastle.Tls.TlsSession" /> with the specified session ID, or null.</returns>
      <remarks>
            Note that the peer's certificate chain for the session (if any) may need to be periodically revalidated.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetSrpLoginParameters">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.GetSupportedGroups">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.Init(Org.BouncyCastle.Tls.TlsServerContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.NotifyClientCertificate(Org.BouncyCastle.Tls.Certificate)">
      <summary>Called by the protocol handler to report the client certificate, only if
            <see cref="M:Org.BouncyCastle.Tls.TlsServer.GetCertificateRequest" /> returned non-null.</summary>
      <param name="clientCertificate">the effective client certificate (may be an empty chain).</param>
      <remarks>
            Note: this method is responsible for certificate verification and validation.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.NotifyClientVersion(Org.BouncyCastle.Tls.ProtocolVersion)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.NotifyFallback(System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.NotifyOfferedCipherSuites(System.Int32[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.NotifySession(Org.BouncyCastle.Tls.TlsSession)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.ProcessClientExtensions(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <param name="clientExtensions">(Int32 -&gt; byte[])</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServer.ProcessClientSupplementalData(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SupplementalDataEntry})">
      <param name="clientSupplementalData">(SupplementalDataEntry)</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsServerCertificate">
      <summary>Server certificate carrier interface.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsServerCertificate.Certificate"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsServerCertificate.CertificateStatus"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsServerContext">
      <summary>Marker interface to distinguish a TLS server context.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsServerProtocol"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.#ctor">
      <summary>Constructor for non-blocking mode.</summary>
      <remarks>
            When data is received, use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.OfferInput(System.Byte[])" /> to provide the received ciphertext,
            then use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)" /> to read the corresponding cleartext.<br /><br />
            Similarly, when data needs to be sent, use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.WriteApplicationData(System.Byte[],System.Int32,System.Int32)" />
            to provide the cleartext, then use <see cref="M:Org.BouncyCastle.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)" /> to get the
            corresponding ciphertext.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.#ctor(System.IO.Stream)">
      <summary>Constructor for blocking mode.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> of data to/from the server.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>Constructor for blocking mode.</summary>
      <param name="input">The <see cref="T:System.IO.Stream" /> of data from the server.</param>
      <param name="output">The <see cref="T:System.IO.Stream" /> of data to the server.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Accept(Org.BouncyCastle.Tls.TlsServer)">
      <summary>Receives a TLS handshake in the role of server.</summary>
      <param name="tlsServer">The <see cref="T:Org.BouncyCastle.Tls.TlsServer" /> to use for the handshake.</param>
      <remarks>
            In blocking mode, this will not return until the handshake is complete. In non-blocking mode, use
            <see cref="M:Org.BouncyCastle.Tls.TlsPeer.NotifyHandshakeComplete" /> to receive a callback when the handshake is complete.
            </remarks>
      <exception cref="T:System.IO.IOException">If in blocking mode and handshake was not successful.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.CleanupHandshake"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsServerProtocol.Context"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.ExpectCertificateVerifyMessage"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Generate13HelloRetryRequest(Org.BouncyCastle.Tls.ClientHello)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Generate13ServerHello(Org.BouncyCastle.Tls.ClientHello,Org.BouncyCastle.Tls.HandshakeMessageInput,System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.GenerateServerHello(Org.BouncyCastle.Tls.ClientHello,Org.BouncyCastle.Tls.HandshakeMessageInput)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Handle13HandshakeMessage(System.Int16,Org.BouncyCastle.Tls.HandshakeMessageInput)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.HandleAlertWarningMessage(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.HandleHandshakeMessage(System.Int16,Org.BouncyCastle.Tls.HandshakeMessageInput)"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsServerProtocol.m_certificateRequest"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsServerProtocol.m_keyExchange"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsServerProtocol.m_offeredCipherSuites"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsServerProtocol.m_tlsServer"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.NotifyClientCertificate(Org.BouncyCastle.Tls.Certificate)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsServerProtocol.Peer"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Receive13ClientCertificate(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Receive13ClientCertificateVerify(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Receive13ClientFinished(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.ReceiveCertificateMessage(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.ReceiveCertificateVerifyMessage(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.ReceiveClientHelloMessage(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.ReceiveClientKeyExchangeMessage(System.IO.MemoryStream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Send13EncryptedExtensionsMessage(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Send13ServerHelloCoda(Org.BouncyCastle.Tls.ServerHello,System.Boolean)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.SendCertificateRequestMessage(Org.BouncyCastle.Tls.CertificateRequest)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.SendCertificateStatusMessage(Org.BouncyCastle.Tls.CertificateStatus)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.SendHelloRequestMessage">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.SendNewSessionTicketMessage(Org.BouncyCastle.Tls.NewSessionTicket)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.SendServerHelloDoneMessage">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.SendServerHelloMessage(Org.BouncyCastle.Tls.ServerHello)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.SendServerKeyExchangeMessage(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Skip13ClientCertificate">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsServerProtocol.Skip13ClientCertificateVerify">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsSession">
      <summary>Base interface for a carrier object for a TLS session.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSession.ExportSessionParameters"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSession.Invalidate"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsSession.IsResumable"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsSession.SessionID"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsSrpConfigVerifier">
      <summary>Interface for verifying SRP config needs to conform to.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpConfigVerifier.Accept(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)">
      <summary>Check whether the given SRP configuration is acceptable for use.</summary>
      <param name="srpConfig">the <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsSrpConfig" /> to check.</param>
      <returns>true if (and only if) the specified configuration is acceptable.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsSrpIdentity">
      <summary>Processor interface for an SRP identity.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpIdentity.GetSrpIdentity"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpIdentity.GetSrpPassword"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsSrpIdentityManager">
      <summary>Base interface for an object that can return login parameters from an SRP identity.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpIdentityManager.GetLoginParameters(System.Byte[])">
      <summary>Lookup the <see cref="T:Org.BouncyCastle.Tls.TlsSrpLoginParameters" /> corresponding to the specified identity.</summary>
      <param name="identity">the SRP identity sent by the connecting client.</param>
      <returns>the <see cref="T:Org.BouncyCastle.Tls.TlsSrpLoginParameters" /> for the specified identity, or else 'simulated' parameters
            if the identity is not recognized. A null value is also allowed, but not recommended.</returns>
      <remarks>
            NOTE: To avoid "identity probing", unknown identities SHOULD be handled as recommended in RFC 5054 2.5.1.3.
            <see cref="T:Org.BouncyCastle.Tls.SimulatedTlsSrpIdentityManager" /> is provided for this purpose.
            </remarks>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsSrpKeyExchange">
      <summary>(D)TLS SRP key exchange (RFC 5054).</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.TlsSrpIdentity,Org.BouncyCastle.Tls.TlsSrpConfigVerifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsSrpKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.#ctor(System.Int32,Org.BouncyCastle.Tls.TlsSrpLoginParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsSrpKeyExchange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.GenerateClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.GeneratePreMasterSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.GenerateServerKeyExchange"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_serverCertificate"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_serverCredentials"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_srpClient"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_srpConfigVerifier"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_srpIdentity"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_srpLoginParameters"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_srpPeerCredentials"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_srpSalt"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpKeyExchange.m_srpServer"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.ProcessClientKeyExchange(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Tls.Certificate)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.ProcessServerCredentials(Org.BouncyCastle.Tls.TlsCredentials)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.ProcessServerKeyExchange(System.IO.Stream)"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsSrpKeyExchange.RequiresServerKeyExchange"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.SkipServerCredentials"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpKeyExchange.ValidatePublicValue(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsSrpLoginParameters"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpLoginParameters.#ctor(System.Byte[],Org.BouncyCastle.Tls.Crypto.TlsSrpConfig,Org.BouncyCastle.Math.BigInteger,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsSrpLoginParameters</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.TlsSrpLoginParameters.Config"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsSrpLoginParameters.Identity"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpLoginParameters.m_identity"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpLoginParameters.m_salt"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpLoginParameters.m_srpConfig"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsSrpLoginParameters.m_verifier"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsSrpLoginParameters.Salt"></member>
    <member name="P:Org.BouncyCastle.Tls.TlsSrpLoginParameters.Verifier"></member>
    <member name="T:Org.BouncyCastle.Tls.TlsSrpUtilities"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsSrpUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.AddSrpExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.CreateSrpExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.GetSrpExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.IsSrpCipherSuite(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.ReadSrpExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.ReadSrpParameter(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrpUtilities.WriteSrpParameter(Org.BouncyCastle.Math.BigInteger,System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsSrtpUtilities">
      <summary>RFC 5764 DTLS Extension to Establish Keys for SRTP.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrtpUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsSrtpUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrtpUtilities.AddUseSrtpExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},Org.BouncyCastle.Tls.UseSrtpData)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrtpUtilities.CreateUseSrtpExtension(Org.BouncyCastle.Tls.UseSrtpData)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrtpUtilities.GetUseSrtpExtension(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]})">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsSrtpUtilities.ReadUseSrtpExtension(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsTimeoutException"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsTimeoutException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsTimeoutException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsTimeoutException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsTimeoutException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsTimeoutException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsTimeoutException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.TlsUtilities"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TlsUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.AddIfSupported(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},Org.BouncyCastle.Tls.Crypto.TlsCrypto,Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.AddIfSupported(System.Collections.Generic.IList{System.Int32},Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.AddIfSupported(System.Collections.Generic.IList{System.Int32},Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.AddToSet``1(System.Collections.Generic.IList{``0},``0)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CalculateExporterSeed(Org.BouncyCastle.Tls.SecurityParameters,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckPeerSigAlgs(Org.BouncyCastle.Tls.TlsContext,Org.BouncyCastle.Tls.Crypto.TlsCertificate[])">
      <summary>Check the signature algorithm for certificates in the peer's CertPath as specified in RFC 5246
            7.4.2, 7.4.4, 7.4.6 and similar rules for earlier TLS versions.</summary>
      <remarks>
            The supplied CertPath should include the trust anchor (its signature algorithm isn't checked, but in the
            general case checking a certificate requires the issuer certificate).
            </remarks>
      <exception cref="T:System.IO.IOException">if any certificate in the CertPath (excepting the trust anchor) has a
            signature algorithm that is not one of the locally supported signature algorithms.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint16(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint16(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint24(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint24(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint32(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint48(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint64(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint8(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint8(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CheckUint8(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ChooseSignatureAndHashAlgorithm(Org.BouncyCastle.Tls.ProtocolVersion,System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ChooseSignatureAndHashAlgorithm(Org.BouncyCastle.Tls.TlsContext,System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.Clone(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.Clone(System.String[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ConstantTimeAreEqual(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ContainsAnySignatureAlgorithm(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ContainsNonAscii(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ContainsNonAscii(System.String)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ContainsSignatureAlgorithm(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.CopyOfRangeExact(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeOpaque16(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeOpaque16(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeOpaque8(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeOpaque8(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeUint16(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeUint16ArrayWithUint8Length(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeUint32(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeUint8(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.DecodeUint8ArrayWithUint8Length(System.Byte[])"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsUtilities.EmptyBytes"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsUtilities.EmptyInts"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsUtilities.EmptyLongs"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsUtilities.EmptyShorts"></member>
    <member name="F:Org.BouncyCastle.Tls.TlsUtilities.EmptyStrings"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeOpaque16(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeOpaque24(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeOpaque8(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeSupportedSignatureAlgorithms(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeUint16(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeUint16ArrayWithUint16Length(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeUint16ArrayWithUint8Length(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeUint24(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeUint32(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeUint8(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeUint8ArrayWithUint8Length(System.Int16[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.EncodeVersion(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GenerateEncryptedPreMasterSecret(Org.BouncyCastle.Tls.TlsContext,Org.BouncyCastle.Tls.Crypto.TlsEncryptor,System.IO.Stream)">
      <summary>Generate a pre_master_secret and send it encrypted to the server.</summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetCipherType(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetCommonCipherSuite13(Org.BouncyCastle.Tls.ProtocolVersion,System.Int32[],System.Int32[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetCommonCipherSuites(System.Int32[],System.Int32[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetDefaultDssSignatureAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetDefaultECDsaSignatureAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetDefaultRsaSignatureAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetDefaultSignatureAlgorithm(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetDefaultSignatureAlgorithms(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetDefaultSupportedSignatureAlgorithms(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetEncryptionAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetEncryptionAlgorithmType(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetExtensionData(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetKeyExchangeAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetKeyExchangeAlgorithms(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetLegacyClientCertType(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetLegacySignatureAlgorithmClient(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetLegacySignatureAlgorithmClientCert(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetLegacySignatureAlgorithmServer(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetLegacySignatureAlgorithmServerCert(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetLegacySupportedSignatureAlgorithms"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetMacAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetMinimumVersion(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetNamedGroupRoles(System.Collections.Generic.IList{System.Int32})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetNamedGroupRoles(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetOidForHashAlgorithm(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetSupportedCipherSuites(Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetSupportedCipherSuites(Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Int32[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetSupportedSignatureAlgorithms(Org.BouncyCastle.Tls.TlsContext,System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.GetUsableSignatureAlgorithms(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.HasExpectedEmptyExtensionData(System.Collections.Generic.IDictionary{System.Int32,System.Byte[]},System.Int32,System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.HasSigningCapability(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ImportSession(System.Byte[],Org.BouncyCastle.Tls.SessionParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsAeadCipherSuite(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsBlockCipherSuite(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsNullOrContainsNull(System.Object[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsNullOrEmpty(System.String)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsNullOrEmpty``1(``0[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsSignatureAlgorithmsExtensionAllowed(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsSsl(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsStreamCipherSuite(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsSupportedCipherSuite(Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsSupportedKeyExchange(Org.BouncyCastle.Tls.Crypto.TlsCrypto,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTimeout(System.Net.Sockets.SocketException)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV10(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV10(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV11(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV11(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV12(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV12(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV13(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsTlsV13(Org.BouncyCastle.Tls.TlsContext)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidCipherSuiteForSignatureAlgorithms(System.Int32,System.Collections.Generic.IList{System.Int16})">
      <returns>Whether a server can select the specified cipher suite given the available signature algorithms
            for ServerKeyExchange.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidSignatureSchemeForServerKeyExchange(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint16(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint16(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint24(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint24(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint32(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint48(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint64(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint8(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint8(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidUint8(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.IsValidVersionForCipherSuite(System.Int32,Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ParseSupportedSignatureAlgorithms(System.IO.Stream)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.Prf(Org.BouncyCastle.Tls.SecurityParameters,Org.BouncyCastle.Tls.Crypto.TlsSecret,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.Prf(Org.BouncyCastle.Tls.SecurityParameters,Org.BouncyCastle.Tls.Crypto.TlsSecret,System.String,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadAllOrNothing(System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadAsn1Object(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadFully(System.Byte[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadFully(System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadFully(System.Span{System.Byte},System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadInt32(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadOpaque16(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadOpaque16(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadOpaque24(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadOpaque24(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadOpaque8(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadOpaque8(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadOpaque8(System.IO.Stream,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint16(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint16(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint16Array(System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint24(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint24(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint32(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint32(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint48(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint48(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint8(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint8(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint8(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint8Array(System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadUint8ArrayWithUint8Length(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadVersion(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.ReadVersion(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.RequireDerEncoding(Org.BouncyCastle.Asn1.Asn1Encodable,System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.VectorOfOne``1(``0)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.VerifySupportedSignatureAlgorithm(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm},Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteGmtUnixTime(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteOpaque16(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteOpaque16(System.Byte[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteOpaque24(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteOpaque24(System.Byte[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteOpaque8(System.Byte[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteOpaque8(System.Byte[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteOpaque8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16(System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16(System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16(System.Int32,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16Array(System.Int32[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16Array(System.Int32[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16ArrayWithUint16Length(System.Int32[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16ArrayWithUint16Length(System.Int32[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint16ArrayWithUint8Length(System.Int32[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint24(System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint24(System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint32(System.Int64,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint32(System.Int64,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint48(System.Int64,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint48(System.Int64,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint64(System.Int64,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint64(System.Int64,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8(System.Int16,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8(System.Int16,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8(System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8(System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8(System.Int32,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8Array(System.Int16[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8Array(System.Int16[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8ArrayWithUint8Length(System.Int16[],System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteUint8ArrayWithUint8Length(System.Int16[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteVersion(Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.TlsUtilities.WriteVersion(Org.BouncyCastle.Tls.ProtocolVersion,System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Tls.TrustedAuthority"></member>
    <member name="M:Org.BouncyCastle.Tls.TrustedAuthority.#ctor(System.Int16,System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.TrustedAuthority</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.TrustedAuthority.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.TrustedAuthority" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.TrustedAuthority.GetCertSha1Hash"></member>
    <member name="M:Org.BouncyCastle.Tls.TrustedAuthority.GetKeySha1Hash"></member>
    <member name="P:Org.BouncyCastle.Tls.TrustedAuthority.Identifier"></member>
    <member name="P:Org.BouncyCastle.Tls.TrustedAuthority.IdentifierType"></member>
    <member name="M:Org.BouncyCastle.Tls.TrustedAuthority.Parse(System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.TrustedAuthority" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.TrustedAuthority" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.TrustedAuthority.X509Name"></member>
    <member name="T:Org.BouncyCastle.Tls.UrlAndHash">
      <summary>RFC 6066 5.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.UrlAndHash.#ctor(System.String,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.UrlAndHash</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.UrlAndHash.Encode(System.IO.Stream)">
      <summary>Encode this <see cref="T:Org.BouncyCastle.Tls.UrlAndHash" /> to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="output">the <see cref="T:System.IO.Stream" /> to encode to.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.UrlAndHash.Parse(Org.BouncyCastle.Tls.TlsContext,System.IO.Stream)">
      <summary>Parse a <see cref="T:Org.BouncyCastle.Tls.UrlAndHash" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="context">the <see cref="T:Org.BouncyCastle.Tls.TlsContext" /> of the current connection.</param>
      <param name="input">the <see cref="T:System.IO.Stream" /> to parse from.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.UrlAndHash" /> object.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.UrlAndHash.Sha1Hash"></member>
    <member name="P:Org.BouncyCastle.Tls.UrlAndHash.Url"></member>
    <member name="T:Org.BouncyCastle.Tls.UserMappingType">
      <summary>RFC 4681</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.UserMappingType.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.UserMappingType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.UserMappingType.upn_domain_hint"></member>
    <member name="T:Org.BouncyCastle.Tls.UseSrtpData">
      <summary>RFC 5764 4.1.1</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.UseSrtpData.#ctor(System.Int32[],System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.UseSrtpData</parameter>
          </include>
        </markup>
      </summary>
      <param name="protectionProfiles">see <see cref="T:Org.BouncyCastle.Tls.SrtpProtectionProfile" /> for valid constants.</param>
      <param name="mki">valid lengths from 0 to 255.</param>
    </member>
    <member name="P:Org.BouncyCastle.Tls.UseSrtpData.Mki">
      <returns>valid lengths from 0 to 255.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.UseSrtpData.ProtectionProfiles">
      <returns>see <see cref="T:Org.BouncyCastle.Tls.SrtpProtectionProfile" /> for valid constants.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.md5"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.sha1"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.sha224"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm.sm3"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.dsa"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.ecdsa"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.ecdsa_brainpoolP256r1tls13_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.ecdsa_brainpoolP384r1tls13_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.ecdsa_brainpoolP512r1tls13_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.ed25519"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.ed448"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.gostr34102012_256"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.gostr34102012_512"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.rsa"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.rsa_pss_pss_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.rsa_pss_pss_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.rsa_pss_pss_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.rsa_pss_rsae_sha256"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.rsa_pss_rsae_sha384"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.rsa_pss_rsae_sha512"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.CryptoSignatureAlgorithm.sm2"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.DHGroup">
      <summary>Carrier class for Diffie-Hellman group parameters.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.DHGroup.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,System.Int32)">
      <summary>Base constructor with the prime factor of (p - 1).</summary>
      <param name="p">the prime modulus.</param>
      <param name="q">specifies the prime factor of (p - 1).</param>
      <param name="g">the base generator.</param>
      <param name="l"></param>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.DHGroup.G"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.DHGroup.L"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.DHGroup.P"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.DHGroup.Q"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.DHStandardGroups">
      <summary>Standard Diffie-Hellman groups from various IETF specifications.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.DHStandardGroups</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc2409_1024"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc2409_768"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc3526_1536"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc3526_2048"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc3526_3072"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc3526_4096"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc3526_6144"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc3526_8192"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc4306_1024"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc4306_768"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc5996_1024"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc5996_768"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc7919_ffdhe2048"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc7919_ffdhe3072"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc7919_ffdhe4096"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc7919_ffdhe6144"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.DHStandardGroups.rfc7919_ffdhe8192"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Srp6Group">
      <summary>Carrier class for SRP-6 group parameters.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Srp6Group.#ctor(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)">
      <summary>Base constructor.</summary>
      <param name="n">the n value.</param>
      <param name="g">the g value.</param>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Srp6Group.G"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Srp6Group.N"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups">
      <summary>A selection of standard groups for SRP-6.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.rfc5054_1024"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.rfc5054_1536"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.rfc5054_2048"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.rfc5054_3072"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.rfc5054_4096"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.rfc5054_6144"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Srp6StandardGroups.rfc5054_8192"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Tls13Verifier"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Tls13Verifier.Stream">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Tls13Verifier.VerifySignature(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsAgreement">
      <summary>Base interface for ephemeral key agreement calculator.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsAgreement.CalculateSecret">
      <summary>Calculate the agreed secret based on the calculator's current state.</summary>
      <returns>the calculated secret.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsAgreement.GenerateEphemeral">
      <summary>Generate an ephemeral key pair, returning the encoding of the public key.</summary>
      <returns>a byte encoding of the public key.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsAgreement.ReceivePeerValue(System.Byte[])">
      <summary>Pass in the public key for the peer to the agreement calculator.</summary>
      <param name="peerValue">a byte encoding of the peer public key.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCertificate">
      <summary>Interface providing the functional representation of a single X.509 certificate.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.CheckUsageInRole(System.Int32)">
      <param name="tlsCertificateRole">
        <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole" />
      </param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.CreateEncryptor(System.Int32)">
      <summary>Return an encryptor based on the public key in this certificate.</summary>
      <param name="tlsCertificateRole">
        <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole" />
      </param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsEncryptor" /> based on this certificate's public key.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.CreateVerifier(System.Int16)">
      <param name="signatureAlgorithm">
        <see cref="T:Org.BouncyCastle.Tls.SignatureAlgorithm" />
      </param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.CreateVerifier(System.Int32)">
      <param name="signatureScheme">
        <see cref="T:Org.BouncyCastle.Tls.SignatureScheme" />
      </param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.GetEncoded">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.GetExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.GetLegacySignatureAlgorithm">
      <returns>
        <see cref="T:Org.BouncyCastle.Tls.SignatureAlgorithm" />
      </returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.GetSigAlgParams">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCertificate.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCertificate.SigAlgOid">
      <returns>the OID of this certificate's 'signatureAlgorithm', as a string.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.SupportsSignatureAlgorithm(System.Int16)">
      <param name="signatureAlgorithm">
        <see cref="T:Org.BouncyCastle.Tls.SignatureAlgorithm" />
      </param>
      <returns>true if (and only if) this certificate can be used to verify the given signature algorithm.
            </returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificate.SupportsSignatureAlgorithmCA(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsCertificateRole</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole.DH"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole.ECDH"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole.RsaEncryption"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsCertificateRole.Sm2Encryption"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCipher">
      <summary>Base interface for a TLS bulk cipher.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.DecodeCiphertext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Int32,System.Int32)">
      <summary>Decode the passed in ciphertext using the current bulk cipher.</summary>
      <param name="seqNo">sequence number of the message represented by ciphertext.</param>
      <param name="recordType">content type used in the record for this message.</param>
      <param name="recordVersion">
        <see cref="T:Org.BouncyCastle.Tls.ProtocolVersion" /> used for the record.</param>
      <param name="ciphertext">array holding input ciphertext to the cipher.</param>
      <param name="offset">offset into input array the ciphertext starts at.</param>
      <param name="len">length of the ciphertext in the array.</param>
      <returns>A <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsDecodeResult" /> containing the result of decoding.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Encode the passed in plaintext using the current bulk cipher.</summary>
      <param name="seqNo">sequence number of the message represented by plaintext.</param>
      <param name="contentType">content type of the message represented by plaintext.</param>
      <param name="recordVersion">
        <see cref="T:Org.BouncyCastle.Tls.ProtocolVersion" /> used for the record.</param>
      <param name="headerAllocation">extra bytes to allocate at start of returned byte array.</param>
      <param name="plaintext">array holding input plaintext to the cipher.</param>
      <param name="offset">offset into input array the plaintext starts at.</param>
      <param name="len">length of the plaintext in the array.</param>
      <returns>A <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsEncodeResult" /> containing the result of encoding (after 'headerAllocation' unused
            bytes).</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.GetCiphertextDecodeLimit(System.Int32)">
      <summary>Return the maximum input size for a ciphertext given a maximum output size for the plaintext of
            plaintextLimit bytes.</summary>
      <param name="plaintextLimit">the maximum output size for the plaintext.</param>
      <returns>the maximum input size of the ciphertext for plaintextlimit bytes of output.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.GetCiphertextEncodeLimit(System.Int32,System.Int32)">
      <summary>Return the maximum output size for a ciphertext given an actual input plaintext size of
            plaintextLength bytes and a maximum input plaintext size of plaintextLimit bytes.</summary>
      <param name="plaintextLength">the actual input size for the plaintext.</param>
      <param name="plaintextLimit">the maximum input size for the plaintext.</param>
      <returns>the maximum output size of the ciphertext for plaintextlimit bytes of input.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.GetPlaintextLimit(System.Int32)">
      <summary>Return the maximum size for the plaintext given ciphertextlimit bytes of ciphertext.</summary>
      <param name="ciphertextLimit">the maximum number of bytes of ciphertext.</param>
      <returns>the maximum size of the plaintext for ciphertextlimit bytes of input.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.RekeyDecoder">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipher.RekeyEncoder">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCipher.UsesOpaqueRecordType"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCipherExt"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipherExt.GetPlaintextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCipherExt.GetPlaintextEncodeLimit(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCrypto">
      <summary>Service and object creation interface for the primitive types and services that are associated with
            cryptography in the API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.AdoptSecret(Org.BouncyCastle.Tls.Crypto.TlsSecret)">
      <summary>Adopt the passed in secret, creating a new copy of it.</summary>
      <param name="secret">the secret to make a copy of.</param>
      <returns>a TlsSecret based on the original secret.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateCertificate(System.Byte[])">
      <summary>Create a TlsCertificate from an ASN.1 binary encoding of an X.509 certificate.</summary>
      <param name="encoding">DER/BER encoding of the certificate of interest.</param>
      <returns>a TlsCertificate.</returns>
      <exception cref="T:System.IO.IOException">if there is an issue on decoding or constructing the certificate.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateCertificate(System.Int16,System.Byte[])">
      <summary>Create a TlsCertificate from an ASN.1 binary encoding of a certificate.</summary>
      <param name="type">Certificate type as per IANA TLS Certificate Types registry.</param>
      <param name="encoding">DER/BER encoding of the certificate of interest.</param>
      <returns>a TlsCertificate.</returns>
      <exception cref="T:System.IO.IOException">if there is an issue on decoding or constructing the certificate.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateCipher(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)">
      <summary>Create a cipher for the specified encryption and MAC algorithms.</summary>
      <param name="cryptoParams">context specific parameters.</param>
      <param name="encryptionAlgorithm">the encryption algorithm to be employed by the cipher.</param>
      <param name="macAlgorithm">the MAC algorithm to be employed by the cipher.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsCipher" /> implementing the encryption and MAC algorithms.</returns>
      <remarks>
            See enumeration classes <see cref="T:Org.BouncyCastle.Tls.EncryptionAlgorithm" />, <see cref="T:Org.BouncyCastle.Tls.MacAlgorithm" /> for appropriate
            argument values.
            </remarks>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateDHDomain(Org.BouncyCastle.Tls.Crypto.TlsDHConfig)">
      <summary>Create a domain object supporting the domain parameters described in dhConfig.</summary>
      <param name="dhConfig">the config describing the DH parameters to use.</param>
      <returns>a TlsDHDomain supporting the parameters in dhConfig.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateECDomain(Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <summary>Create a domain object supporting the domain parameters described in ecConfig.</summary>
      <param name="ecConfig">the config describing the EC parameters to use.</param>
      <returns>a TlsECDomain supporting the parameters in ecConfig.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateHash(System.Int32)">
      <summary>Create a suitable hash for the hash algorithm identifier passed in.</summary>
      <param name="cryptoHashAlgorithm">the hash algorithm the hash needs to implement.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsHash" />.</returns>
      <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm" /> for appropriate argument values.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateHmac(System.Int32)">
      <summary>Create a suitable HMAC for the MAC algorithm identifier passed in.</summary>
      <param name="macAlgorithm">the MAC algorithm the HMAC needs to match.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsHmac" />.</returns>
      <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle.Tls.MacAlgorithm" /> for appropriate argument values.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateHmacForHash(System.Int32)">
      <summary>Create a suitable HMAC using the hash algorithm identifier passed in.</summary>
      <param name="cryptoHashAlgorithm">the hash algorithm the HMAC should use.</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsHmac" />.</returns>
      <remarks>
            See enumeration class <see cref="T:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm" /> for appropriate argument values.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateNonceGenerator(System.Byte[])">
      <summary>Create a nonce generator.</summary>
      <param name="additionalSeedMaterial">context-specific seed material</param>
      <returns>a <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator" />.</returns>
      <remarks>
            Each call should construct a new generator, and the generator should be returned from this call only after
            automatically seeding from this <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsCrypto" />'s entropy source, and from the provided additional
            seed material. The output of each returned generator must be completely independent of the others.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateNonceGenerator(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateSecret(System.Byte[])">
      <summary>Create a TlsSecret object based on provided data.</summary>
      <param name="data">the data to base the TlsSecret on.</param>
      <returns>a TlsSecret based on the provided data.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateSrp6Client(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)">
      <summary>Create an SRP-6 client.</summary>
      <param name="srpConfig">client config.</param>
      <returns>an initialised SRP6 client object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateSrp6Server(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig,Org.BouncyCastle.Math.BigInteger)">
      <summary>Create an SRP-6 server.</summary>
      <param name="srpConfig">server config.</param>
      <param name="srpVerifier">the SRP6 verifier value.</param>
      <returns>an initialised SRP6 server object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.CreateSrp6VerifierGenerator(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)">
      <summary>Create an SRP-6 verifier generator.</summary>
      <param name="srpConfig">generator config.</param>
      <returns>an initialized SRP6 verifier generator.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.GenerateRsaPreMasterSecret(Org.BouncyCastle.Tls.ProtocolVersion)">
      <summary>Create a TlsSecret object containing a randomly-generated RSA PreMasterSecret</summary>
      <param name="clientVersion">the client version to place in the first 2 bytes</param>
      <returns>a TlsSecret containing the PreMasterSecret.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasAnyStreamVerifiers(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})">
      <summary>Return true if this TlsCrypto would use a stream verifier for any of the passed in algorithms.
            </summary>
      <param name="signatureAndHashAlgorithms">A <see cref="T:System.Collections.Generic.IList`1">list</see> of
            <see cref="T:Org.BouncyCastle.Tls.SignatureAndHashAlgorithm" /> values.</param>
      <returns>true if this instance would use a stream verifier for any of the passed in algorithms, otherwise
            false.</returns>
      <remarks>This method is only relevant to handshakes negotiating (D)TLS 1.2.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasAnyStreamVerifiersLegacy(System.Int16[])">
      <summary>Return true if this TlsCrypto would use a stream verifier for any of the passed in algorithms.
            </summary>
      <param name="clientCertificateTypes">An array of <see cref="T:Org.BouncyCastle.Tls.ClientCertificateType" /> values.</param>
      <returns>true if this instance would use a stream verifier for any of the passed in algorithms, otherwise
            false.</returns>
      <remarks>This method is only relevant to handshakes negotiating (D)TLS versions older than 1.2.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasCryptoHashAlgorithm(System.Int32)">
      <summary>Return true if this TlsCrypto can support the passed in hash algorithm.</summary>
      <param name="cryptoHashAlgorithm">the algorithm of interest.</param>
      <returns>true if cryptoHashAlgorithm is supported, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasCryptoSignatureAlgorithm(System.Int32)">
      <summary>Return true if this TlsCrypto can support the passed in signature algorithm (not necessarily in
            combination with EVERY hash algorithm).</summary>
      <param name="cryptoSignatureAlgorithm">the algorithm of interest.</param>
      <returns>true if cryptoSignatureAlgorithm is supported, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasDHAgreement">
      <summary>Return true if this TlsCrypto can support DH key agreement.</summary>
      <returns>true if this instance can support DH key agreement, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasECDHAgreement">
      <summary>Return true if this TlsCrypto can support ECDH key agreement.</summary>
      <returns>true if this instance can support ECDH key agreement, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasEncryptionAlgorithm(System.Int32)">
      <summary>Return true if this TlsCrypto can support the passed in block/stream encryption algorithm.
            </summary>
      <param name="encryptionAlgorithm">the algorithm of interest.</param>
      <returns>true if encryptionAlgorithm is supported, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasHkdfAlgorithm(System.Int32)">
      <summary>Return true if this TlsCrypto can support HKDF with the passed in hash algorithm.</summary>
      <param name="cryptoHashAlgorithm">the algorithm of interest.</param>
      <returns>true if HKDF is supported with cryptoHashAlgorithm, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasMacAlgorithm(System.Int32)">
      <summary>Return true if this TlsCrypto can support the passed in MAC algorithm.</summary>
      <param name="macAlgorithm">the algorithm of interest.</param>
      <returns>true if macAlgorithm is supported, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasNamedGroup(System.Int32)">
      <summary>Return true if this TlsCrypto supports the passed in <see cref="T:Org.BouncyCastle.Tls.NamedGroup">named group</see>
            value.</summary>
      <returns>true if this instance supports the passed in <see cref="T:Org.BouncyCastle.Tls.NamedGroup">named group</see> value.
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasRsaEncryption">
      <summary>Return true if this TlsCrypto can support RSA encryption/decryption.</summary>
      <returns>true if this instance can support RSA encryption/decryption, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasSignatureAlgorithm(System.Int16)">
      <summary>Return true if this TlsCrypto can support the passed in signature algorithm (not necessarily in
            combination with EVERY hash algorithm).</summary>
      <returns>true if signatureAlgorithm is supported, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasSignatureAndHashAlgorithm(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)">
      <summary>Return true if this TlsCrypto can support the passed in signature algorithm.</summary>
      <param name="sigAndHashAlgorithm">the algorithm of interest.</param>
      <returns>true if sigAndHashAlgorithm is supported, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasSignatureScheme(System.Int32)">
      <summary>Return true if this TlsCrypto can support the passed in signature scheme.</summary>
      <param name="signatureScheme">the scheme of interest.</param>
      <returns>true if signatureScheme is supported, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HasSrpAuthentication">
      <summary>Return true if this TlsCrypto can support SRP authentication.</summary>
      <returns>true if this instance can support SRP authentication, false otherwise.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCrypto.HkdfInit(System.Int32)">
      <summary>Setup an initial "secret" for a chain of HKDF calls (RFC 5869), containing a string of HashLen
            zeroes.</summary>
      <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm" /> for values.</param>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCrypto.SecureRandom">
      <summary>Return the primary (safest) SecureRandom for this crypto.</summary>
      <returns>a SecureRandom suitable for key generation.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCryptoException">
      <summary>Basic exception class for crypto services to pass back a cause.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsCryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsCryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsCryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsCryptoException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters">
      <summary>Carrier class for context-related parameters needed for creating secrets and ciphers.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters.#ctor(Org.BouncyCastle.Tls.TlsContext)">
      <summary>Base constructor.</summary>
      <param name="context">the context for this parameters object.</param>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters.ClientVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters.IsServer"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters.NonceGenerator"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters.RsaPreMasterSecretVersion"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters.SecurityParameters"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters.ServerVersion"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.GetHash(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.GetHashForHmac(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.GetHashForPrf(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.GetHashInternalSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.GetHashOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.GetOidForHash(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.GetSignature(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.HkdfExpandLabel(Org.BouncyCastle.Tls.Crypto.TlsSecret,System.Int32,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsCryptoUtilities.HkdfExpandLabel(Org.BouncyCastle.Tls.Crypto.TlsSecret,System.Int32,System.String,System.Byte[],System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsDecodeResult"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsDecodeResult.#ctor(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsDecodeResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsDecodeResult.buf"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsDecodeResult.contentType"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsDecodeResult.len"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsDecodeResult.off"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsDHConfig">
      <summary>Basic config for Diffie-Hellman.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.#ctor(Org.BouncyCastle.Tls.Crypto.DHGroup)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsDHConfig</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.#ctor(System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsDHConfig</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.ExplicitGroup"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.IsPadded"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.m_explicitGroup"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.m_namedGroup"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.m_padded"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsDHConfig.NamedGroup"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsDHDomain">
      <summary>Domain interface to service factory for creating Diffie-Hellman operators.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsDHDomain.CreateDH">
      <summary>Return an agreement operator suitable for ephemeral Diffie-Hellman.</summary>
      <returns>a key agreement operator.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsECConfig">
      <summary>Carrier class for Elliptic Curve parameter configuration.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsECConfig.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsECConfig</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsECConfig.m_namedGroup"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsECConfig.NamedGroup">
      <summary>Return the group used.</summary>
      <returns>the <see cref="P:Org.BouncyCastle.Tls.Crypto.TlsECConfig.NamedGroup">named group</see> used.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsECDomain">
      <summary>Domain interface to service factory for creating Elliptic-Curve (EC) based operators.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsECDomain.CreateECDH">
      <summary>Return an agreement operator suitable for ephemeral EC Diffie-Hellman.</summary>
      <returns>a key agreement operator.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsEncodeResult"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsEncodeResult.#ctor(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsEncodeResult</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsEncodeResult.buf"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsEncodeResult.len"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsEncodeResult.off"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsEncodeResult.recordType"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsEncryptor">
      <summary>Base interface for an encryptor.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsEncryptor.Encrypt(System.Byte[],System.Int32,System.Int32)">
      <summary>Encrypt data from the passed in input array.</summary>
      <param name="input">byte array containing the input data.</param>
      <param name="inOff">offset into input where the data starts.</param>
      <param name="length">the length of the data to encrypt.</param>
      <returns>the encrypted data.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsHash">
      <summary>Interface for message digest, or hash, services.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHash.CalculateHash">
      <summary>Return calculated hash for any input passed in.</summary>
      <returns>the hash value.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHash.CloneHash">
      <summary>Return a clone of this hash object representing its current state.</summary>
      <returns>a clone of the current hash.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHash.Reset">
      <summary>Reset the hash underlying this service.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHash.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>Update the hash with the passed in input.</summary>
      <param name="input">input array containing the data.</param>
      <param name="inOff">offset into the input array the input starts at.</param>
      <param name="length">the length of the input data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHash.Update(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsHashSink"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHashSink.#ctor(Org.BouncyCastle.Tls.Crypto.TlsHash)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsHashSink</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsHashSink.Hash"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHashSink.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHashSink.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsHashSink.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsHmac">
      <summary>Interface for MAC services based on HMAC.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsHmac.InternalBlockSize">
      <summary>Return the internal block size for the message digest underlying this HMAC service.</summary>
      <returns>the internal block size for the digest (in bytes).</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsMac">
      <summary>Interface for MAC services.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMac.CalculateMac">
      <summary>Return calculated MAC for any input passed in.</summary>
      <returns>the MAC value.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMac.CalculateMac(System.Byte[],System.Int32)">
      <summary>Write the calculated MAC to an output buffer.</summary>
      <param name="output">output array to write the MAC to.</param>
      <param name="outOff">offset into the output array to write the MAC to.</param>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsMac.MacLength">
      <summary>Return the length of the MAC generated by this service.</summary>
      <returns>the MAC length.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMac.Reset">
      <summary>Reset the MAC underlying this service.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMac.SetKey(System.Byte[],System.Int32,System.Int32)">
      <summary>Set the key to be used by the MAC implementation supporting this service.</summary>
      <param name="key">array holding the MAC key.</param>
      <param name="keyOff">offset into the array the key starts at.</param>
      <param name="keyLen">length of the key in the array.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMac.SetKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMac.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>Update the MAC with the passed in input.</summary>
      <param name="input">input array containing the data.</param>
      <param name="inOff">offset into the input array the input starts at.</param>
      <param name="length">the length of the input data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMac.Update(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsMacSink"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMacSink.#ctor(Org.BouncyCastle.Tls.Crypto.TlsMac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsMacSink</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsMacSink.Mac"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMacSink.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMacSink.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsMacSink.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator.GenerateNonce(System.Int32)">
      <summary>Generate a nonce byte[] string.</summary>
      <param name="size">the length, in bytes, of the nonce to generate.</param>
      <returns>the nonce value.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher">
      <summary>The cipher for TLS_NULL_WITH_NULL_NULL.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.DecodeCiphertext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.GetCiphertextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.GetCiphertextEncodeLimit(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.GetPlaintextLimit(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.Instance"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.RekeyDecoder"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.RekeyEncoder"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher.UsesOpaqueRecordType"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsSecret">
      <summary>Interface supporting the generation of key material and other SSL/TLS secret values from PRFs.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.CalculateHmac(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Calculate an HMAC with this secret's data as the key.</summary>
      <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm" /> for values.</param>
      <param name="buf">array containing the input data.</param>
      <param name="off">offset into the input array the input starts at.</param>
      <param name="len">the length of the input data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.DeriveUsingPrf(System.Int32,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.DeriveUsingPrf(System.Int32,System.String,System.Byte[],System.Int32)">
      <summary>Return a new secret based on applying a PRF to this one.</summary>
      <param name="prfAlgorithm">PRF algorithm to use.</param>
      <param name="label">the label details.</param>
      <param name="seed">the seed details.</param>
      <param name="length">the size (in bytes) of the secret to generate.</param>
      <returns>the new secret.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.Destroy">
      <summary>Destroy the internal state of the secret.</summary>
      <remarks>
            After this call, any attempt to use the <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsSecret" /> will result in an
            <see cref="T:System.InvalidOperationException" /> being thrown.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.Encrypt(Org.BouncyCastle.Tls.Crypto.TlsEncryptor)">
      <summary>Return an encrypted copy of the data this secret is based on.</summary>
      <param name="encryptor">the encryptor to use for protecting the internal data.</param>
      <returns>an encrypted copy of this secret's internal data.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.Extract">
      <summary>Return the internal data from this secret.</summary>
      <returns>the secret's internal data.</returns>
      <remarks>
            The <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsSecret" /> does not keep a copy of the data. After this call, any attempt to use the
            <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsSecret" /> will result in an <see cref="T:System.InvalidOperationException" /> being thrown.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.ExtractTo(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.HkdfExpand(System.Int32,System.Byte[],System.Int32)">
      <summary>RFC 5869 HKDF-Expand function, with this secret's data as the pseudo-random key ('prk').</summary>
      <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm" /> for values.</param>
      <param name="info">optional context and application specific information (can be zero-length).</param>
      <param name="length">length of output keying material in octets.</param>
      <returns> output keying material (of 'length' octets).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.HkdfExpand(System.Int32,System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.HkdfExtract(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsSecret)">
      <summary>RFC 5869 HKDF-Extract function, with this secret's data as the 'salt'.</summary>
      <param name="cryptoHashAlgorithm">the hash algorithm to instantiate HMAC with. See
            <see cref="T:Org.BouncyCastle.Tls.Crypto.CryptoHashAlgorithm" /> for values.</param>
      <param name="ikm">input keying material.</param>
      <returns>a pseudo-random key (of HashLen octets).</returns>
      <remarks>
            The <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsSecret" /> does not keep a copy of the data. After this call, any attempt to use
            the <see cref="T:Org.BouncyCastle.Tls.Crypto.TlsSecret" /> will result in an <see cref="T:System.InvalidOperationException" /> being thrown.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSecret.IsAlive"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsSecret.Length"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsSigner">
      <summary>Base interface for a TLS signer that works on raw message digests.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSigner.GenerateRawSignature(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm,System.Byte[])">
      <summary>Generate an encoded signature based on the passed in hash.</summary>
      <param name="algorithm">the signature algorithm to use.</param>
      <param name="hash">the hash calculated for the signature.</param>
      <returns>an encoded signature.</returns>
      <exception cref="T:System.IO.IOException">in case of an exception processing the hash.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSigner.GetStreamSigner(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsSrp6Client">
      <summary>Basic interface for an SRP-6 client implementation.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrp6Client.CalculateSecret(Org.BouncyCastle.Math.BigInteger)">
      <summary>Generates the secret S given the server's credentials</summary>
      <param name="serverB">The server's credentials</param>
      <returns>Client's verification message for the server</returns>
      <exception cref="T:System.IO.IOException">If server's credentials are invalid</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Generates client's credentials given the client's salt, identity and password</summary>
      <param name="salt">The salt used in the client's verifier.</param>
      <param name="identity">The user's identity (eg. username)</param>
      <param name="password">The user's password</param>
      <returns>Client's public value to send to server</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsSrp6Server">
      <summary>Basic interface for an SRP-6 server implementation.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrp6Server.CalculateSecret(Org.BouncyCastle.Math.BigInteger)">
      <summary>Processes the client's credentials. If valid the shared secret is generated and returned.
            </summary>
      <param name="clientA">The client's credentials.</param>
      <returns>A shared secret <see cref="T:Org.BouncyCastle.Math.BigInteger" />.</returns>
      <exception cref="T:System.IO.IOException">If client's credentials are invalid.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrp6Server.GenerateServerCredentials">
      <summary>Generates the server's credentials that are to be sent to the client.</summary>
      <returns>The server's public value to the client</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsSrp6VerifierGenerator">
      <summary>Base interface for a generator for SRP-6 verifiers.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Creates a new SRP-6 verifier value.</summary>
      <param name="salt">The salt to use, generally should be large and random</param>
      <param name="identity">The user's identifying information (eg. username)</param>
      <param name="password">The user's password</param>
      <returns>A new verifier for use in future SRP authentication</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsSrpConfig">
      <summary>Basic config for SRP.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrpConfig.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.TlsSrpConfig</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrpConfig.GetExplicitNG">
      <summary>Return the (N, g) values used in SRP-6.</summary>
      <returns>(N, g) as a BigInteger array (N=[0], g=[1]).</returns>
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.TlsSrpConfig.m_explicitNG"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsSrpConfig.SetExplicitNG(Org.BouncyCastle.Math.BigInteger[])">
      <summary>Set the (N, g) values used for SRP-6.</summary>
      <param name="explicitNG">(N, g) as a BigInteger array (N=[0], g=[1]).</param>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsStreamSigner"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsStreamSigner.GetSignature">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsStreamSigner.Stream">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier.IsVerified">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier.Stream">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.TlsVerifier">
      <summary>Base interface for a TLS verifier that works with signatures and either raw message digests, or entire
            messages.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsVerifier.GetStreamVerifier(Org.BouncyCastle.Tls.DigitallySigned)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.TlsVerifier.VerifyRawSignature(Org.BouncyCastle.Tls.DigitallySigned,System.Byte[])">
      <summary>Return true if the passed in signature and hash represent a real signature.</summary>
      <param name="digitallySigned">the signature object containing the signature to be verified.</param>
      <param name="hash">the hash calculated for the signature.</param>
      <returns>true if signature verifies, false otherwise.</returns>
      <exception cref="T:System.IO.IOException">in case of an exception verifying signature.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto">
      <summary>Base class for a TlsCrypto implementation that provides some needed methods from elsewhere in the impl
            package.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.AdoptSecret(Org.BouncyCastle.Tls.Crypto.TlsSecret)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateCertificate(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateCertificate(System.Int16,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateCipher(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateDHDomain(Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateECDomain(Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateHash(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateHmac(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateHmacForHash(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateNonceGenerator(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateNonceGenerator(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateSecret(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateSrp6Client(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateSrp6Server(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.CreateSrp6VerifierGenerator(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.GenerateRsaPreMasterSecret(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasAnyStreamVerifiers(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasAnyStreamVerifiersLegacy(System.Int16[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasCryptoHashAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasCryptoSignatureAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasDHAgreement"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasECDHAgreement"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasEncryptionAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasHkdfAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasMacAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasNamedGroup(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasRsaEncryption"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasSignatureAlgorithm(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasSignatureAndHashAlgorithm(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasSignatureScheme(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HasSrpAuthentication"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.HkdfInit(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto.SecureRandom"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret">
      <summary>Base class for a TlsSecret implementation which captures common code and fields.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.#ctor(System.Byte[])">
      <summary>Base constructor.</summary>
      <param name="data">the byte[] making up the secret value.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.CalculateHmac(System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.CheckAlive"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.CopyData(Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.Crypto"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.DeriveUsingPrf(System.Int32,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.DeriveUsingPrf(System.Int32,System.String,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.Destroy"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.Encrypt(Org.BouncyCastle.Tls.Crypto.TlsEncryptor)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.Extract"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.ExtractTo(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.HkdfExpand(System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.HkdfExpand(System.Int32,System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.HkdfExtract(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsSecret)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.IsAlive"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.Length"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret.m_data"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.LegacyTls13Verifier"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.LegacyTls13Verifier.#ctor(System.Int32,Org.BouncyCastle.Tls.Crypto.Tls13Verifier)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.LegacyTls13Verifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.LegacyTls13Verifier.GetStreamVerifier(Org.BouncyCastle.Tls.DigitallySigned)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.LegacyTls13Verifier.VerifyRawSignature(Org.BouncyCastle.Tls.DigitallySigned,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.RsaUtilities"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.RsaUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.RsaUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.RsaUtilities.SupportsPkcs1(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.RsaUtilities.SupportsPss_Pss(System.Int16,Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.RsaUtilities.SupportsPss_Rsae(Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher">
      <summary>A generic TLS 1.2 AEAD cipher.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl,Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl,System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher</parameter>
          </include>
        </markup>
      </summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.AEAD_CCM"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.AEAD_CHACHA20_POLY1305"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.AEAD_GCM"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.DecodeCiphertext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.GetAdditionalData(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.GetAdditionalData(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.Int32,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.GetCiphertextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.GetCiphertextEncodeLimit(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.GetPlaintextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.GetPlaintextEncodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.GetPlaintextLimit(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_cryptoParams"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_decryptCipher"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_decryptConnectionID"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_decryptNonce"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_decryptUseInnerPlaintext"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_encryptCipher"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_encryptConnectionID"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_encryptNonce"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_encryptUseInnerPlaintext"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_fixed_iv_length"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_isTlsV13"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_keySize"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_macSize"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_nonceMode"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.m_record_iv_length"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.RekeyCipher(Org.BouncyCastle.Tls.SecurityParameters,Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl,System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.RekeyDecoder"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.RekeyEncoder"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.Setup13Cipher(Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl,System.Byte[],Org.BouncyCastle.Tls.Crypto.TlsSecret,System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher.UsesOpaqueRecordType"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl">
      <summary>Base interface for services supporting AEAD encryption/decryption.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl.DoFinal(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Perform the cipher encryption/decryption returning the output in output.</summary>
      <param name="additionalData">any additional data to be included in the MAC calculation.</param>
      <param name="input">array holding input data to the cipher.</param>
      <param name="inputOffset">offset into input array data starts at.</param>
      <param name="inputLength">length of the input data in the array.</param>
      <param name="output">array to hold the cipher output.</param>
      <param name="outputOffset">offset into output array to start saving output.</param>
      <returns>the amount of data written to output.</returns>
      <remarks>
            Note: we have to use DoFinal() here as it is the only way to guarantee output from the underlying cipher.
            </remarks>
      <exception cref="T:System.IO.IOException">in case of failure.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl.DoFinal(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Perform the cipher encryption/decryption returning the output in output.</summary>
      <param name="input">array holding input data to the cipher.</param>
      <param name="inputOffset">offset into input array data starts at.</param>
      <param name="inputLength">length of the input data in the array.</param>
      <param name="output">array to hold the cipher output.</param>
      <param name="outputOffset">offset into output array to start saving output.</param>
      <returns>the amount of data written to output.</returns>
      <remarks>
            Note: we have to use DoFinal() here as it is the only way to guarantee output from the underlying cipher.
            </remarks>
      <exception cref="T:System.IO.IOException">in case of failure.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl.GetOutputSize(System.Int32)">
      <summary>Return the maximum size of the output for input of inputLength bytes.</summary>
      <param name="inputLength">the length (in bytes) of the proposed input.</param>
      <returns>the maximum size of the output.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl.Init(System.Byte[],System.Int32,System.Byte[])">
      <summary>Initialise the parameters for the AEAD operator.</summary>
      <param name="nonce">the nonce.</param>
      <param name="macSize">MAC size in bytes.</param>
      <param name="additionalData">any additional data to be included in the MAC calculation.</param>
      <exception cref="T:System.IO.IOException">if the parameters are inappropriate.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl.Reset"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl.SetKey(System.Byte[],System.Int32,System.Int32)">
      <summary>Set the key to be used by the AEAD cipher implementation supporting this service.</summary>
      <param name="key">array holding the AEAD cipher key.</param>
      <param name="keyOff">offset into the array the key starts at.</param>
      <param name="keyLen">length of the key in the array.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl.SetKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher">
      <summary>A generic TLS 1.0-1.2 block cipher. This can be used for AES or 3DES for example.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl,Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl,Org.BouncyCastle.Tls.Crypto.TlsHmac,Org.BouncyCastle.Tls.Crypto.TlsHmac,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher</parameter>
          </include>
        </markup>
      </summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.CheckPaddingConstantTime(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.ChooseExtraPadBlocks(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.DecodeCiphertext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.GetCiphertextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.GetCiphertextEncodeLimit(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.GetCiphertextLength(System.Int32,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.GetPlaintextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.GetPlaintextEncodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.GetPlaintextLength(System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.GetPlaintextLimit(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_acceptExtraPadding"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_cryptoParams"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_decryptCipher"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_decryptConnectionID"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_decryptUseInnerPlaintext"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_encryptCipher"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_encryptConnectionID"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_encryptThenMac"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_encryptUseInnerPlaintext"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_randomData"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_readMac"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_useExplicitIV"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_useExtraPadding"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.m_writeMac"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.RekeyDecoder"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.RekeyEncoder"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipher.UsesOpaqueRecordType"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl">
      <summary>Interface for block cipher services.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl.DoFinal(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Perform the cipher encryption/decryption returning the output in output.</summary>
      <param name="input">array holding input data to the cipher.</param>
      <param name="inputOffset">offset into input array data starts at.</param>
      <param name="inputLength">length of the input data in the array.</param>
      <param name="output">array to hold the cipher output.</param>
      <param name="outputOffset">offset into output array to start saving output.</param>
      <returns>the amount of data written to output.</returns>
      <remarks>
            Note: we have to use DoFinal() here as it is the only way to guarantee output from the underlying cipher.
            </remarks>
      <exception cref="T:System.IO.IOException">in case of failure.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl.GetBlockSize">
      <summary>Return the blocksize (in bytes) of the underlying block cipher.</summary>
      <returns>the cipher's blocksize.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl.Init(System.Byte[],System.Int32,System.Int32)">
      <summary>Initialise the parameters for operator.</summary>
      <param name="iv">array holding the initialization vector (IV).</param>
      <param name="ivOff">offset into the array the IV starts at.</param>
      <param name="ivLen">length of the IV in the array.</param>
      <exception cref="T:System.IO.IOException">if the parameters are inappropriate.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl.Init(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl.SetKey(System.Byte[],System.Int32,System.Int32)">
      <summary>Set the key to be used by the block cipher implementation supporting this service.</summary>
      <param name="key">array holding the block cipher key.</param>
      <param name="keyOff">offset into the array the key starts at.</param>
      <param name="keyLen">length of the key in the array.</param>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl.SetKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities">
      <summary>Useful utility methods.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.CalculateKeyBlock(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.CalculateKeyBlock(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsSsl(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV10(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV10(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV11(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV11(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV12(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV12(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV13(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsImplUtilities.IsTlsV13(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher">
      <summary>The NULL cipher.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Tls.Crypto.TlsHmac,Org.BouncyCastle.Tls.Crypto.TlsHmac)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher</parameter>
          </include>
        </markup>
      </summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.DecodeCiphertext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.EncodePlaintext(System.Int64,System.Int16,Org.BouncyCastle.Tls.ProtocolVersion,System.Int32,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.GetCiphertextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.GetCiphertextEncodeLimit(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.GetPlaintextDecodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.GetPlaintextEncodeLimit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.GetPlaintextLimit(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.m_cryptoParams"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.m_decryptConnectionID"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.m_decryptUseInnerPlaintext"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.m_encryptConnectionID"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.m_encryptUseInnerPlaintext"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.m_readMac"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.m_writeMac"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.RekeyDecoder"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.RekeyEncoder"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher.UsesOpaqueRecordType"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac">
      <summary>A generic TLS MAC implementation, acting as an HMAC based on some underlying Digest.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Tls.Crypto.TlsHmac)">
      <summary>Generate a new instance of a TlsMac.</summary>
      <param name="cryptoParams">the TLS client context specific crypto parameters.</param>
      <param name="mac">The MAC to use.</param>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.CalculateMac(System.Int64,System.Int16,System.Byte[],System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.CalculateMac(System.Int64,System.Int16,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.CalculateMac(System.Int64,System.Int16,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.CalculateMac(System.Int64,System.Int16,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.CalculateMacConstantTime(System.Int64,System.Int16,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.CalculateMacConstantTime(System.Int64,System.Int16,System.Byte[],System.Int32,System.Int32,System.Int32,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.GetDigestBlockCount(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.GetHeaderLength(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.GetMacSize(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Tls.Crypto.TlsMac)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.m_cryptoParams"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.m_digestBlockSize"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.m_digestOverhead"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.m_mac"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.m_macSize"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.Size"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac.Truncate(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac">
      <summary>Base interface for a generic TLS MAC implementation for use with a bulk cipher.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac.CalculateMac(System.Int64,System.Int16,System.Byte[],System.Int32,System.Int32)">
      <summary>Calculate the MAC for some given data.</summary>
      <param name="seqNo">The sequence number of the record.</param>
      <param name="type">The content type of the message.</param>
      <param name="message">A byte array containing the message.</param>
      <param name="offset">The number of bytes to skip, before the message starts.</param>
      <param name="length">The length of the message.</param>
      <returns>A new byte array containing the MAC value.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac.CalculateMac(System.Int64,System.Int16,System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac.CalculateMacConstantTime(System.Int64,System.Int16,System.Byte[],System.Int32,System.Int32,System.Int32,System.Byte[])">
      <summary>Constant time calculation of the MAC for some given data with a given expected length.</summary>
      <param name="seqNo">The sequence number of the record.</param>
      <param name="type">The content type of the message.</param>
      <param name="message">A byte array containing the message.</param>
      <param name="offset">The number of bytes to skip, before the message starts.</param>
      <param name="length">The length of the message.</param>
      <param name="expectedLength">The expected length of the full message.</param>
      <param name="randomData">Random data for padding out the MAC calculation if required.</param>
      <returns>A new byte array containing the MAC value.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac.Size">
      <summary>Return the output length (in bytes) of this MAC.</summary>
      <returns>The output length of this MAC.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.#ctor(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.DoFinal(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.DoFinal(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.GetOutputSize(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.Init(System.Byte[],System.Int32,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.Reset"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.SetKey(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcChaCha20Poly1305.SetKey(System.ReadOnlySpan{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedAgreement"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedAgreement.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Tls.Certificate,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedAgreement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedAgreement.Certificate"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedAgreement.GenerateAgreement(Org.BouncyCastle.Tls.Crypto.TlsCertificate)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedAgreement.m_agreementCredentials"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor">
      <summary>Credentialed class decrypting RSA encrypted secrets sent from a peer for our end of the TLS connection
            using the BC light-weight API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Tls.Certificate,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor.Certificate"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor.Decrypt(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Byte[])"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor.m_certificate"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor.m_privateKey"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedDecryptor.SafeDecryptPreMasterSecret(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedSigner">
      <summary>Credentialed class for generating signatures based on the use of primitives from the BC light-weight API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedSigner.#ctor(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Tls.Certificate,Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcDefaultTlsCredentialedSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate">
      <summary>Implementation class for a single X.509 certificate based on the BC light-weight API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate</parameter>
          </include>
        </markup>
      </summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.Convert(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Tls.Crypto.TlsCertificate)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.GetEncoded">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.GetExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.GetSigAlgParams"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.m_certificate"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.ParseCertificate(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.SigAlgOid"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.SupportsKeyUsage(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCertificate.X509CertificateStructure"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.#ctor(Org.BouncyCastle.Security.SecureRandom)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CloneDigest(System.Int32,Org.BouncyCastle.Crypto.IDigest)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAeadCipher_Aes_Ccm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAeadCipher_Aes_Gcm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAeadCipher_Aria_Gcm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAeadCipher_Camellia_Gcm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAeadCipher_SM4_Ccm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAeadCipher_SM4_Gcm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAesEngine"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateAriaEngine"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateBlockCipher(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCamelliaEngine"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCbcBlockCipher(Org.BouncyCastle.Crypto.IBlockCipher)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCbcBlockCipher(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCcmMode(Org.BouncyCastle.Crypto.IBlockCipher)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCertificate(System.Int16,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateChaCha20Poly1305(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher_Aes_Ccm(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher_Aes_Gcm(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher_Aria_Gcm(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher_Camellia_Gcm(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher_Cbc(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher_SM4_Ccm(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateCipher_SM4_Gcm(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateDesEdeEngine"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateDHDomain(Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateDigest(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateECDomain(Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateGcmMode(Org.BouncyCastle.Crypto.IBlockCipher)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateHash(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateHmac(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateHmac_Ssl(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateHmacForHash(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateMac(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateNonceGenerator(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateNonceGenerator(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateNullCipher(Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateSecret(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateSeedEngine"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateSM4Engine"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateSrp6Client(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateSrp6Server(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.CreateSrp6VerifierGenerator(Org.BouncyCastle.Tls.Crypto.TlsSrpConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.GenerateRsaPreMasterSecret(Org.BouncyCastle.Tls.ProtocolVersion)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasAnyStreamVerifiers(System.Collections.Generic.IList{Org.BouncyCastle.Tls.SignatureAndHashAlgorithm})"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasAnyStreamVerifiersLegacy(System.Int16[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasCryptoHashAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasCryptoSignatureAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasDHAgreement"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasECDHAgreement"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasEncryptionAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasHkdfAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasMacAlgorithm(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasNamedGroup(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasRsaEncryption"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasSignatureAlgorithm(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasSignatureAndHashAlgorithm(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasSignatureScheme(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HasSrpAuthentication"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.HkdfInit(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto.SecureRandom"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH">
      <summary>Support class for ephemeral Diffie-Hellman using the BC light-weight library.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH.CalculateSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH.GenerateEphemeral"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH.m_domain"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH.m_localKeyPair"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH.m_peerPublicKey"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDH.ReceivePeerValue(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain">
      <summary>BC light-weight support class for Diffie-Hellman key pair generation and key agreement over a
            specified Diffie-Hellman configuration.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Tls.Crypto.TlsDHConfig)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.CalculateDHAgreement(Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.CalculateDHAgreement(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.CreateDH"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.DecodeParameter(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.DecodePublicKey(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.EncodeParameter(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.EncodePublicKey(Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.GetDomainParameters(Org.BouncyCastle.Tls.Crypto.TlsDHConfig)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.m_config"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain.m_domainParameters"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaSigner">
      <summary>Implementation class for generation of the raw DSA signature type using the BC light-weight API.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaSigner.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaSigner.CreateDsaImpl(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaSigner.SignatureAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaVerifier">
      <summary>Implementation class for the verification of the raw DSA signature type using the BC light-weight API.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaVerifier.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaVerifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaVerifier.CreateDsaImpl"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDsaVerifier.SignatureAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssSigner">
      <summary>BC light-weight base class for the signers implementing the two DSA style algorithms from FIPS PUB
            186-4: DSA and ECDSA.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssSigner.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssSigner.CreateDsaImpl(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssSigner.GenerateRawSignature(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm,System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssSigner.SignatureAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier">
      <summary>BC light-weight base class for the verifiers supporting the two DSA style algorithms from FIPS PUB
            186-4: DSA and ECDSA.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier.CreateDsaImpl"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier.SignatureAlgorithm"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier.VerifyRawSignature(Org.BouncyCastle.Tls.DigitallySigned,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH">
      <summary>Support class for ephemeral Elliptic Curve Diffie-Hellman using the BC light-weight library.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH.CalculateSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH.GenerateEphemeral"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH.m_domain"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH.m_localKeyPair"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH.m_peerPublicKey"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDH.ReceivePeerValue(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Tls.Crypto.TlsECConfig)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.CalculateECDHAgreement(Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.CalculateECDHAgreement(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters,Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.CreateECDH"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.DecodePoint(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.DecodePublicKey(System.Byte[])">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.EncodePoint(Org.BouncyCastle.Math.EC.ECPoint)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.EncodePublicKey(Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.GenerateKeyPair"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.GetDomainParameters(Org.BouncyCastle.Tls.Crypto.TlsECConfig)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.GetDomainParameters(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.m_config"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain.m_domainParameters"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsa13Signer">
      <summary>Implementation class for generation of ECDSA signatures in TLS 1.3+ using the BC light-weight API.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsa13Signer.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsa13Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsa13Signer.GenerateRawSignature(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaSigner">
      <summary>Implementation class for generation of the raw ECDSA signature type using the BC light-weight API.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaSigner.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaSigner.CreateDsaImpl(System.Int32)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaSigner.SignatureAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaVerifier">
      <summary>Implementation class for the verification of the raw ECDSA signature type using the BC light-weight
            API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaVerifier.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaVerifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaVerifier.CreateDsaImpl"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDsaVerifier.SignatureAlgorithm"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd25519Signer"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd25519Signer.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd25519Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd25519Signer.GetStreamSigner(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd448Signer"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd448Signer.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd448Signer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsEd448Signer.GetStreamSigner(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate">
      <summary>Implementation class for a single X.509 certificate based on the BC light-weight API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate</parameter>
          </include>
        </markup>
      </summary>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.CheckUsageInRole(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.CreateEncryptor(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.CreateVerifier(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.CreateVerifier(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetEncoded">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetLegacySignatureAlgorithm">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetPubKeyDH">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetPubKeyDss">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetPubKeyEC">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetPubKeyEd25519">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetPubKeyEd448">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetPubKeyRsa">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetPublicKey">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.GetSigAlgParams"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.m_keyInfo"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.m_pubKeyDH"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.m_pubKeyEC"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.m_pubKeyEd25519"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.m_pubKeyEd448"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.m_pubKeyRsa"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SigAlgOid"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SubjectPublicKeyInfo"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SupportsKeyUsage(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SupportsRsa_Pkcs1"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SupportsRsa_Pss_Pss(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SupportsRsa_Pss_Rsae"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SupportsSignatureAlgorithm(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SupportsSignatureAlgorithm(System.Int16,System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.SupportsSignatureAlgorithmCA(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.ValidateKeyUsage(System.Int32)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.ValidateRsa_Pkcs1">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.ValidateRsa_Pss_Pss(System.Int16)">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate.ValidateRsa_Pss_Rsae">
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssSigner">
      <summary>Operator supporting the generation of RSASSA-PSS signatures using the BC light-weight API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssSigner.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssSigner.GenerateRawSignature(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssVerifier">
      <summary>Operator supporting the verification of RSASSA-PSS signatures using the BC light-weight API.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssVerifier.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssVerifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaPssVerifier.VerifyRawSignature(Org.BouncyCastle.Tls.DigitallySigned,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaSigner">
      <summary>Operator supporting the generation of RSASSA-PKCS1-v1_5 signatures using the BC light-weight API.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaSigner.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaSigner.GenerateRawSignature(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaVerifier">
      <summary>Operator supporting the verification of RSASSA-PKCS1-v1_5 signatures using the BC light-weight API.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaVerifier.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaVerifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRsaVerifier.VerifyRawSignature(Org.BouncyCastle.Tls.DigitallySigned,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret">
      <summary>BC light-weight support class for handling TLS secrets and deriving key material and other secrets
            from them.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Convert(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Tls.Crypto.TlsSecret)"></member>
    <member name="P:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Crypto"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.DeriveUsingPrf(System.Int32,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.DeriveUsingPrf(System.Int32,System.String,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.HkdfExpand(System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.HkdfExpand(System.Int32,System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.HkdfExtract(System.Int32,Org.BouncyCastle.Tls.Crypto.TlsSecret)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.HmacHash(System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.m_crypto"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Prf(System.Int32,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Prf(System.Int32,System.String,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Prf_1_0(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Prf_1_2(System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Prf_Ssl(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.Prf_Ssl(System.ReadOnlySpan{System.Byte},System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret.UpdateMac(Org.BouncyCastle.Crypto.IMac)"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSigner"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSigner.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSigner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSigner.GenerateRawSignature(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSigner.GetStreamSigner(Org.BouncyCastle.Tls.SignatureAndHashAlgorithm)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSigner.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSigner.m_privateKey"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier.GetStreamVerifier(Org.BouncyCastle.Tls.DigitallySigned)"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier.m_publicKey"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier.VerifyRawSignature(Org.BouncyCastle.Tls.DigitallySigned,System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519">
      <summary>Support class for X25519 using the BC light-weight library.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519.CalculateSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519.GenerateEphemeral"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519.m_peerPublicKey"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519.m_privateKey"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519.ReceivePeerValue(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519Domain"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519Domain.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519Domain</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519Domain.CreateECDH"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX25519Domain.m_crypto"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448">
      <summary>Support class for X448 using the BC light-weight library.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448.CalculateSecret"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448.GenerateEphemeral"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448.m_crypto"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448.m_peerPublicKey"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448.m_privateKey"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448.ReceivePeerValue(System.Byte[])"></member>
    <member name="T:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448Domain"></member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448Domain.#ctor(Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448Domain</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448Domain.CreateECDH"></member>
    <member name="F:Org.BouncyCastle.Tls.Crypto.Impl.BC.BcX448Domain.m_crypto"></member>
    <member name="T:Org.BouncyCastle.Tsp.GenTimeAccuracy"></member>
    <member name="M:Org.BouncyCastle.Tsp.GenTimeAccuracy.#ctor(Org.BouncyCastle.Asn1.Tsp.Accuracy)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.GenTimeAccuracy</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tsp.GenTimeAccuracy.Micros"></member>
    <member name="P:Org.BouncyCastle.Tsp.GenTimeAccuracy.Millis"></member>
    <member name="P:Org.BouncyCastle.Tsp.GenTimeAccuracy.Seconds"></member>
    <member name="M:Org.BouncyCastle.Tsp.GenTimeAccuracy.ToString"></member>
    <member name="T:Org.BouncyCastle.Tsp.Resolution"></member>
    <member name="T:Org.BouncyCastle.Tsp.TimeStampRequest"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.#ctor(Org.BouncyCastle.Asn1.Tsp.TimeStampReq)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampRequest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampRequest.CertReq"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.GetExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.GetExtensionOids"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.GetMessageImprintDigest"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampRequest.HasExtensions"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampRequest.MessageImprintAlgOid"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampRequest.Nonce"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampRequest.ReqPolicy"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.Validate(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampRequest.Version"></member>
    <member name="T:Org.BouncyCastle.Tsp.TimeStampRequestGenerator"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampRequestGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.Generate(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.Generate(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Byte[],Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.Generate(System.String,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.Generate(System.String,System.Byte[],Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.SetCertReq(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.SetReqPolicy(System.String)"></member>
    <member name="T:Org.BouncyCastle.Tsp.TimeStampResponse"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.#ctor(Org.BouncyCastle.Asn1.Tsp.TimeStampResp)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampResponse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.GetEncoded(System.String)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.GetFailInfo"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.GetStatusString"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampResponse.Status"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampResponse.TimeStampToken"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.Validate(Org.BouncyCastle.Tsp.TimeStampRequest)"></member>
    <member name="T:Org.BouncyCastle.Tsp.TimeStampResponseGenerator"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponseGenerator.#ctor(Org.BouncyCastle.Tsp.TimeStampTokenGenerator,System.Collections.Generic.IList{System.String})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampResponseGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponseGenerator.#ctor(Org.BouncyCastle.Tsp.TimeStampTokenGenerator,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampResponseGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponseGenerator.#ctor(Org.BouncyCastle.Tsp.TimeStampTokenGenerator,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampResponseGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponseGenerator.Generate(Org.BouncyCastle.Tsp.TimeStampRequest,Org.BouncyCastle.Math.BigInteger,System.Nullable{System.DateTime})"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponseGenerator.GenerateFailResponse(Org.BouncyCastle.Asn1.Cmp.PkiStatus,System.Int32,System.String)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponseGenerator.GenerateGrantedResponse(Org.BouncyCastle.Tsp.TimeStampRequest,Org.BouncyCastle.Math.BigInteger,System.Nullable{System.DateTime},System.String,Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="T:Org.BouncyCastle.Tsp.TimeStampToken"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.#ctor(Org.BouncyCastle.Asn1.Cms.ContentInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampToken</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.#ctor(Org.BouncyCastle.Cms.CmsSignedData)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampToken</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.GetAttributeCertificates"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.GetCertificates"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.GetCrls"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.GetEncoded(System.String)"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampToken.SignedAttributes"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampToken.SignerID"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampToken.TimeStampInfo"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.ToCmsSignedData"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampToken.UnsignedAttributes"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.Validate(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="T:Org.BouncyCastle.Tsp.TimeStampTokenGenerator"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.#ctor(Org.BouncyCastle.Cms.SignerInfoGenerator,Org.BouncyCastle.Crypto.IDigestFactory,Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampTokenGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampTokenGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String,Org.BouncyCastle.Asn1.Cms.AttributeTable,Org.BouncyCastle.Asn1.Cms.AttributeTable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampTokenGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.Generate(Org.BouncyCastle.Tsp.TimeStampRequest,Org.BouncyCastle.Math.BigInteger,System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.Generate(Org.BouncyCastle.Tsp.TimeStampRequest,Org.BouncyCastle.Math.BigInteger,System.DateTime,Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.Resolution"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetAccuracyMicros(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetAccuracyMillis(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetAccuracySeconds(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetAttributeCertificates(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509V2AttributeCertificate})"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetCertificates(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Certificate})"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetCrls(Org.BouncyCastle.Utilities.Collections.IStore{Org.BouncyCastle.X509.X509Crl})"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetOrdering(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenGenerator.SetTsa(Org.BouncyCastle.Asn1.X509.GeneralName)"></member>
    <member name="T:Org.BouncyCastle.Tsp.TimeStampTokenInfo"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenInfo.#ctor(Org.BouncyCastle.Asn1.Tsp.TstInfo)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampTokenInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenInfo.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TimeStampTokenInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.Accuracy"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.GenTime"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.GenTimeAccuracy"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenInfo.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampTokenInfo.GetMessageImprintDigest"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.HashAlgorithm"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.IsOrdered"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.MessageImprintAlgOid"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.Nonce"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.Policy"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.Tsa"></member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.TstInfo"></member>
    <member name="T:Org.BouncyCastle.Tsp.TspAlgorithms"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Allowed"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Gost3411"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Gost3411_2012_256"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Gost3411_2012_512"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.MD5"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.RipeMD128"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.RipeMD160"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.RipeMD256"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Sha1"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Sha224"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Sha256"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Sha384"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.Sha512"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspAlgorithms.SM3"></member>
    <member name="T:Org.BouncyCastle.Tsp.TspException"></member>
    <member name="M:Org.BouncyCastle.Tsp.TspException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Tsp.TspUtil"></member>
    <member name="M:Org.BouncyCastle.Tsp.TspUtil.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspUtil</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspUtil.GetSignatureTimestamps(Org.BouncyCastle.Cms.SignerInformation)"></member>
    <member name="M:Org.BouncyCastle.Tsp.TspUtil.ValidateCertificate(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="T:Org.BouncyCastle.Tsp.TspValidationException"></member>
    <member name="M:Org.BouncyCastle.Tsp.TspValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspValidationException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspValidationException.#ctor(System.String,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Tsp.TspValidationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tsp.TspValidationException.FailureCode">
      <returns>The failure code associated with this exception, if one is set.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="F:Org.BouncyCastle.Tsp.TspValidationException.m_failureCode"></member>
    <member name="T:Org.BouncyCastle.Utilities.Arrays">
      <summary> General array utilities.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Append(System.Byte[],System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Append(System.Int16[],System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Append(System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreAllZeroes(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreAllZeroes(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.Boolean[],System.Boolean[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.Byte[],System.Byte[])">
      <summary>
            Are two arrays equal.
            </summary>
      <param name="a">Left side.</param>
      <param name="b">Right side.</param>
      <returns>True if equal.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.Char[],System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.Int64[],System.Int64[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.UInt64[],System.Int32,System.Int32,System.UInt64[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.AreEqual(System.UInt64[],System.UInt64[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clear(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clear(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.Boolean[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.Int16[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.Int64[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.UInt16[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.UInt64[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Clone(System.UInt64[],System.UInt64[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Concatenate(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Concatenate(System.Int32[],System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Concatenate(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Concatenate(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Concatenate(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Concatenate(System.UInt16[],System.UInt16[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Concatenate(System.UInt32[],System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.ConcatenateAll(System.Byte[][])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.ConstantTimeAreEqual(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.ConstantTimeAreEqual(System.Span{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Contains(System.Byte[],System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Contains(System.Int16[],System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Contains(System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOf(Org.BouncyCastle.Math.BigInteger[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOf(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOf(System.Char[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOf(System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOf(System.Int64[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOf(System.UInt32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOfRange(Org.BouncyCastle.Math.BigInteger[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOfRange(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOfRange(System.Int32[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.CopyOfRange(System.Int64[],System.Int32,System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Utilities.Arrays.EmptyBytes"></member>
    <member name="F:Org.BouncyCastle.Utilities.Arrays.EmptyInts"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Fill(System.Byte[],System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Fill(System.Byte[],System.Int32,System.Int32,System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Fill``1(System.Span{``0},``0)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Fill(System.UInt64[],System.UInt64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Fill``1(``0[],``0)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.FixedTimeEquals(System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.FixedTimeEquals(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.FixedTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.Int32[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.UInt16[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.UInt32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.UInt32[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.UInt64[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.GetHashCode(System.UInt64[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.IsNullOrContainsNull(System.Object[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.IsNullOrEmpty(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.IsNullOrEmpty(System.Object[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Prepend(System.Byte[],System.Byte)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Prepend(System.Int16[],System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Prepend(System.Int32[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Prepend``1(System.ReadOnlySpan{``0},``0)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Prepend``1(``0[],``0)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Reverse(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.Reverse(System.Int32[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.ReverseInPlace``1(``0[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Arrays.ToString(System.Object[])"></member>
    <member name="T:Org.BouncyCastle.Utilities.BigIntegers"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.AsUint32ArrayLittleEndian(Org.BouncyCastle.Math.BigInteger,System.Span{System.UInt32})"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(Org.BouncyCastle.Math.BigInteger,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(Org.BouncyCastle.Math.BigInteger,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(System.Int32,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.CreateRandomBigInteger(System.Int32,Org.BouncyCastle.Security.SecureRandom)">
      <summary>
            Creates a Random BigInteger from the secure random of a given bit length.
            </summary>
      <param name="bitLength"></param>
      <param name="secureRandom"></param>
      <returns></returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.CreateRandomInRange(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Security.SecureRandom)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.FromUnsignedByteArray(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.FromUnsignedByteArray(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.GetByteLength(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.GetUnsignedByteLength(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.ModOddInverse(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.Utilities.BigIntegers.ModOddInverseVar(Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="F:Org.BouncyCastle.Utilities.BigIntegers.One"></member>
    <member name="F:Org.BouncyCastle.Utilities.BigIntegers.Zero"></member>
    <member name="T:Org.BouncyCastle.Utilities.Bytes"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bytes.NumBits"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bytes.NumBytes"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bytes.Xor(System.Int32,System.Byte[],System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bytes.Xor(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bytes.Xor(System.Int32,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bytes.XorTo(System.Int32,System.Byte[],System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bytes.XorTo(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bytes.XorTo(System.Int32,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="T:Org.BouncyCastle.Utilities.IEncodable"></member>
    <member name="M:Org.BouncyCastle.Utilities.IEncodable.GetEncoded">
      <summary>Return a byte array representing the implementing object.</summary>
      <returns>An encoding of this object as a byte array.</returns>
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IMemoable"></member>
    <member name="M:Org.BouncyCastle.Utilities.IMemoable.Copy">
      <summary>
            Produce a copy of this object with its configuration and in its current state.
            </summary>
      <remarks>
            The returned object may be used simply to store the state, or may be used as a similar object
            starting from the copied state.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IMemoable.Reset(Org.BouncyCastle.Utilities.IMemoable)">
      <summary>
            Restore a copied object state into this object.
            </summary>
      <param name="other">an object originally {@link #copy() copied} from an object of the same type as this instance.</param>
      <remarks>
            Implementations of this method <em>should</em> try to avoid or minimise memory allocation to perform the reset.
            </remarks>
      <exception cref="T:System.InvalidCastException">if the provided object is not of the correct type.</exception>
      <exception cref="T:Org.BouncyCastle.Utilities.MemoableResetException">if the <b>other</b> parameter is in some other way invalid.</exception>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Integers"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.HighestOneBit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.HighestOneBit(System.UInt32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.LowestOneBit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.LowestOneBit(System.UInt32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.NumberOfLeadingZeros(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.NumberOfTrailingZeros(System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Utilities.Integers.NumBits"></member>
    <member name="F:Org.BouncyCastle.Utilities.Integers.NumBytes"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.PopCount(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.PopCount(System.UInt32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.Reverse(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.Reverse(System.UInt32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.ReverseBytes(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.ReverseBytes(System.UInt32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.RotateLeft(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.RotateLeft(System.UInt32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.RotateRight(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Integers.RotateRight(System.UInt32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Longs"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.HighestOneBit(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.HighestOneBit(System.UInt64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.LowestOneBit(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.LowestOneBit(System.UInt64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.NumberOfLeadingZeros(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.NumberOfTrailingZeros(System.Int64)"></member>
    <member name="F:Org.BouncyCastle.Utilities.Longs.NumBits"></member>
    <member name="F:Org.BouncyCastle.Utilities.Longs.NumBytes"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.Reverse(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.Reverse(System.UInt64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.ReverseBytes(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.ReverseBytes(System.UInt64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.RotateLeft(System.Int64,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.RotateLeft(System.UInt64,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.RotateRight(System.Int64,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Longs.RotateRight(System.UInt64,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Utilities.MemoableResetException"></member>
    <member name="M:Org.BouncyCastle.Utilities.MemoableResetException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.MemoableResetException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.MemoableResetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.MemoableResetException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.MemoableResetException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.MemoableResetException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.MemoableResetException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.MemoableResetException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Objects"></member>
    <member name="M:Org.BouncyCastle.Utilities.Objects.GetHashCode(System.Object)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Shorts"></member>
    <member name="F:Org.BouncyCastle.Utilities.Shorts.NumBits"></member>
    <member name="F:Org.BouncyCastle.Utilities.Shorts.NumBytes"></member>
    <member name="M:Org.BouncyCastle.Utilities.Shorts.ReverseBytes(System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Shorts.ReverseBytes(System.UInt16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Shorts.RotateLeft(System.Int16,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Shorts.RotateLeft(System.UInt16,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Shorts.RotateRight(System.Int16,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Shorts.RotateRight(System.UInt16,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Strings">
      <summary> General string utilities.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.FromAsciiByteArray(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.FromByteArray(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.FromUtf8ByteArray(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.FromUtf8ByteArray(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToAsciiByteArray(System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToAsciiByteArray(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToByteArray(System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToByteArray(System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToByteArray(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToUtf8ByteArray(System.Char[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToUtf8ByteArray(System.ReadOnlySpan{System.Char})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Strings.ToUtf8ByteArray(System.String)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.BZip2Constants</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.baseBlockSize"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.G_SIZE"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.MAX_ALPHA_SIZE"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.MAX_CODE_LEN"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.MAX_CODE_LEN_GEN"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.MAX_SELECTORS"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.N_GROUPS"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.N_ITERS"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.NUM_OVERSHOOT_BYTES"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.RUNA"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.BZip2Constants.RUNB"></member>
    <member name="T:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream.Detach(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStream.ReadByte"></member>
    <member name="T:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStreamLeaveOpen"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStreamLeaveOpen.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStreamLeaveOpen.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2InputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.CLEARMASK"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.DEPTH_THRESH"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.Detach(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.Finish"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.Flush"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.GREATER_ICOST"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.HbMakeCodeLengths(System.Byte[],System.Int32[],System.Int32,System.Int32)"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.LESSER_ICOST"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.SETMASK"></member>
    <member name="F:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.SMALL_THRESH"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStream.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen"></member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Bzip2.CBZip2OutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Collections.CollectionUtilities"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Collections.CollectionUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.CollectMatches``1(System.Collections.Generic.ICollection{``0},Org.BouncyCastle.Utilities.Collections.ISelector{``0},System.Collections.Generic.IEnumerable{Org.BouncyCastle.Utilities.Collections.IStore{``0}})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.CreateStore``1(System.Collections.Generic.IEnumerable{``0})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.GetFirstOrNull``1(System.Collections.Generic.IEnumerable{``0})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.GetValueOrKey``1(System.Collections.Generic.IDictionary{``0,``0},``0)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.GetValueOrNull``2(System.Collections.Generic.IDictionary{``0,``1},``0)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.Proxy``1(System.Collections.Generic.IEnumerable{``0})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.ReadOnly``1(System.Collections.Generic.ICollection{``0})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.ReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.ReadOnly``1(System.Collections.Generic.IList{``0})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.ReadOnly``1(System.Collections.Generic.ISet{``0})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.RequireNext``1(System.Collections.Generic.IEnumerator{``0})"></member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.CollectionUtilities.ToString``1(System.Collections.Generic.IEnumerable{``0})"></member>
    <member name="T:Org.BouncyCastle.Utilities.Collections.ISelector`1">
      <summary>Interface for matching objects in an <see cref="T:Org.BouncyCastle.Utilities.Collections.IStore`1" />.</summary>
      <typeparam name="T">The contravariant type of selectable objects.</typeparam>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.ISelector`1.Match(`0)">
      <summary>Match the passed in object, returning true if it would be selected by this selector, false
            otherwise.</summary>
      <param name="candidate">The object to be matched.</param>
      <returns>
        <code>true</code> if the objects is matched by this selector, false otherwise.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Collections.IStore`1">
      <summary>A generic interface describing a simple store of objects.</summary>
      <typeparam name="T">The covariant type of stored objects.</typeparam>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Collections.IStore`1.EnumerateMatches(Org.BouncyCastle.Utilities.Collections.ISelector{`0})">
      <summary>Enumerate the (possibly empty) collection of objects matched by the given selector.</summary>
      <param name="selector">The <see cref="T:Org.BouncyCastle.Utilities.Collections.ISelector`1" /> used to select matching objects.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of the matching objects.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Date.DateTimeUtilities"></member>
    <member name="M:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.CurrentUnixMs">
      <summary>
            Return the current number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.DateTimeToUnixMs(System.DateTime)">
      <summary>
            Return the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC) for a given DateTime value.
            </summary>
      <param name="dateTime">A DateTime value not before the epoch.</param>
      <returns>Number of whole milliseconds after epoch.</returns>
      <remarks>The DateTime value will be converted to UTC (using <see cref="M:System.DateTime.ToUniversalTime" /> before
            conversion.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">'dateTime' is before the epoch.</exception>
    </member>
    <member name="F:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.MaxUnixMs"></member>
    <member name="F:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.MinUnixMs"></member>
    <member name="F:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.UnixEpoch"></member>
    <member name="M:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.UnixMsToDateTime(System.Int64)">
      <summary>
            Create a UTC DateTime value from the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
      <param name="unixMs">Number of milliseconds since the epoch.</param>
      <returns>A UTC DateTime value</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">'unixMs' is before 'MinUnixMs' or after 'MaxUnixMs'.
            </exception>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.WithPrecisionCentisecond(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.WithPrecisionDecisecond(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.WithPrecisionMillisecond(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Date.DateTimeUtilities.WithPrecisionSecond(System.DateTime)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.Base64"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.Decode(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.Decode(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.Decode(System.String,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.ToBase64String(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64.ToBase64String(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.Base64Encoder"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Encoders.Base64Encoder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Decode(System.ReadOnlySpan{System.Byte},System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.DecodeString(System.String,System.IO.Stream)"></member>
    <member name="F:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.decodingTable"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Encode(System.ReadOnlySpan{System.Byte},System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.encodingTable"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.InitialiseDecodingTable"></member>
    <member name="F:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.padding"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.BufferedDecoder">
      <summary>
             A buffering class to allow translation from one format to another to
                be done in discrete chunks.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedDecoder.#ctor(Org.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
      <summary>
            Create a buffered Decoder.
            </summary>
      <param name="translator">The translater to use.</param>
      <param name="bufferSize">The size of the buffer.</param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
      <summary>
            Process one byte of data.
            </summary>
      <param name="input">Data in.</param>
      <param name="output">Byte array for the output.</param>
      <param name="outOff">The offset in the output byte array to start writing from.</param>
      <returns>The amount of output bytes.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Process data from a byte array.
            </summary>
      <param name="input">The input data.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="len">Amount of data to process from input data array.</param>
      <param name="outBytes">Array to store output.</param>
      <param name="outOff">Position in output array to start writing from.</param>
      <returns>The amount of output bytes.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.BufferedEncoder">
      <summary>
            A class that allows encoding of data using a specific encoder to be processed in chunks.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedEncoder.#ctor(Org.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
      <summary>
            Create.
            </summary>
      <param name="translator">The translator to use.</param>
      <param name="bufferSize">Size of the chunks.</param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
      <summary>
            Process one byte of data.
            </summary>
      <param name="input">The byte.</param>
      <param name="outBytes">An array to store output in.</param>
      <param name="outOff">Offset within output array to start writing from.</param>
      <returns></returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Process data from a byte array.
            </summary>
      <param name="input">Input data Byte array containing data to be processed.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="len">Amount of input data to be processed.</param>
      <param name="outBytes">Output data array.</param>
      <param name="outOff">Offset within output data array to start writing to.</param>
      <returns>The amount of data written.</returns>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.Hex">
      <summary>
            Class to decode and encode Hex.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.Decode(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.Decode(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.Decode(System.String,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.DecodeStrict(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.DecodeStrict(System.String,System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.ToHexString(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.ToHexString(System.Byte[],System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.ToHexString(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.ToHexString(System.Byte[],System.Int32,System.Int32,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Hex.ToHexString(System.ReadOnlyMemory{System.Byte},System.Boolean)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.HexEncoder"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Encoders.HexEncoder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.Decode(System.ReadOnlySpan{System.Byte},System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.DecodeString(System.String,System.IO.Stream)"></member>
    <member name="F:Org.BouncyCastle.Utilities.Encoders.HexEncoder.decodingTable"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.Encode(System.ReadOnlySpan{System.Byte},System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})"></member>
    <member name="F:Org.BouncyCastle.Utilities.Encoders.HexEncoder.encodingTable"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexEncoder.InitialiseDecodingTable"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.HexTranslator">
      <summary>
            A hex translator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Encoders.HexTranslator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Decode data from a byte array.
            </summary>
      <param name="input">The input data array.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="length">The amounty of data to process.</param>
      <param name="outBytes">The output data array.</param>
      <param name="outOff">The position within the output data array to start writing from.</param>
      <returns>The amount of data written.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Encode some data.
            </summary>
      <param name="input">Input data array.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="length">The amount of data to process.</param>
      <param name="outBytes">The output data array.</param>
      <param name="outOff">The offset within the output data array to start writing from.</param>
      <returns>Amount of data encoded.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.GetDecodedBlockSize">
      <summary>
            Returns the decoded block size.
            </summary>
      <returns>1</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.GetEncodedBlockSize">
      <summary>
            Return encoded block size.
            </summary>
      <returns>2</returns>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.IEncoder"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.IEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.IEncoder.Decode(System.ReadOnlySpan{System.Byte},System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.IEncoder.DecodeString(System.String,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.IEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.IEncoder.Encode(System.ReadOnlySpan{System.Byte},System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.ITranslator">
      <summary>
            Translator interface.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.ITranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.ITranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.ITranslator.GetDecodedBlockSize"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.ITranslator.GetEncodedBlockSize"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.UrlBase64"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Encoders.UrlBase64</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[],System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[],System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Encoders.UrlBase64Encoder"></member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64Encoder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Encoders.UrlBase64Encoder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IO.BaseInputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.BaseInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseInputStream.CanRead"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseInputStream.CanSeek"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseInputStream.CanWrite"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.Flush"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseInputStream.Length"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseInputStream.Position"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.Seek(System.Int64,System.IO.SeekOrigin)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.SetLength(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseInputStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.BaseOutputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.BaseOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseOutputStream.CanRead"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseOutputStream.CanSeek"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseOutputStream.CanWrite"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Flush"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Length"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Position"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Seek(System.Int64,System.IO.SeekOrigin)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.SetLength(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Write(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BaseOutputStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.BinaryReaders"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadBytesFully(System.IO.BinaryReader,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadInt16BigEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadInt16LittleEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadInt32BigEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadInt32LittleEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadInt64BigEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadInt64LittleEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadUInt16BigEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadUInt16LittleEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadUInt32BigEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadUInt32LittleEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadUInt64BigEndian(System.IO.BinaryReader)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryReaders.ReadUInt64LittleEndian(System.IO.BinaryReader)"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.BinaryWriters"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteInt16BigEndian(System.IO.BinaryWriter,System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteInt16LittleEndian(System.IO.BinaryWriter,System.Int16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteInt32BigEndian(System.IO.BinaryWriter,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteInt32LittleEndian(System.IO.BinaryWriter,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteInt64BigEndian(System.IO.BinaryWriter,System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteInt64LittleEndian(System.IO.BinaryWriter,System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteUInt16BigEndian(System.IO.BinaryWriter,System.UInt16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteUInt16LittleEndian(System.IO.BinaryWriter,System.UInt16)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteUInt32BigEndian(System.IO.BinaryWriter,System.UInt32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteUInt32LittleEndian(System.IO.BinaryWriter,System.UInt32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteUInt64BigEndian(System.IO.BinaryWriter,System.UInt64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.BinaryWriters.WriteUInt64LittleEndian(System.IO.BinaryWriter,System.UInt64)"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.FilterStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.FilterStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Utilities.IO.FilterStream.CanRead"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.FilterStream.CanSeek"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.FilterStream.CanWrite"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Detach(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.IO.FilterStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.IO.FilterStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Flush"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.FilterStream.Length"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.FilterStream.Position"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.ReadByte"></member>
    <member name="F:Org.BouncyCastle.Utilities.IO.FilterStream.s"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Seek(System.Int64,System.IO.SeekOrigin)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.SetLength(System.Int64)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.FilterStream.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.PushbackStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.PushbackStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.CopyTo(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.ReadByte"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.PushbackStream.Unread(System.Int32)"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.StreamOverflowException"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.StreamOverflowException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.StreamOverflowException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.StreamOverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.StreamOverflowException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.StreamOverflowException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.StreamOverflowException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.StreamOverflowException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.StreamOverflowException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Streams"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.CopyTo(System.IO.Stream,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.CopyToAsync(System.IO.Stream,System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Threading.CancellationToken)"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Streams.DefaultBufferSize"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.Drain(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.PipeAll(System.IO.Stream,System.IO.Stream)">
      <summary>Write the full contents of inStr to the destination stream outStr.</summary>
      <param name="inStr">Source stream.</param>
      <param name="outStr">Destination stream.</param>
      <exception cref="T:System.IO.IOException">In case of IO failure.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.PipeAll(System.IO.Stream,System.IO.Stream,System.Int32)">
      <summary>Write the full contents of inStr to the destination stream outStr.</summary>
      <param name="inStr">Source stream.</param>
      <param name="outStr">Destination stream.</param>
      <param name="bufferSize">The size of temporary buffer to use.</param>
      <exception cref="T:System.IO.IOException">In case of IO failure.</exception>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.PipeAllLimited(System.IO.Stream,System.Int64,System.IO.Stream)">
      <summary>
            Pipe all bytes from <c>inStr</c> to <c>outStr</c>, throwing <c>StreamFlowException</c> if greater
            than <c>limit</c> bytes in <c>inStr</c>.
            </summary>
      <param name="inStr">
            A <see cref="T:System.IO.Stream" /></param>
      <param name="limit">
            A <see cref="T:System.Int64" /></param>
      <param name="outStr">
            A <see cref="T:System.IO.Stream" /></param>
      <returns>The number of bytes actually transferred, if not greater than <c>limit</c></returns>
      <exception cref="T:System.IO.IOException"></exception>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.PipeAllLimited(System.IO.Stream,System.Int64,System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ReadAll(System.IO.MemoryStream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ReadAll(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ReadAllLimited(System.IO.Stream,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ReadAsync(System.IO.Stream,System.Memory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ReadFully(System.IO.Stream,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ReadFully(System.IO.Stream,System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Streams.WriteBufTo(System.IO.MemoryStream,System.Byte[],System.Int32)">
      <exception cref="T:System.IO.IOException"></exception>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IO.TeeInputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeInputStream.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.TeeInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeInputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.IO.TeeInputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.IO.TeeInputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeInputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeInputStream.Read(System.Span{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeInputStream.ReadByte"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.TeeOutputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeOutputStream.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.TeeOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeOutputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.IO.TeeOutputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.IO.TeeOutputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeOutputStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeOutputStream.Write(System.ReadOnlySpan{System.Byte})"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.TeeOutputStream.WriteByte(System.Byte)"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Pem.PemHeader"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemHeader.#ctor(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemHeader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemHeader.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemHeader.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Pem.PemHeader.Name"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemHeader.ToString"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Pem.PemHeader.Value"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Pem.PemObject"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemObject.#ctor(System.String,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemObject.#ctor(System.String,System.Collections.Generic.IList{Org.BouncyCastle.Utilities.IO.Pem.PemHeader},System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Pem.PemObject.Content"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemObject.Generate"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Pem.PemObject.Headers"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Pem.PemObject.Type"></member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Pem.PemObjectGenerator"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemObjectGenerator.Generate">
      <returns>
            A <see cref="T:Org.BouncyCastle.Utilities.IO.Pem.PemObject" /></returns>
      <exception cref="T:Org.BouncyCastle.Utilities.IO.Pem.PemGenerationException"></exception>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Pem.PemObjectParser"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemObjectParser.ParseObject(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
      <param name="obj">
            A <see cref="T:Org.BouncyCastle.Utilities.IO.Pem.PemObject" /></param>
      <returns>
            An <see cref="T:System.Object" /></returns>
      <exception cref="T:System.IO.IOException"></exception>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Pem.PemReader"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemReader.#ctor(System.IO.TextReader)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemReader.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemReader.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemReader</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemReader</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Pem.PemReader.Reader"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemReader.ReadPemObject">
      <returns>
            A <see cref="T:Org.BouncyCastle.Utilities.IO.Pem.PemObject" /></returns>
      <exception cref="T:System.IO.IOException"></exception>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.IO.Pem.PemWriter"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.#ctor(System.IO.TextWriter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemWriter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemWriter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemWriter</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.IO.Pem.PemWriter</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.GetOutputSize(Org.BouncyCastle.Utilities.IO.Pem.PemObject)"></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.WriteObject(Org.BouncyCastle.Utilities.IO.Pem.PemObjectGenerator)"></member>
    <member name="P:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.Writer"></member>
    <member name="T:Org.BouncyCastle.Utilities.Net.IPAddress"></member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Net.IPAddress</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValid(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv4(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv4WithNetmask(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv6(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv6WithNetmask(System.String)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidWithNetMask(System.String)"></member>
    <member name="T:Org.BouncyCastle.Utilities.Zlib.Deflate"></member>
    <member name="T:Org.BouncyCastle.Utilities.Zlib.JZlib"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.JZlib.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.JZlib</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.JZlib.version"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_BEST_COMPRESSION"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_BEST_SPEED"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_BUF_ERROR"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_DATA_ERROR"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_DEFAULT_COMPRESSION"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_DEFAULT_STRATEGY"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_ERRNO"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_FILTERED"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_FINISH"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_FULL_FLUSH"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_HUFFMAN_ONLY"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_MEM_ERROR"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_NEED_DICT"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_NO_COMPRESSION"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_NO_FLUSH"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_OK"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_PARTIAL_FLUSH"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_STREAM_END"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_STREAM_ERROR"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_SYNC_FLUSH"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.JZlib.Z_VERSION_ERROR"></member>
    <member name="T:Org.BouncyCastle.Utilities.Zlib.ZInputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Utilities.Zlib.ZStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZInputStream.buf"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZInputStream.buf1"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZInputStream.closed"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZInputStream.compress"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.Detach(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZInputStream.flushLevel"></member>
    <member name="P:Org.BouncyCastle.Utilities.Zlib.ZInputStream.FlushMode"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZInputStream.input"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.Read(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStream.ReadByte"></member>
    <member name="P:Org.BouncyCastle.Utilities.Zlib.ZInputStream.TotalIn"></member>
    <member name="P:Org.BouncyCastle.Utilities.Zlib.ZInputStream.TotalOut"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZInputStream.z"></member>
    <member name="T:Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen.#ctor(System.IO.Stream,Org.BouncyCastle.Utilities.Zlib.ZStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZInputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Zlib.ZOutputStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Utilities.Zlib.ZStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.buf"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.buf1"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.closed"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.compress"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.Detach(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStream</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStream</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.End"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.Finish"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.Flush"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.flushLevel"></member>
    <member name="P:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.FlushMode"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.output"></member>
    <member name="P:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.TotalIn"></member>
    <member name="P:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.TotalOut"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.Write(System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.WriteByte(System.Byte)"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZOutputStream.z"></member>
    <member name="T:Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen.#ctor(System.IO.Stream,Org.BouncyCastle.Utilities.Zlib.ZStream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZOutputStreamLeaveOpen</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Org.BouncyCastle.Utilities.Zlib.ZStream"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.Utilities.Zlib.ZStream</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.adler"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.avail_in"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.avail_out"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflate(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflateEnd"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflateInit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflateInit(System.Int32,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflateInit(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflateInit(System.Int32,System.Int32,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflateParams(System.Int32,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.free"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflate(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflateEnd"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflateInit"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflateInit(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflateInit(System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflateInit(System.Int32,System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"></member>
    <member name="M:Org.BouncyCastle.Utilities.Zlib.ZStream.inflateSync"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.msg"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.next_in"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.next_in_index"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.next_out"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.next_out_index"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.total_in"></member>
    <member name="F:Org.BouncyCastle.Utilities.Zlib.ZStream.total_out"></member>
    <member name="T:Org.BouncyCastle.X509.AttributeCertificateHolder">
      <remarks>
            The Holder object.
            <pre>
            Holder ::= SEQUENCE {
            	baseCertificateID   [0] IssuerSerial OPTIONAL,
            		-- the issuer and serial number of
            		-- the holder's Public Key Certificate
            	entityName          [1] GeneralNames OPTIONAL,
            		-- the name of the claimant or role
            	objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
            		-- used to directly authenticate the holder,
            		-- for example, an executable
            }
            </pre></remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.#ctor(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.AttributeCertificateHolder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.#ctor(Org.BouncyCastle.Asn1.X509.X509Name,Org.BouncyCastle.Math.BigInteger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.AttributeCertificateHolder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.#ctor(Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.AttributeCertificateHolder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.#ctor(System.Int32,System.String,System.String,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.AttributeCertificateHolder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.Clone"></member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.DigestAlgorithm"></member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.DigestedObjectType"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.Equals(Org.BouncyCastle.X509.AttributeCertificateHolder)"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.GetEntityNames"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.GetIssuer"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.GetObjectDigest"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.Match(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.OtherObjectTypeID"></member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.SerialNumber"></member>
    <member name="T:Org.BouncyCastle.X509.AttributeCertificateIssuer"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.#ctor(Org.BouncyCastle.Asn1.X509.AttCertIssuer)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.AttributeCertificateIssuer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.#ctor(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.AttributeCertificateIssuer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.Clone"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.GetPrincipals">
      <summary>Return any principal objects inside the attribute certificate issuer object.</summary>
      <returns>An array of IPrincipal objects (usually X509Principal).</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.Match(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="T:Org.BouncyCastle.X509.IX509Extension"></member>
    <member name="M:Org.BouncyCastle.X509.IX509Extension.GetCriticalExtensionOids">
      <summary>
            Get all critical extension values, by oid
            </summary>
      <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.IX509Extension.GetExtensionValue(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.X509.IX509Extension.GetNonCriticalExtensionOids">
      <summary>
            Get all non-critical extension values, by oid
            </summary>
      <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
    </member>
    <member name="T:Org.BouncyCastle.X509.PrincipalUtilities">
      <remarks>
            A utility class that will extract X509Principal objects from X.509 certificates.
            <p>
            Use this in preference to trying to recreate a principal from a string, not all
            DNs are what they should be, so it's best to leave them encoded where they
            can be.</p></remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.PrincipalUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.PrincipalUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.PrincipalUtilities.GetIssuerX509Principal(Org.BouncyCastle.X509.X509Certificate)">
      <summary>Return the issuer of the given cert as an X509Principal.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.PrincipalUtilities.GetIssuerX509Principal(Org.BouncyCastle.X509.X509Crl)">
      <summary>Return the issuer of the given CRL as an X509Principal.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.PrincipalUtilities.GetSubjectX509Principal(Org.BouncyCastle.X509.X509Certificate)">
      <summary>Return the subject of the given cert as an X509Principal.</summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.SubjectPublicKeyInfoFactory">
      <summary>
            A factory to produce Public Key Info Objects.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Create a Subject Public Key Info object for a given public key.
            </summary>
      <param name="publicKey">One of ElGammalPublicKeyParameters, DSAPublicKeyParameter, DHPublicKeyParameters, RsaKeyParameters or ECPublicKeyParameters</param>
      <returns>A subject public key info object.</returns>
      <exception cref="T:System.Exception">Throw exception if object provided is not one of the above.</exception>
    </member>
    <member name="T:Org.BouncyCastle.X509.X509AttrCertParser"></member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509AttrCertParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.X509.X509Attribute"></member>
    <member name="M:Org.BouncyCastle.X509.X509Attribute.#ctor(System.String,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509Attribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Attribute.#ctor(System.String,Org.BouncyCastle.Asn1.Asn1EncodableVector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509Attribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Attribute.GetValues"></member>
    <member name="P:Org.BouncyCastle.X509.X509Attribute.Oid"></member>
    <member name="M:Org.BouncyCastle.X509.X509Attribute.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.X509.X509Certificate">
      <summary>
            An Object representing an X509 Certificate.
            Has static methods for loading Certificates encoded in many forms that return X509Certificate Objects.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509Certificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509Certificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509Certificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.CertificateStructure"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.CheckSignature(Org.BouncyCastle.Crypto.IVerifierFactory)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.CheckSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactory)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.CheckValidity">
      <summary>
            Checks if the current date is within certificate's validity period.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.CheckValidity(System.DateTime)">
      <summary>
            Checks if the given date is within certificate's validity period.
            </summary>
      <exception cref="T:Org.BouncyCastle.Security.Certificates.CertificateExpiredException">if the certificate is expired by given date</exception>
      <exception cref="T:Org.BouncyCastle.Security.Certificates.CertificateNotYetValidException">if the certificate is not yet valid on given date</exception>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetAlternativeNameExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetAlternativeNames(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetBasicConstraints"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetEncoded">
      <summary>
            Return the DER encoding of this certificate.
            </summary>
      <returns>A byte array containing the DER encoding of this certificate.</returns>
      <exception cref="T:Org.BouncyCastle.Security.Certificates.CertificateEncodingException">If there is an error encoding the certificate.</exception>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetExtendedKeyUsage"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetIssuerAlternativeNameExtension"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetIssuerAlternativeNames"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetKeyUsage">
      <summary>
            Get a key usage guidlines.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetPublicKey">
      <summary>
            Get the public key of the subject of the certificate.
            </summary>
      <returns>The public key parameters.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetSigAlgParams">
      <summary>
            Get the signature algorithms parameters. (EG DSA Parameters)
            </summary>
      <returns>A byte array containing the Der encoded version of the parameters or null if there are none.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetSignature">
      <summary>
            The signature.
            </summary>
      <returns>A byte array containg the signature of the certificate.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetSubjectAlternativeNameExtension"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetSubjectAlternativeNames"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetTbsCertificate">
      <summary>
            Return the Der encoded TbsCertificate data.
            This is the certificate component less the signature.
            To Get the whole certificate call the GetEncoded() member.
            </summary>
      <returns>A byte array containing the Der encoded Certificate component.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.GetX509Extensions"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.IsAlternativeSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.IsSignatureValid(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.IsSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)"></member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.IssuerDN">
      <summary>
            Get the Issuer Distinguished Name. (Who signed the certificate.)
            </summary>
      <returns>And X509Object containing name and value pairs.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.IssuerUniqueID">
      <summary>
            Get the issuers UID.
            </summary>
      <returns>A DerBitString.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.IsValid(System.DateTime)">
      <summary>
            Return true if the nominated time is within the start and end times nominated on the certificate.
            </summary>
      <param name="time">The time to test validity against.</param>
      <returns>True if certificate is valid for nominated time.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.IsValidNow">
      <summary>
            Return true if the current time is within the start and end times nominated on the certificate.
            </summary>
      <returns>true id certificate is valid for the current time.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.NotAfter">
      <summary>
            The time that this certificate is valid up to.
            </summary>
      <returns>A DateTime object representing that time in the local time zone.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.NotBefore">
      <summary>
            The time that this certificate is valid from.
            </summary>
      <returns>A DateTime object representing that time in the local time zone.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.SerialNumber">
      <summary>
            Return a <see cref="T:Org.BouncyCastle.Math.BigInteger">BigInteger</see> containing the serial number.
            </summary>
      <returns>The Serial number.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.SigAlgName">
      <summary>
            A meaningful version of the Signature Algorithm. (EG SHA1WITHRSA)
            </summary>
      <returns>A sting representing the signature algorithm.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.SigAlgOid">
      <summary>
            Get the Signature Algorithms Object ID.
            </summary>
      <returns>A string containg a '.' separated object id.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.SignatureAlgorithm">
      <summary>The signature algorithm.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.SubjectDN">
      <summary>
            Get the subject of this certificate.
            </summary>
      <returns>An X509Name object containing name and value pairs.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.SubjectPublicKeyInfo">
      <summary>
            Return the plain SubjectPublicKeyInfo that holds the encoded public key.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.SubjectUniqueID">
      <summary>
            Get the subjects UID.
            </summary>
      <returns>A DerBitString.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.TbsCertificate"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.ToString"></member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.Verify(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Verify the certificate's signature using the nominated public key.
            </summary>
      <param name="key">An appropriate public key parameter object, RsaPublicKeyParameters, DsaPublicKeyParameters or ECDsaPublicKeyParameters</param>
      <returns>True if the signature is valid.</returns>
      <exception cref="T:System.Exception">If key submitted is not of the above nominated types.</exception>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.Verify(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)">
      <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
      <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
      <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate signature algorithm
            is invalid.</exception>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Certificate.VerifyAltSignature(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)">
      <summary>Verify the certificate's alternative signature using a verifier created using the passed in
            verifier provider.</summary>
      <param name="verifierProvider">An appropriate provider for verifying the certificate's alternative
            signature.</param>
      <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate alternative signature
            algorithm is invalid.</exception>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Certificate.Version">
      <summary>
            Return the certificate's version.
            </summary>
      <returns>An integer whose value Equals the version of the cerficate.</returns>
    </member>
    <member name="T:Org.BouncyCastle.X509.X509CertificatePair">
      <remarks>
            This class contains a cross certificate pair. Cross certificates pairs may
            contain two cross signed certificates from two CAs. A certificate from the
            other CA to this CA is contained in the forward certificate, the certificate
            from this CA to the other CA is contained in the reverse certificate.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificatePair.#ctor(Org.BouncyCastle.Asn1.X509.CertificatePair)">
      <summary>Constructor from a ASN.1 CertificatePair structure.</summary>
      <param name="pair">The <c>CertificatePair</c> ASN.1 object.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificatePair.#ctor(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.X509.X509Certificate)">
      <summary>Constructor</summary>
      <param name="forward">Certificate from the other CA to this CA.</param>
      <param name="reverse">Certificate from this CA to the other CA.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificatePair.Equals(System.Object)"></member>
    <member name="P:Org.BouncyCastle.X509.X509CertificatePair.Forward">
      <summary>Returns the certificate from the other CA to this CA.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificatePair.GetCertificatePair"></member>
    <member name="M:Org.BouncyCastle.X509.X509CertificatePair.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.X509.X509CertificatePair.GetHashCode"></member>
    <member name="P:Org.BouncyCastle.X509.X509CertificatePair.Reverse">
      <summary>Returns the certificate from this CA to the other CA.</summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.X509CertificateParser"></member>
    <member name="M:Org.BouncyCastle.X509.X509CertificateParser.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509CertificateParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificateParser.ParseCertificates(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.X509.X509CertificateParser.ReadCertificate(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificateParser.ReadCertificate(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.X509.X509CertificateParser.ReadCertificates(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificateParser.ReadCertificates(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.X509.X509CertPairParser"></member>
    <member name="M:Org.BouncyCastle.X509.X509CertPairParser.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509CertPairParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertPairParser.ReadCertPair(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertPairParser.ReadCertPair(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.X509.X509CertPairParser.ReadCertPairs(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertPairParser.ReadCertPairs(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.X509.X509Crl"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.#ctor(Org.BouncyCastle.Asn1.X509.CertificateList)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509Crl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509Crl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.CertificateList"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.CheckSignature(Org.BouncyCastle.Crypto.IVerifierFactory)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.CheckSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactory)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetEncoded">
      <summary>
            Return the DER encoding of this CRL.
            </summary>
      <returns>A byte array containing the DER encoding of this CRL.</returns>
      <exception cref="T:Org.BouncyCastle.Security.Certificates.CrlException">If there is an error encoding the CRL.</exception>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetRevokedCertificate(Org.BouncyCastle.Math.BigInteger)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetRevokedCertificates"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetSigAlgParams"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetSignature"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetTbsCertList"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.GetX509Extensions"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.IsAlternativeSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)"></member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.IsIndirectCrl"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.IsRevoked(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.IsSignatureValid(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.IsSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)"></member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.IssuerDN"></member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.NextUpdate"></member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.SigAlgName"></member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.SigAlgOid"></member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.ThisUpdate"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.ToString"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.Verify(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.Verify(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)">
      <summary>
            Verify the CRL's signature using a verifier created using the passed in verifier provider.
            </summary>
      <param name="verifierProvider">An appropriate provider for verifying the CRL's signature.</param>
      <returns>True if the signature is valid.</returns>
      <exception cref="T:System.Exception">If verifier provider is not appropriate or the CRL algorithm is invalid.</exception>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.VerifyAltSignature(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)">
      <summary>Verify the CRL's alternative signature using a verifier created using the passed in
            verifier provider.</summary>
      <param name="verifierProvider">An appropriate provider for verifying the CRL's alternative signature.
            </param>
      <exception cref="T:System.Exception">If verifier provider is not appropriate or the CRL alternative signature
            algorithm is invalid.</exception>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509Crl.Version"></member>
    <member name="T:Org.BouncyCastle.X509.X509CrlEntry"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.#ctor(Org.BouncyCastle.Asn1.X509.CrlEntry)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509CrlEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.#ctor(Org.BouncyCastle.Asn1.X509.CrlEntry,System.Boolean,Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509CrlEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.GetCertificateIssuer"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.X509.X509CrlEntry.HasExtensions"></member>
    <member name="P:Org.BouncyCastle.X509.X509CrlEntry.RevocationDate"></member>
    <member name="P:Org.BouncyCastle.X509.X509CrlEntry.SerialNumber"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlEntry.ToString"></member>
    <member name="T:Org.BouncyCastle.X509.X509CrlParser"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509CrlParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.#ctor(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509CrlParser</parameter>
          </include>
        </markup>
      </summary>
      <remarks>Value of <paramref name="lazyAsn1" /> is ignored.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ParseCrls(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrl(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrl(System.IO.Stream)"></member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrls(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input"></param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrls(System.IO.Stream)"></member>
    <member name="T:Org.BouncyCastle.X509.X509ExtensionBase"></member>
    <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509ExtensionBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetCriticalExtensionOids">
      <summary>
            Get any critical extensions.
            </summary>
      <returns>A sorted list of critical entension.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetExtensionOids(System.Boolean)"></member>
    <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetExtensionValue(Org.BouncyCastle.Asn1.DerObjectIdentifier)"></member>
    <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetNonCriticalExtensionOids">
      <summary>
            Get non critical extensions.
            </summary>
      <returns>A set of non critical extension oids.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetX509Extensions"></member>
    <member name="T:Org.BouncyCastle.X509.X509KeyUsage"></member>
    <member name="M:Org.BouncyCastle.X509.X509KeyUsage.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509KeyUsage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.CrlSign"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.DataEncipherment"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.DecipherOnly"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.DigitalSignature"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.EncipherOnly"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.KeyAgreement"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.KeyCertSign"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.KeyEncipherment"></member>
    <member name="F:Org.BouncyCastle.X509.X509KeyUsage.NonRepudiation"></member>
    <member name="M:Org.BouncyCastle.X509.X509KeyUsage.ToAsn1Object"></member>
    <member name="T:Org.BouncyCastle.X509.X509V1CertificateGenerator">
      <summary>
            Class to Generate X509V1 Certificates.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.Generate(Org.BouncyCastle.Crypto.ISignatureFactory)">
      <summary>
            Generate a new <see cref="T:Org.BouncyCastle.X509.X509Certificate" /> using the provided <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory" />.
            </summary>
      <param name="signatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> with the necessary
            algorithm details.</param>
      <returns>An <see cref="T:Org.BouncyCastle.X509.X509Certificate" />.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.Reset">
      <summary>
            Reset the generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetIssuerDN(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
            Set the issuer distinguished name.
            The issuer is the entity whose private key is used to sign the certificate.
            </summary>
      <param name="issuer">The issuers DN.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetNotAfter(System.DateTime)">
      <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetNotBefore(System.DateTime)">
      <summary>
            Set the date that this certificate is to be valid from.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Set the public key that this certificate identifies.
            </summary>
      <param name="publicKey" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Set the certificate's serial number.
            </summary>
      <param name="serialNumber">The serial number.</param>
      <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can get.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetSubjectDN(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
            Set the subject distinguished name.
            The subject describes the entity associated with the public key.
            </summary>
      <param name="subject" />
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V1CertificateGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.X509V2AttributeCertificate">
      <summary>An implementation of a version 2 X.509 Attribute Certificate.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.#ctor(Org.BouncyCastle.Asn1.X509.AttributeCertificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V2AttributeCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.#ctor(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V2AttributeCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.#ctor(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V2AttributeCertificate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.AttributeCertificate"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.CheckSignature(Org.BouncyCastle.Crypto.IVerifierFactory)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.CheckSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactory)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.CheckValidity"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.CheckValidity(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.Equals(System.Object)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.GetAttributes"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.GetAttributes(System.String)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.GetEncoded"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.GetHashCode"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.GetIssuerUniqueID"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.GetSignature"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.GetX509Extensions"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.Holder"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.IsSignatureValid(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.IsSignatureValid(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.Issuer"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.IsValid(System.DateTime)"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.IsValidNow"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.NotAfter"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.NotBefore"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.SignatureAlgorithm"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.Verify(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificate.Verify(Org.BouncyCastle.Crypto.IVerifierFactoryProvider)">
      <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
      <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
      <returns>True if the signature is valid.</returns>
      <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate algorithm is invalid.</exception>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificate.Version"></member>
    <member name="T:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator">
      <remarks>Class to produce an X.509 Version 2 AttributeCertificate.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddAttribute(Org.BouncyCastle.X509.X509Attribute)">
      <summary>Add an attribute.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>Add a given extension field for the standard extensions tag.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
      <summary>
            Add a given extension field for the standard extensions tag.
            The value parameter becomes the contents of the octet string associated
            with the extension.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Generate(Org.BouncyCastle.Crypto.ISignatureFactory)">
      <summary>
            Generate a new <see cref="T:Org.BouncyCastle.X509.X509V2AttributeCertificate" /> using the provided <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory" />.
            </summary>
      <param name="signatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> with the necessary
            algorithm details.</param>
      <returns>An <see cref="T:Org.BouncyCastle.X509.X509V2AttributeCertificate" />.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Reset">
      <summary>Reset the generator</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetHolder(Org.BouncyCastle.X509.AttributeCertificateHolder)">
      <summary>Set the Holder of this Attribute Certificate.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetIssuer(Org.BouncyCastle.X509.AttributeCertificateIssuer)">
      <summary>Set the issuer.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetIssuerUniqueId(System.Boolean[])"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetNotAfter(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetNotBefore(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)">
      <summary>Set the serial number for the certificate.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.X509V2CrlGenerator"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V2CrlGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.#ctor(Org.BouncyCastle.Asn1.X509.CertificateList)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V2CrlGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.#ctor(Org.BouncyCastle.X509.X509Crl)">
      <summary>Create a builder for a version 2 CRL, initialised with another CRL.</summary>
      <param name="template">Template CRL to base the new one on.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddCrl(Org.BouncyCastle.X509.X509Crl)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(Org.BouncyCastle.Math.BigInteger,System.DateTime,Org.BouncyCastle.Asn1.X509.X509Extensions)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(Org.BouncyCastle.Math.BigInteger,System.DateTime,System.Int32)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(Org.BouncyCastle.Math.BigInteger,System.DateTime,System.Int32,System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.Generate(Org.BouncyCastle.Crypto.ISignatureFactory)">
      <summary>
            Generate a new <see cref="T:Org.BouncyCastle.X509.X509Crl" /> using the provided <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory" />.
            </summary>
      <param name="signatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> with the necessary
            algorithm details.</param>
      <returns>An <see cref="T:Org.BouncyCastle.X509.X509Crl" />.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.Generate(Org.BouncyCastle.Crypto.ISignatureFactory,System.Boolean,Org.BouncyCastle.Crypto.ISignatureFactory)">
      <summary>
            Generate a new <see cref="T:Org.BouncyCastle.X509.X509Crl" /> using the provided <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory" /> and
            containing altSignatureAlgorithm and altSignatureValue extensions based on the passed
            <paramref name="altSignatureFactory" />.
            </summary>
      <param name="signatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> with the necessary
            algorithm details.</param>
      <param name="isCritical">Whether the 'alt' extensions should be marked critical.</param>
      <param name="altSignatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> used to create the
            altSignatureAlgorithm and altSignatureValue extensions.</param>
      <returns>An <see cref="T:Org.BouncyCastle.X509.X509Certificate" />.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.Reset"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.SetIssuerDN(Org.BouncyCastle.Asn1.X509.X509Name)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.SetNextUpdate(System.DateTime)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.SetThisUpdate(System.DateTime)"></member>
    <member name="P:Org.BouncyCastle.X509.X509V2CrlGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.X509V3CertificateGenerator">
      <summary>
            A class to Generate Version 3 X509Certificates.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V3CertificateGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.X509V3CertificateGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.#ctor(Org.BouncyCastle.X509.X509Certificate)">
      <summary>Create a generator for a version 3 certificate, initialised with another certificate.</summary>
      <param name="template">Template certificate to base the new one on.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
            Add an extension to this certificate.
            </summary>
      <param name="oid">Its Object Identifier.</param>
      <param name="critical">Is it critical.</param>
      <param name="extensionValue">The value.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
      <summary>
            Add an extension to this certificate.
            </summary>
      <param name="oid">Its Object Identifier.</param>
      <param name="critical">Is it critical.</param>
      <param name="extensionValue">byte[] containing the value of this extension.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)">
      <summary>
            Add a given extension field for the standard extensions tag (tag 3).
            </summary>
      <param name="oid">string containing a dotted decimal Object Identifier.</param>
      <param name="critical">Is it critical.</param>
      <param name="extensionValue">The value.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
      <summary>
            Add an extension using a string with a dotted decimal OID.
            </summary>
      <param name="oid">string containing a dotted decimal Object Identifier.</param>
      <param name="critical">Is it critical.</param>
      <param name="extensionValue">byte[] containing the value of this extension.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.CopyAndAddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.CopyAndAddExtension(System.String,System.Boolean,Org.BouncyCastle.X509.X509Certificate)">
      <summary>
            Add a given extension field for the standard extensions tag (tag 3),
            copying the extension value from another certificate.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.Generate(Org.BouncyCastle.Crypto.ISignatureFactory)">
      <summary>
            Generate a new <see cref="T:Org.BouncyCastle.X509.X509Certificate" /> using the provided <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory" />.
            </summary>
      <param name="signatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> with the necessary
            algorithm details.</param>
      <returns>An <see cref="T:Org.BouncyCastle.X509.X509Certificate" />.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.Generate(Org.BouncyCastle.Crypto.ISignatureFactory,System.Boolean,Org.BouncyCastle.Crypto.ISignatureFactory)">
      <summary>
            Generate a new <see cref="T:Org.BouncyCastle.X509.X509Certificate" /> using the provided <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory" /> and
            containing altSignatureAlgorithm and altSignatureValue extensions based on the passed
            <paramref name="altSignatureFactory" />.
            </summary>
      <param name="signatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> with the necessary
            algorithm details.</param>
      <param name="isCritical">Whether the 'alt' extensions should be marked critical.</param>
      <param name="altSignatureFactory">A <see cref="T:Org.BouncyCastle.Crypto.ISignatureFactory">signature factory</see> used to create the
            altSignatureAlgorithm and altSignatureValue extensions.</param>
      <returns>An <see cref="T:Org.BouncyCastle.X509.X509Certificate" />.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.Reset">
      <summary>
            Reset the Generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetIssuerDN(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
            Set the distinguished name of the issuer.
            The issuer is the entity which is signing the certificate.
            </summary>
      <param name="issuer">The issuer's DN.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetIssuerUniqueID(System.Boolean[])">
      <summary>
            Set the issuer unique ID - note: it is very rare that it is correct to do this.
            </summary>
      <param name="uniqueID" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetNotAfter(System.DateTime)">
      <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetNotBefore(System.DateTime)">
      <summary>
            Set the date that this certificate is to be valid from.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
            Set the public key that this certificate identifies.
            </summary>
      <param name="publicKey" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)">
      <summary>
            Set the certificate's serial number.
            </summary>
      <param name="serialNumber">The serial number.</param>
      <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can Get.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectDN(Org.BouncyCastle.Asn1.X509.X509Name)">
      <summary>
            Set the DN of the entity that this certificate is about.
            </summary>
      <param name="subject" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectPublicKeyInfo(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
      <summary>
            Set the SubjectPublicKeyInfo for the public key that this certificate identifies.
            </summary>
      <param name="subjectPublicKeyInfo" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectUniqueID(System.Boolean[])">
      <summary>
            Set the subject unique ID - note: it is very rare that it is correct to do this.
            </summary>
      <param name="uniqueID" />
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V3CertificateGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure">
      <remarks>A high level authority key identifier.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(Org.BouncyCastle.X509.X509Certificate)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure"></member>
    <member name="M:Org.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure.#ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.Extension.X509ExtensionUtilities"></member>
    <member name="M:Org.BouncyCastle.X509.Extension.X509ExtensionUtilities.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Extension.X509ExtensionUtilities</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Extension.X509ExtensionUtilities.FromExtensionValue(Org.BouncyCastle.Asn1.Asn1OctetString)"></member>
    <member name="M:Org.BouncyCastle.X509.Extension.X509ExtensionUtilities.FromExtensionValue(Org.BouncyCastle.X509.IX509Extension,Org.BouncyCastle.Asn1.DerObjectIdentifier)">
      <summary>
            Extract the value of the given extension, if it exists.
            </summary>
      <param name="extensions">The extensions object.</param>
      <param name="oid">The object identifier to obtain.</param>
      <returns>Asn1Object</returns>
      <exception cref="T:System.Exception">if the extension cannot be read.</exception>
    </member>
    <member name="T:Org.BouncyCastle.X509.Store.ICheckingCertificate"></member>
    <member name="P:Org.BouncyCastle.X509.Store.ICheckingCertificate.CertificateChecking"></member>
    <member name="T:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(Org.BouncyCastle.Asn1.X509.GeneralName)"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(System.Byte[])"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetName(Org.BouncyCastle.Asn1.X509.GeneralName)"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetName(System.Byte[])"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCert">
      <summary>The attribute certificate which must be matched.</summary>
      <remarks>If <c>null</c> is given, any will do.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCertificateValid">
      <summary>The criteria for validity</summary>
      <remarks>If <c>null</c> is given any will do.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Clone"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetGroups"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetNames"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Holder">
      <summary>The holder.</summary>
      <remarks>If <c>null</c> is given any will do.</remarks>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Issuer">
      <summary>The issuer.</summary>
      <remarks>If <c>null</c> is given any will do.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Match(Org.BouncyCastle.X509.X509V2AttributeCertificate)">
      <summary>
            Decides if the given attribute certificate should be selected.
            </summary>
      <param name="attrCert">The attribute certificate to be checked.</param>
      <returns>
        <code>true</code> if the object matches this selector.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SerialNumber">
      <summary>The serial number.</summary>
      <remarks>If <c>null</c> is given any will do.</remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetGroups(System.Collections.Generic.IEnumerable{System.Object})"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetNames(System.Collections.Generic.IEnumerable{System.Object})"></member>
    <member name="T:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector">
      <remarks>
            This class is an <code>IX509Selector</code> implementation to select
            certificate pairs, which are e.g. used for cross certificates. The set of
            criteria is given from two <code>X509CertStoreSelector</code> objects,
            each of which, if present, must match the respective component of a pair.
            </remarks>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Store.X509CertPairStoreSelector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.CertPair">
      <summary>The certificate pair which is used for testing on equality.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.Clone"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.ForwardSelector">
      <summary>The certificate selector for the forward part.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.Match(Org.BouncyCastle.X509.X509CertificatePair)">
      <summary>
            Decides if the given certificate pair should be selected. If
            <c>obj</c> is not a <code language="cs">X509CertificatePair</code>, this method
            returns <code>false</code>.
            </summary>
      <param name="pair">The <code>X509CertificatePair</code> to be tested.</param>
      <returns>
        <code>true</code> if the object matches this selector.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.ReverseSelector">
      <summary>The certificate selector for the reverse part.</summary>
    </member>
    <member name="T:Org.BouncyCastle.X509.Store.X509CertStoreSelector"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Store.X509CertStoreSelector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.#ctor(Org.BouncyCastle.X509.Store.X509CertStoreSelector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Store.X509CertStoreSelector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.AuthorityKeyIdentifier"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.BasicConstraints"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.Certificate"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.CertificateValid"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.Clone"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.ExtendedKeyUsage"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.GetHashCodeOfSubjectKeyIdentifier"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.IgnoreX509NameOrdering"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.Issuer"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.KeyUsage"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.Match(Org.BouncyCastle.X509.X509Certificate)"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.MatchesIssuer(Org.BouncyCastle.X509.Store.X509CertStoreSelector)"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.MatchesSerialNumber(Org.BouncyCastle.X509.Store.X509CertStoreSelector)"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertStoreSelector.MatchesSubjectKeyIdentifier(Org.BouncyCastle.X509.Store.X509CertStoreSelector)"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.Policy">
      <summary>
            An <code>ISet</code> of <code>DerObjectIdentifier</code> objects.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.PrivateKeyValid"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.SerialNumber"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.Subject"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.SubjectKeyIdentifier"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.SubjectPublicKey"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.SubjectPublicKeyAlgID"></member>
    <member name="T:Org.BouncyCastle.X509.Store.X509CrlStoreSelector"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Store.X509CrlStoreSelector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.#ctor(Org.BouncyCastle.X509.Store.X509CrlStoreSelector)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Org.BouncyCastle.X509.Store.X509CrlStoreSelector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.AttrCertChecking"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.CertificateChecking"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.Clone"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.CompleteCrlEnabled"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.DateAndTime"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.DeltaCrlIndicatorEnabled"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.Issuers">
      <summary>
            An <code>ICollection</code> of <code>X509Name</code> objects
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPoint"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPointEnabled"></member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.Match(Org.BouncyCastle.X509.X509Crl)"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.MaxBaseCrlNumber"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.MaxCrlNumber"></member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.MinCrlNumber"></member>
  </members>
</doc>